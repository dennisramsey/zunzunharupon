{"version":3,"file":"index.js","sources":["../src/withNormalizeTypes.ts","../src/createNormalizeTypesPlugin.ts","../../../node_modules/lodash/isArray.js","../../../node_modules/lodash/castArray.js","../src/withRemoveEmptyNodes.ts","../src/createRemoveEmptyNodesPlugin.ts"],"sourcesContent":["import {\n  getNode,\n  insertElements,\n  isElement,\n  PlateEditor,\n  setElements,\n  TElement,\n  Value,\n  WithPlatePlugin,\n} from '@udecode/plate-common';\n\nimport { NormalizeTypesPlugin } from './createNormalizeTypesPlugin';\n\nexport const withNormalizeTypes = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  { options: { rules, onError } }: WithPlatePlugin<NormalizeTypesPlugin, V, E>\n) => {\n  const { normalizeNode } = editor;\n\n  editor.normalizeNode = ([currentNode, currentPath]) => {\n    if (currentPath.length === 0) {\n      const endCurrentNormalizationPass = rules!.some(\n        ({ strictType, type, path }) => {\n          const node = getNode<TElement>(editor, path);\n\n          if (node) {\n            if (strictType && isElement(node) && node.type !== strictType) {\n              setElements(\n                editor,\n                { type: strictType },\n                {\n                  at: path,\n                }\n              );\n              return true;\n            }\n          } else {\n            try {\n              insertElements(\n                editor,\n                {\n                  type: strictType ?? type!,\n                  children: [{ text: '' }],\n                },\n                { at: path }\n              );\n              return true;\n            } catch (error) {\n              onError?.(error);\n            }\n          }\n\n          return false;\n        }\n      );\n\n      if (endCurrentNormalizationPass) {\n        return;\n      }\n    }\n\n    return normalizeNode([currentNode, currentPath]);\n  };\n\n  return editor;\n};\n","import { createPluginFactory, ErrorHandler } from '@udecode/plate-common';\nimport { Path } from 'slate';\n\nimport { withNormalizeTypes } from './withNormalizeTypes';\n\ninterface Rule {\n  /**\n   * Force the type of the node at the given path\n   */\n  strictType?: string;\n  /**\n   * Type of the inserted node at the given path if `strictType` is not provided\n   */\n  type?: string;\n  /**\n   * Path where the rule applies\n   */\n  path: Path;\n}\n\nexport interface NormalizeTypesPlugin extends ErrorHandler {\n  /**\n   * Set of rules for the types.\n   * For each rule, provide a `path` and either `strictType` or `type`.\n   * If there is no node existing at `path`:\n   * insert a node with `strictType`.\n   * If there is a node existing at `path` but its type is not `strictType` or `type`:\n   * set the node type to `strictType` or `type`.\n   */\n  rules?: Rule[];\n}\n\nexport const KEY_NORMALIZE_TYPES = 'normalizeTypes';\n\n/**\n * @see {@link withNormalizeTypes}\n */\nexport const createNormalizeTypesPlugin =\n  createPluginFactory<NormalizeTypesPlugin>({\n    key: KEY_NORMALIZE_TYPES,\n    withOverrides: withNormalizeTypes,\n    options: {\n      rules: [],\n    },\n  });\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var isArray = require('./isArray');\n\n/**\n * Casts `value` as an array if it's not one.\n *\n * @static\n * @memberOf _\n * @since 4.4.0\n * @category Lang\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast array.\n * @example\n *\n * _.castArray(1);\n * // => [1]\n *\n * _.castArray({ 'a': 1 });\n * // => [{ 'a': 1 }]\n *\n * _.castArray('abc');\n * // => ['abc']\n *\n * _.castArray(null);\n * // => [null]\n *\n * _.castArray(undefined);\n * // => [undefined]\n *\n * _.castArray();\n * // => []\n *\n * var array = [1, 2, 3];\n * console.log(_.castArray(array) === array);\n * // => true\n */\nfunction castArray() {\n  if (!arguments.length) {\n    return [];\n  }\n  var value = arguments[0];\n  return isArray(value) ? value : [value];\n}\n\nmodule.exports = castArray;\n","import {\n  getNodeString,\n  isElement,\n  PlateEditor,\n  removeNodes,\n  Value,\n  WithPlatePlugin,\n} from '@udecode/plate-common';\nimport castArray from 'lodash/castArray';\n\nimport { RemoveEmptyNodesPlugin } from './createRemoveEmptyNodesPlugin';\n\n/**\n * Remove nodes with empty text.\n */\nexport const withRemoveEmptyNodes = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  { options: { types: _types } }: WithPlatePlugin<RemoveEmptyNodesPlugin, V, E>\n) => {\n  const types = castArray(_types);\n\n  const { normalizeNode } = editor;\n\n  editor.normalizeNode = ([node, path]) => {\n    if (\n      isElement(node) &&\n      node.type &&\n      types.includes(node.type) &&\n      getNodeString(node) === ''\n    ) {\n      removeNodes(editor, { at: path });\n      return;\n    }\n\n    normalizeNode([node, path]);\n  };\n\n  return editor;\n};\n","import { createPluginFactory } from '@udecode/plate-common';\n\nimport { withRemoveEmptyNodes } from './withRemoveEmptyNodes';\n\nexport interface RemoveEmptyNodesPlugin {\n  types?: string | string[];\n}\n\n/**\n * @see {@link withRemoveEmptyNodes}\n */\nexport const createRemoveEmptyNodesPlugin =\n  createPluginFactory<RemoveEmptyNodesPlugin>({\n    key: 'removeEmptyNodes',\n    withOverrides: withRemoveEmptyNodes,\n  });\n"],"names":["withNormalizeTypes","editor","options","rules","onError","normalizeNode","currentNode","currentPath","length","endCurrentNormalizationPass","some","strictType","type","path","node","getNode","isElement","setElements","at","insertElements","children","text","error","KEY_NORMALIZE_TYPES","createNormalizeTypesPlugin","createPluginFactory","key","withOverrides","isArray","withRemoveEmptyNodes","types","_types","castArray","includes","getNodeString","removeNodes","createRemoveEmptyNodesPlugin"],"mappings":"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","x_google_ignoreList":[2,3]}