{"version":3,"file":"index.es.js","sources":["../src/utils/createElementWithSlate.ts","../src/utils/stripClassNames.ts","../src/elementToHtml.ts","../src/leafToHtml.ts","../src/utils/newLinesToHtmlBr.ts","../src/utils/stripSlateDataAttributes.ts","../src/utils/trimWhitespace.ts","../src/serializeHtml.ts"],"sourcesContent":["import React, { ComponentClass, FunctionComponent } from 'react';\nimport { createTEditor, SlateProps, withTReact } from '@udecode/plate-common';\nimport { Slate } from 'slate-react';\n\n/**\n * Create a React element wrapped in a Slate provider.\n * By default, it will use an empty editor.\n * TODO: allow other providers\n */\nexport const createElementWithSlate = (\n  slateProps?: Partial<SlateProps>,\n  dndWrapper?: string | FunctionComponent | ComponentClass\n) => {\n  const {\n    editor = withTReact(createTEditor()),\n    value = [],\n    onChange = () => {},\n    children,\n    ...props\n  } = slateProps || {};\n\n  if (dndWrapper) {\n    return React.createElement(\n      dndWrapper,\n      null,\n      React.createElement(\n        Slate,\n        {\n          editor,\n          initialValue: value,\n          onChange,\n          ...props,\n        } as any,\n        children\n      )\n    );\n  }\n\n  return React.createElement(\n    Slate,\n    {\n      editor,\n      initialValue: value,\n      onChange,\n      ...props,\n    } as any,\n    children\n  );\n};\n","/**\n * Remove all class names that do not start with one of preserveClassNames (`slate-` by default)\n */\nexport const stripClassNames = (\n  html: string,\n  { preserveClassNames = ['slate-'] }: { preserveClassNames?: string[] }\n) => {\n  const allClasses = html.split(/(class=\"[^\"]*\")/g);\n\n  let filteredHtml = '';\n  allClasses.forEach((item, index) => {\n    if (index % 2 === 0) {\n      return (filteredHtml += item);\n    }\n    const preserveRegExp = new RegExp(\n      preserveClassNames.map((cn) => `${cn}[^\"\\\\s]*`).join('|'),\n      'g'\n    );\n    const classNames = item.split('\"')[1].match(preserveRegExp);\n    if (classNames) {\n      filteredHtml += `class=\"${classNames.join(' ')}\"`;\n    }\n  });\n\n  return filteredHtml;\n};\n","import { ComponentClass, FunctionComponent } from 'react';\nimport {\n  pipeInjectProps,\n  PlateEditor,\n  PlateRenderElementProps,\n  pluginRenderElement,\n  SlateProps,\n  Value,\n} from '@udecode/plate-common';\nimport { decode } from 'html-entities';\nimport { renderToStaticMarkup } from 'react-dom/server';\n\nimport { createElementWithSlate } from './utils/createElementWithSlate';\nimport { stripClassNames } from './utils/stripClassNames';\n\nexport const elementToHtml = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    props,\n    slateProps,\n    preserveClassNames,\n    dndWrapper,\n  }: {\n    props: PlateRenderElementProps<V>;\n    slateProps?: Partial<SlateProps>;\n    preserveClassNames?: string[];\n    dndWrapper?: string | FunctionComponent | ComponentClass;\n  }\n) => {\n  let html = `<div>${props.children}</div>`;\n\n  // If no type provided we wrap children with div tag\n  if (!props.element.type) {\n    return html;\n  }\n\n  props = pipeInjectProps<V>(editor, props);\n\n  // Search for matching plugin based on element type\n  editor.plugins.some((plugin) => {\n    if (\n      !plugin.isElement ||\n      plugin.serializeHtml === null ||\n      props.element.type !== plugin.type\n    )\n      return false;\n\n    // Render element using picked plugins renderElement function and ReactDOM\n    html = decode(\n      renderToStaticMarkup(\n        createElementWithSlate(\n          {\n            ...slateProps,\n\n            children:\n              plugin.serializeHtml?.(props as any) ??\n              pluginRenderElement(editor, plugin)(props),\n          },\n          dndWrapper\n        )\n      )\n    );\n\n    html = stripClassNames(html, { preserveClassNames });\n\n    return true;\n  });\n\n  return html;\n};\n","import {\n  pipeInjectProps,\n  PlateEditor,\n  PlateRenderLeafProps,\n  pluginRenderLeaf,\n  SlateProps,\n  Value,\n} from '@udecode/plate-common';\nimport { decode } from 'html-entities';\nimport { renderToStaticMarkup } from 'react-dom/server';\n\nimport { createElementWithSlate } from './utils/createElementWithSlate';\nimport { stripClassNames } from './utils/stripClassNames';\n\nexport const leafToHtml = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    props,\n    slateProps,\n    preserveClassNames,\n  }: {\n    props: PlateRenderLeafProps<V>;\n    slateProps?: Partial<SlateProps>;\n    preserveClassNames?: string[];\n  }\n) => {\n  const { children } = props;\n\n  return editor.plugins.reduce((result, plugin) => {\n    if (!plugin.isLeaf) return result;\n\n    props = {\n      ...pipeInjectProps<V>(editor, props),\n      children: result,\n    };\n\n    const serialized =\n      plugin.serializeHtml?.(props as any) ??\n      pluginRenderLeaf(editor, plugin)(props);\n\n    if (serialized === children) return result;\n\n    let html = decode(\n      renderToStaticMarkup(\n        createElementWithSlate({\n          ...slateProps,\n          children: serialized,\n        })\n      )\n    );\n\n    html = stripClassNames(html, { preserveClassNames });\n\n    return html;\n  }, children);\n};\n","// Convert new line characters to HTML <br /> tags\nexport const newLinesToHtmlBr = (html: string): string =>\n  html.replaceAll('\\n', '<br />');\n","// Remove redundant data attributes\nexport const stripSlateDataAttributes = (rawHtml: string): string =>\n  rawHtml\n    .replaceAll(/( data-slate)(-node|-type|-leaf)=\"[^\"]+\"/g, '')\n    .replaceAll(/( data-testid)=\"[^\"]+\"/g, '');\n","// Remove extra whitespace generated by ReactDOMServer\nexport const trimWhitespace = (rawHtml: string): string =>\n  rawHtml.replaceAll(/(\\r\\n|[\\t\\n\\r])/g, '');\n","import { ComponentClass, FunctionComponent } from 'react';\nimport {\n  EDescendant,\n  EElement,\n  isText,\n  PlateEditor,\n  SlateProps,\n  Value,\n} from '@udecode/plate-common';\nimport { encode } from 'html-entities';\n\nimport { elementToHtml } from './elementToHtml';\nimport { leafToHtml } from './leafToHtml';\nimport { newLinesToHtmlBr } from './utils/newLinesToHtmlBr';\nimport { stripSlateDataAttributes } from './utils/stripSlateDataAttributes';\nimport { trimWhitespace } from './utils/trimWhitespace';\n\n/**\n * Convert Slate Nodes into HTML string.\n */\nexport const serializeHtml = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    nodes,\n    slateProps,\n    stripDataAttributes = true,\n    preserveClassNames,\n    stripWhitespace = true,\n    convertNewLinesToHtmlBr = false,\n    dndWrapper,\n  }: {\n    /**\n     * Slate nodes to convert to HTML.\n     */\n    nodes: EDescendant<V>[];\n\n    /**\n     * Enable stripping data attributes\n     */\n    stripDataAttributes?: boolean;\n\n    /**\n     * List of className prefixes to preserve from being stripped out\n     */\n    preserveClassNames?: string[];\n\n    /**\n     * Slate props to provide if the rendering depends on slate hooks\n     */\n    slateProps?: Partial<SlateProps>;\n\n    /**\n     * Whether stripping whitespaces from serialized HTML\n     * @default true\n     */\n    stripWhitespace?: boolean;\n\n    /**\n     * Optionally convert new line chars (\\n) to HTML <br /> tags\n     * @default false\n     */\n    convertNewLinesToHtmlBr?: boolean;\n\n    /**\n     *  Drag and drop component\n     */\n    dndWrapper?: string | FunctionComponent | ComponentClass;\n  }\n): string => {\n  let result = nodes\n    .map((node) => {\n      if (isText(node)) {\n        const children = encode(node.text);\n\n        return leafToHtml(editor, {\n          props: {\n            leaf: node as any,\n            text: node as any,\n            children: convertNewLinesToHtmlBr\n              ? newLinesToHtmlBr(children)\n              : children,\n            attributes: { 'data-slate-leaf': true },\n            editor,\n          },\n          slateProps,\n          preserveClassNames,\n        });\n      }\n\n      return elementToHtml<V>(editor, {\n        props: {\n          element: node as EElement<V>,\n          children: serializeHtml(editor, {\n            nodes: node.children as EDescendant<V>[],\n            preserveClassNames,\n            stripWhitespace,\n            convertNewLinesToHtmlBr,\n          }),\n          attributes: { 'data-slate-node': 'element', ref: null },\n          editor,\n        },\n        slateProps,\n        preserveClassNames,\n        dndWrapper,\n      });\n    })\n    .join('');\n\n  if (stripWhitespace) {\n    result = trimWhitespace(result);\n  }\n\n  if (stripDataAttributes) {\n    result = stripSlateDataAttributes(result);\n  }\n\n  return result;\n};\n"],"names":["createElementWithSlate","slateProps","dndWrapper","editor","withTReact","createTEditor","value","onChange","children","props","React","createElement","Slate","initialValue","stripClassNames","html","preserveClassNames","allClasses","split","filteredHtml","forEach","item","index","preserveRegExp","RegExp","map","cn","join","classNames","match","elementToHtml","element","type","pipeInjectProps","plugins","some","plugin","_plugin$serializeHtml","_plugin$serializeHtml2","isElement","serializeHtml","decode","renderToStaticMarkup","call","pluginRenderElement","leafToHtml","reduce","result","isLeaf","serialized","pluginRenderLeaf","newLinesToHtmlBr","replaceAll","stripSlateDataAttributes","rawHtml","trimWhitespace","nodes","stripDataAttributes","stripWhitespace","convertNewLinesToHtmlBr","node","isText","encode","text","leaf","attributes","ref"],"mappings":"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"}