import { createPluginFactory, getPluginType, ELEMENT_DEFAULT, mapInjectPropsToPlugin, usePlateEditorState, getPluginInjectProps, isCollapsed, getBlockAbove, usePlateEditorRef, focusEditor, unsetNodes, setElements, isBlock } from '@udecode/plate-common';

const KEY_LINE_HEIGHT = 'lineHeight';

/**
 * Enables support for text alignment, useful to align your content
 * to left, right and center it.
 */
const createLineHeightPlugin = createPluginFactory({
  key: KEY_LINE_HEIGHT,
  inject: {
    props: {
      nodeKey: KEY_LINE_HEIGHT,
      defaultNodeValue: 1.5
    }
  },
  then: editor => ({
    inject: {
      props: {
        validTypes: [getPluginType(editor, ELEMENT_DEFAULT)]
      }
    },
    then: (_, plugin) => mapInjectPropsToPlugin(editor, plugin, {
      deserializeHtml: {
        getNode: (el, node) => {
          if (el.style.lineHeight) {
            node[plugin.key] = el.style.lineHeight;
          }
        }
      }
    })
  })
});

const useLineHeightDropdownMenuState = () => {
  const editor = usePlateEditorState();
  const {
    validNodeValues: values = [],
    defaultNodeValue
  } = getPluginInjectProps(editor, KEY_LINE_HEIGHT);
  let value;
  if (isCollapsed(editor === null || editor === void 0 ? void 0 : editor.selection)) {
    const entry = getBlockAbove(editor);
    if (entry) {
      var _values$find;
      value = (_values$find = values.find(item => item === entry[0][KEY_LINE_HEIGHT])) !== null && _values$find !== void 0 ? _values$find : defaultNodeValue;
    }
  }
  return {
    value,
    values
  };
};
const useLineHeightDropdownMenu = ({
  value
}) => {
  const editor = usePlateEditorRef();
  return {
    radioGroupProps: {
      value,
      onValueChange: newValue => {
        setLineHeight(editor, {
          value: Number(newValue)
        });
        focusEditor(editor);
      }
    }
  };
};

const setLineHeight = (editor, {
  value,
  setNodesOptions
}) => {
  const {
    validTypes,
    defaultNodeValue,
    nodeKey
  } = getPluginInjectProps(editor, KEY_LINE_HEIGHT);
  const match = n => isBlock(editor, n) && !!validTypes && validTypes.includes(n.type);
  if (value === defaultNodeValue) {
    unsetNodes(editor, nodeKey, {
      match,
      ...setNodesOptions
    });
  } else {
    setElements(editor, {
      [nodeKey]: value
    }, {
      match: match,
      ...setNodesOptions
    });
  }
};

export { KEY_LINE_HEIGHT, createLineHeightPlugin, setLineHeight, useLineHeightDropdownMenu, useLineHeightDropdownMenuState };
//# sourceMappingURL=index.es.js.map
