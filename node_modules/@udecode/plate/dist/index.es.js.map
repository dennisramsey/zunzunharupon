{"version":3,"file":"index.es.js","sources":["../../emoji/dist/index.es.js"],"sourcesContent":["import { getPlugin, withoutNormalizing, focusEditor, insertText, withoutMergingHistory, deleteText, isCollapsed, getEditorString, getRange, getPointBefore, createPluginFactory, usePlateEditorRef, getPluginOptions, usePlateEditorState, useStableMemo } from '@udecode/plate-common';\nimport { comboboxActions } from '@udecode/plate-combobox';\nimport { createRef, useReducer, useRef, useCallback, useEffect } from 'react';\nimport emojiMartData from '@emoji-mart/data';\n\nconst EmojiCategory = {\n  Activity: 'activity',\n  Custom: 'custom',\n  Flags: 'flags',\n  Foods: 'foods',\n  Frequent: 'frequent',\n  Nature: 'nature',\n  Objects: 'objects',\n  People: 'people',\n  Places: 'places',\n  Symbols: 'symbols'\n};\n\nconst KEY_EMOJI = 'emoji';\nconst EMOJI_TRIGGER = ':';\nconst EMOJI_MAX_SEARCH_RESULT = 60;\nconst emojiTriggeringControllerOptions = {\n  trigger: EMOJI_TRIGGER,\n  limitTriggeringChars: 2\n};\nconst defaultCategories = [EmojiCategory.People, EmojiCategory.Nature, EmojiCategory.Foods, EmojiCategory.Activity, EmojiCategory.Places, EmojiCategory.Objects, EmojiCategory.Symbols, EmojiCategory.Flags];\nconst EmojiSettings = {\n  buttonSize: {\n    value: 36\n  },\n  perLine: {\n    value: 8\n  },\n  showFrequent: {\n    value: true,\n    limit: 16\n  },\n  categories: {\n    value: undefined\n  }\n};\nconst DEFAULT_FREQUENTLY_USED_EMOJI = {\n  '+1': 1,\n  grinning: 1,\n  kissing_heart: 1,\n  heart_eyes: 1,\n  pray: 1,\n  laughing: 1,\n  clap: 1,\n  joy: 1,\n  scream: 1,\n  rocket: 1,\n  see_no_evil: 1,\n  hugging_face: 1,\n  heart: 1\n};\nconst NUM_OF_CATEGORIES = Object.values(EmojiCategory).length;\nconst i18n = {\n  search: 'Search all emoji',\n  clear: 'Clear',\n  searchNoResultsTitle: 'Oh no!',\n  searchNoResultsSubtitle: 'That emoji couldnâ€™t be found',\n  pick: 'Pick an emoji...',\n  searchResult: 'Search Results',\n  categories: {\n    activity: 'Activity',\n    custom: 'Custom',\n    flags: 'Flags',\n    foods: 'Food & Drink',\n    frequent: 'Frequently used',\n    nature: 'Animals & Nature',\n    objects: 'Objects',\n    people: 'Smileys & People',\n    places: 'Travel & Places',\n    symbols: 'Symbols'\n  },\n  skins: {\n    choose: 'Choose default skin tone',\n    '1': 'Default',\n    '2': 'Light',\n    '3': 'Medium-Light',\n    '4': 'Medium',\n    '5': 'Medium-Dark',\n    '6': 'Dark'\n  }\n};\n\nconst setVisibleSections = (entries, visibleSections) => {\n  for (const entry of entries) {\n    const id = entry.target.dataset.id;\n    visibleSections.set(id, entry.isIntersecting);\n  }\n};\nconst getSectionInFocus = visibleSections => {\n  for (const [id, ratio] of visibleSections) {\n    if (ratio) {\n      return id;\n    }\n  }\n};\nconst observeCategories = ({\n  ancestorRef,\n  emojiLibrary,\n  setFocusedAndVisibleSections\n}) => {\n  const observerOptions = {\n    root: ancestorRef.current,\n    threshold: 0\n  };\n  const visibleSections = new Map();\n  const observer = new IntersectionObserver(entries => {\n    setVisibleSections(entries, visibleSections);\n    const focusedSectionId = getSectionInFocus(visibleSections);\n    focusedSectionId && setFocusedAndVisibleSections(visibleSections, focusedSectionId);\n  }, observerOptions);\n  for (const section of emojiLibrary.getGrid().sections()) {\n    if (section.root.current) observer.observe(section.root.current);\n  }\n  return observer;\n};\n\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nclass EmojiTriggeringController {\n  constructor(options = emojiTriggeringControllerOptions) {\n    this.options = options;\n    _defineProperty(this, \"_isTriggering\", false);\n    _defineProperty(this, \"_hasTriggeringMark\", false);\n    _defineProperty(this, \"text\", '');\n    _defineProperty(this, \"pos\", void 0);\n  }\n  get isTriggering() {\n    return this._isTriggering;\n  }\n  setIsTriggering(isTriggering) {\n    this._isTriggering = isTriggering;\n    return this;\n  }\n  get hasTriggeringMark() {\n    return this._hasTriggeringMark;\n  }\n  hasEnclosingTriggeringMark() {\n    return this.endsWithEnclosingMark(this.text);\n  }\n  setText(text) {\n    this._hasTriggeringMark = this.startsWithTriggeringMark(text);\n    this.setIsTriggering(this._hasTriggeringMark && text.length > this.options.limitTriggeringChars);\n    this.text = this.isTriggering ? text : '';\n    return this;\n  }\n  startsWithTriggeringMark(text) {\n    return new RegExp(`^${this.options.trigger}`).test(text);\n  }\n  endsWithEnclosingMark(text) {\n    return new RegExp(`${this.options.trigger}$`).test(text);\n  }\n  getText() {\n    return this.text.replaceAll(/(^:)|(:$)/g, '');\n  }\n  getTextSize() {\n    return this.text.length;\n  }\n  reset() {\n    this.text = '';\n    this.setIsTriggering(false);\n    this._hasTriggeringMark = false;\n    return this;\n  }\n}\n\nclass Grid {\n  constructor() {\n    _defineProperty(this, \"rowsCount\", 1);\n    _defineProperty(this, \"sectionsIds\", []);\n    _defineProperty(this, \"grid\", new Map());\n  }\n  addSection(sectionId, section, elements) {\n    section.setIndexRowStart(this.rowsCount).addElements(elements[sectionId]);\n    this.rowsCount += section.rowsNum;\n    this.grid.set(sectionId, section);\n    this.sectionsIds.push(sectionId);\n    return this;\n  }\n  get size() {\n    return this.grid.size;\n  }\n  indexOf(sectionId) {\n    return this.sectionsIds.indexOf(sectionId);\n  }\n  sections() {\n    return Array.from(this.grid.values());\n  }\n  section(sectionId) {\n    return this.grid.get(sectionId);\n  }\n  updateSection(sectionId, elements) {\n    if (this.grid.has(sectionId)) {\n      const section = this.grid.get(sectionId);\n      section.updateElements(elements);\n    }\n    return this;\n  }\n}\n\nclass AGridSection {\n  constructor(_id, perLine = 8) {\n    this._id = _id;\n    this.perLine = perLine;\n    _defineProperty(this, \"rows\", []);\n    _defineProperty(this, \"_root\", void 0);\n    _defineProperty(this, \"_rowsNum\", 0);\n    _defineProperty(this, \"_indexRowStart\", 0);\n    this.createRootRef();\n  }\n  setIndexRowStart(start) {\n    this._indexRowStart = start;\n    return this;\n  }\n  addElements(elements) {\n    this._rowsNum = Math.ceil(elements.length / this.perLine);\n    this.initRows(elements);\n    return this;\n  }\n  updateElements(elements) {\n    this.rows = [];\n    this.addElements(elements);\n    return this;\n  }\n  initRows(elements) {\n    let i = 0;\n    while (i < this.rowsNum) {\n      this.addRow(elements, i++);\n    }\n  }\n  addRow(elements, lastPosition) {\n    const start = lastPosition * this.perLine;\n    const end = start + this.perLine;\n    this.rows.push({\n      elements: elements.slice(start, end),\n      id: this._indexRowStart + lastPosition\n    });\n  }\n  get rowsNum() {\n    return this._rowsNum;\n  }\n  get id() {\n    return this._id;\n  }\n  get root() {\n    return this._root;\n  }\n  getRows() {\n    return this.rows;\n  }\n}\n\nclass EmojiFloatingGrid extends Grid {\n  createRootRef() {\n    return /*#__PURE__*/createRef();\n  }\n}\nclass EmojiGridSectionWithRoot extends AGridSection {\n  createRootRef() {\n    this._root = /*#__PURE__*/createRef();\n  }\n}\n\nclass EmojiFloatingGridBuilder {\n  constructor(localStorage, sections, elements, settings) {\n    this.localStorage = localStorage;\n    this.sections = sections;\n    this.elements = elements;\n    this.settings = settings;\n    _defineProperty(this, \"grid\", new EmojiFloatingGrid());\n  }\n  addFrequent() {\n    if (this.settings.showFrequent.value) {\n      const id = 'frequent';\n      this.grid.addSection(id, new EmojiGridSectionWithRoot(id, this.settings.perLine.value), {\n        [id]: this.localStorage.getList()\n      });\n    }\n  }\n  build() {\n    this.addFrequent();\n    this.sections.forEach(id => {\n      this.grid.addSection(id, new EmojiGridSectionWithRoot(id, this.settings.perLine.value), this.elements);\n    });\n    return this.grid;\n  }\n}\n\nclass EmojiInlineLibrary {\n  constructor(library = emojiMartData) {\n    _defineProperty(this, \"_hash\", {});\n    _defineProperty(this, \"_keys\", []);\n    _defineProperty(this, \"_emojis\", void 0);\n    this._emojis = library.emojis;\n    this.init();\n  }\n  init() {\n    Object.values(this._emojis).forEach(emoji => {\n      const searchableString = this.createSearchableString(emoji);\n      this._keys.push(searchableString);\n      this._hash[searchableString] = emoji.id;\n    });\n  }\n  createSearchableString(emoji) {\n    const {\n      id,\n      name,\n      keywords\n    } = emoji;\n    return `${id},${this.getName(name)},${keywords.join(',')}`;\n  }\n  getName(name) {\n    return name.toLowerCase().split(' ').join(',');\n  }\n  get keys() {\n    return this._keys;\n  }\n  getEmoji(id) {\n    return this._emojis[id];\n  }\n  getEmojiId(key) {\n    return this._hash[key];\n  }\n}\n\nclass EmojiFloatingLibrary extends EmojiInlineLibrary {\n  constructor(settings, localStorage, library = emojiMartData) {\n    var _settings$categories$;\n    super(library);\n    this.settings = settings;\n    this.localStorage = localStorage;\n    this.library = library;\n    _defineProperty(this, \"categories\", defaultCategories);\n    _defineProperty(this, \"emojis\", {});\n    _defineProperty(this, \"grid\", void 0);\n    this.categories = (_settings$categories$ = settings.categories.value) !== null && _settings$categories$ !== void 0 ? _settings$categories$ : this.categories;\n    this.initEmojis(library.categories);\n    this.grid = new EmojiFloatingGridBuilder(this.localStorage, this.categories, this.emojis, settings).build();\n  }\n  static getInstance(settings, localStorage, library = emojiMartData) {\n    if (!EmojiFloatingLibrary.instance) {\n      EmojiFloatingLibrary.instance = new EmojiFloatingLibrary(settings, localStorage, library);\n    }\n    return EmojiFloatingLibrary.instance;\n  }\n  initEmojis(categoriesLibrary) {\n    for (const category of categoriesLibrary) {\n      this.emojis[category.id] = category.emojis;\n    }\n  }\n  updateFrequentCategory(emojiId) {\n    this.localStorage.update(emojiId);\n    this.grid.updateSection(EmojiCategory.Frequent, this.localStorage.getList());\n  }\n  getGrid() {\n    return this.grid;\n  }\n  indexOf(focusedCategory) {\n    const index = this.grid.indexOf(focusedCategory);\n    return index < 1 ? 0 : index;\n  }\n}\n_defineProperty(EmojiFloatingLibrary, \"instance\", void 0);\n\nconst initialState = {\n  isOpen: false,\n  searchValue: '',\n  emoji: undefined,\n  hasFound: false,\n  isSearching: false,\n  searchResult: [],\n  focusedCategory: undefined,\n  visibleCategories: new Map(),\n  frequentEmoji: undefined\n};\nconst EmojiPickerState = () => {\n  const [cache, dispatch] = useReducer((state, action) => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      case 'CLEAR_SEARCH':\n        {\n          return {\n            ...state,\n            searchValue: '',\n            isSearching: false,\n            hasFound: false,\n            focusedCategory: EmojiCategory.Frequent\n          };\n        }\n      case 'UPDATE_SEARCH_RESULT':\n        {\n          return {\n            ...state,\n            ...payload,\n            isSearching: true,\n            focusedCategory: undefined\n          };\n        }\n      case 'SET_FOCUSED_CATEGORY':\n        {\n          return {\n            ...state,\n            ...payload,\n            searchValue: '',\n            isSearching: false,\n            hasFound: false\n          };\n        }\n      case 'SET_OPEN':\n        {\n          return {\n            ...state,\n            isOpen: true\n          };\n        }\n      case 'SET_CLOSE':\n        {\n          return {\n            ...state,\n            emoji: undefined,\n            isOpen: false\n          };\n        }\n      case 'UPDATE_FREQUENT_EMOJIS':\n        {\n          return {\n            ...state,\n            ...payload,\n            emoji: undefined\n          };\n        }\n      case 'SET_SEARCH':\n      case 'SET_EMOJI':\n      case 'SET_FOCUSED_AND_VISIBLE_CATEGORIES':\n        {\n          return {\n            ...state,\n            ...payload\n          };\n        }\n      default:\n        {\n          throw new Error(`Unhandled action type: ${type}`);\n        }\n    }\n  }, initialState);\n  return [cache, dispatch];\n};\n\nconst getEmojiOnInsert = ({\n  key = KEY_EMOJI\n} = {}) => (editor, item) => {\n  const {\n    options: {\n      createEmoji\n    }\n  } = getPlugin(editor, key);\n  withoutNormalizing(editor, () => {\n    focusEditor(editor);\n    const value = createEmoji(item);\n    insertText(editor, value);\n  });\n};\n\nconst useEmojiPicker = ({\n  editor,\n  emojiLibrary,\n  indexSearch,\n  closeOnSelect\n}) => {\n  const [state, dispatch] = EmojiPickerState();\n  const refs = useRef({\n    contentRoot: /*#__PURE__*/createRef(),\n    content: /*#__PURE__*/createRef()\n  });\n  const setIsOpen = useCallback(isOpen => {\n    dispatch({\n      type: isOpen ? 'SET_OPEN' : 'SET_CLOSE'\n    });\n  }, [dispatch]);\n  const setFocusedAndVisibleSections = useCallback((visibleSections, categoryId) => {\n    dispatch({\n      type: 'SET_FOCUSED_AND_VISIBLE_CATEGORIES',\n      payload: {\n        focusedCategory: categoryId,\n        visibleCategories: visibleSections\n      }\n    });\n  }, [dispatch]);\n  const handleSearchInput = useCallback(input => {\n    const value = String(input).replaceAll(/\\s/g, '');\n    if (!value && !input) {\n      dispatch({\n        type: 'CLEAR_SEARCH'\n      });\n      return;\n    }\n    const hasFound = indexSearch.search(value).hasFound();\n    dispatch({\n      type: 'UPDATE_SEARCH_RESULT',\n      payload: {\n        searchValue: value,\n        hasFound,\n        searchResult: indexSearch.get()\n      }\n    });\n  }, [dispatch, indexSearch]);\n  const setSearch = useCallback(value => {\n    value ? handleSearchInput(value) : dispatch({\n      type: 'CLEAR_SEARCH'\n    });\n  }, [dispatch, handleSearchInput]);\n  const clearSearch = useCallback(() => {\n    dispatch({\n      type: 'CLEAR_SEARCH'\n    });\n  }, [dispatch]);\n  const onMouseOver = useCallback(emoji => {\n    dispatch({\n      type: 'SET_EMOJI',\n      payload: {\n        emoji\n      }\n    });\n  }, [dispatch]);\n  const updateFrequentEmojis = useCallback(emojiId => {\n    emojiLibrary.updateFrequentCategory(emojiId);\n    dispatch({\n      type: 'UPDATE_FREQUENT_EMOJIS',\n      payload: {\n        frequentEmoji: emojiId,\n        isOpen: closeOnSelect ? false : state.isOpen\n      }\n    });\n  }, [closeOnSelect, dispatch, emojiLibrary, state.isOpen]);\n  const onSelectEmoji = useCallback(emoji => {\n    const selectItem = getEmojiOnInsert();\n    selectItem(editor, {\n      key: emoji.id,\n      text: emoji.name,\n      data: {\n        id: emoji.id,\n        emoji: emoji.skins[0].native,\n        name: emoji.name,\n        text: emoji.name\n      }\n    });\n    updateFrequentEmojis(emoji.id);\n  }, [editor, updateFrequentEmojis]);\n  const handleCategoryClick = useCallback(categoryId => {\n    dispatch({\n      type: 'SET_FOCUSED_CATEGORY',\n      payload: {\n        focusedCategory: categoryId\n      }\n    });\n    const getSectionPositionToScrollIntoView = () => {\n      var _refs$current$content, _refs$current$content2, _refs$current$content3, _refs$current$content4, _section$root$current, _section$root$current2;\n      const trashHold = 1;\n      const section = emojiLibrary.getGrid().section(categoryId);\n      const contentRootScrollTop = (_refs$current$content = (_refs$current$content2 = refs.current.contentRoot.current) === null || _refs$current$content2 === void 0 ? void 0 : _refs$current$content2.scrollTop) !== null && _refs$current$content !== void 0 ? _refs$current$content : 0;\n      const contentRootTopPosition = (_refs$current$content3 = (_refs$current$content4 = refs.current.contentRoot.current) === null || _refs$current$content4 === void 0 ? void 0 : _refs$current$content4.getBoundingClientRect().top) !== null && _refs$current$content3 !== void 0 ? _refs$current$content3 : 0;\n      const sectionTopPosition = (_section$root$current = section === null || section === void 0 ? void 0 : (_section$root$current2 = section.root.current) === null || _section$root$current2 === void 0 ? void 0 : _section$root$current2.getBoundingClientRect().top) !== null && _section$root$current !== void 0 ? _section$root$current : 0;\n      return trashHold + contentRootScrollTop + sectionTopPosition - contentRootTopPosition;\n    };\n    if (refs.current.contentRoot.current) {\n      refs.current.contentRoot.current.scrollTop = getSectionPositionToScrollIntoView();\n    }\n  }, [dispatch, emojiLibrary]);\n  useEffect(() => {\n    if (state.isOpen && !state.isSearching) {\n      // Timeout to allow the category element refs to populate\n      setTimeout(() => {\n        observeCategories({\n          ancestorRef: refs.current.contentRoot,\n          emojiLibrary,\n          setFocusedAndVisibleSections\n        });\n      }, 0);\n    }\n  }, [emojiLibrary, state.isOpen, state.isSearching, setFocusedAndVisibleSections]);\n  return {\n    setIsOpen,\n    i18n,\n    setSearch,\n    clearSearch,\n    emoji: state.emoji,\n    onMouseOver,\n    onSelectEmoji,\n    emojiLibrary,\n    handleCategoryClick,\n    refs,\n    ...state\n  };\n};\n\nclass AIndexSearch {\n  constructor(library) {\n    this.library = library;\n    _defineProperty(this, \"result\", []);\n    _defineProperty(this, \"scores\", {});\n    _defineProperty(this, \"maxResult\", EMOJI_MAX_SEARCH_RESULT);\n    _defineProperty(this, \"input\", void 0);\n  }\n  search(input) {\n    this.input = input.toLowerCase();\n    const value = this.input;\n    if (value) {\n      this.createSearchResult(value);\n      this.sortResultByScores(this.result, this.scores);\n    } else {\n      this.scores = {};\n      this.result = [];\n    }\n    return this;\n  }\n  createSearchResult(value) {\n    this.scores = {};\n    this.result = [];\n    for (const key of this.library.keys) {\n      const score = key.indexOf(`${value}`);\n      if (score === -1) continue;\n      const emojiId = this.library.getEmojiId(key);\n      this.result.push(emojiId);\n      this.scores[emojiId] || (this.scores[emojiId] = 0);\n      this.scores[emojiId] += emojiId === value ? 0 : score + 1;\n    }\n  }\n  sortResultByScores(result, scores) {\n    result.sort((a, b) => {\n      const aScore = scores[a];\n      const bScore = scores[b];\n      if (aScore === bScore) {\n        return a.localeCompare(b);\n      }\n      return aScore - bScore;\n    });\n  }\n  hasFound(exact = false) {\n    if (exact && this.input) {\n      return this.result.includes(this.input);\n    }\n    return this.result.length > 0;\n  }\n  get() {\n    const emojis = [];\n    for (const key of this.result) {\n      var _this$library;\n      const emoji = (_this$library = this.library) === null || _this$library === void 0 ? void 0 : _this$library.getEmoji(key);\n      emojis.push(this.transform(emoji));\n      if (emojis.length >= this.maxResult) break;\n    }\n    return emojis;\n  }\n  getEmoji() {\n    return this.get()[0];\n  }\n}\n\nclass EmojiFloatingIndexSearch extends AIndexSearch {\n  constructor(library) {\n    super(library);\n    this.library = library;\n  }\n  static getInstance(library) {\n    if (!EmojiFloatingIndexSearch.instance) {\n      EmojiFloatingIndexSearch.instance = new EmojiFloatingIndexSearch(library);\n    }\n    return EmojiFloatingIndexSearch.instance;\n  }\n  transform(emoji) {\n    return emoji;\n  }\n}\n_defineProperty(EmojiFloatingIndexSearch, \"instance\", void 0);\n\nclass EmojiInlineIndexSearch extends AIndexSearch {\n  constructor(library) {\n    super(library);\n    this.library = library;\n  }\n  static getInstance() {\n    if (!EmojiInlineIndexSearch.instance) {\n      EmojiInlineIndexSearch.instance = new EmojiInlineIndexSearch(new EmojiInlineLibrary());\n    }\n    return EmojiInlineIndexSearch.instance;\n  }\n  transform(emoji) {\n    const {\n      id,\n      name,\n      skins\n    } = emoji;\n    return {\n      key: id,\n      text: name,\n      data: {\n        id,\n        emoji: skins[0].native,\n        name,\n        text: name\n      }\n    };\n  }\n}\n_defineProperty(EmojiInlineIndexSearch, \"instance\", void 0);\n\nconst getEmojiOnSelectItem = ({\n  key = KEY_EMOJI\n} = {}) => (editor, item) => {\n  const {\n    options: {\n      createEmoji,\n      emojiTriggeringController\n    }\n  } = getPlugin(editor, key);\n  withoutNormalizing(editor, () => {\n    withoutMergingHistory(editor, () => deleteText(editor, {\n      distance: emojiTriggeringController.setIsTriggering(false).getTextSize(),\n      reverse: true\n    }));\n    const value = createEmoji(item);\n    insertText(editor, value);\n  });\n  return comboboxActions.reset();\n};\n\nconst isSpaceBreak = char => !!char && /\\s/.test(char);\nconst getPreviousChar = (editor, point) => point ? getEditorString(editor, getRange(editor, point, getPointBefore(editor, point))) : undefined;\nconst getPreviousPoint = (editor, point) => point ? getPointBefore(editor, point) : undefined;\nconst isBeginningOfTheLine = (editor, point) => {\n  const previousPoint = getPreviousPoint(editor, point);\n  return (point === null || point === void 0 ? void 0 : point.path[0]) !== (previousPoint === null || previousPoint === void 0 ? void 0 : previousPoint.path[0]);\n};\nconst getFindTriggeringInput = (editor, emojiTriggeringController) => ({\n  char = '',\n  action = 'insert'\n} = {}) => {\n  const {\n    selection\n  } = editor;\n  if (!selection || !isCollapsed(selection) || isSpaceBreak(char)) {\n    emojiTriggeringController.setIsTriggering(false);\n    return;\n  }\n  const startPoint = selection.anchor;\n  let currentPoint = startPoint;\n  let previousPoint;\n  let foundText = char;\n  let previousChar;\n  do {\n    previousChar = getPreviousChar(editor, currentPoint);\n    foundText = previousChar + foundText;\n    previousPoint = getPreviousPoint(editor, currentPoint);\n    if (isBeginningOfTheLine(editor, currentPoint)) {\n      break;\n    }\n    currentPoint = previousPoint;\n  } while (!isSpaceBreak(previousChar));\n  foundText = foundText.trim();\n  if (action === 'delete') foundText = foundText.slice(0, -1);\n  emojiTriggeringController.setText(foundText);\n};\n\nconst withEmoji = (editor, {\n  options: {\n    id,\n    emojiTriggeringController\n  }\n}) => {\n  const emojiInlineIndexSearch = EmojiInlineIndexSearch.getInstance();\n  const findTheTriggeringInput = getFindTriggeringInput(editor, emojiTriggeringController);\n  const {\n    apply,\n    insertText,\n    deleteBackward,\n    deleteForward\n  } = editor;\n  editor.insertText = char => {\n    const {\n      selection\n    } = editor;\n    if (!isCollapsed(selection)) {\n      return insertText(char);\n    }\n    findTheTriggeringInput({\n      char\n    });\n    return insertText(char);\n  };\n  editor.deleteBackward = unit => {\n    findTheTriggeringInput({\n      action: 'delete'\n    });\n    return deleteBackward(unit);\n  };\n  editor.deleteForward = unit => {\n    findTheTriggeringInput();\n    return deleteForward(unit);\n  };\n  editor.apply = operation => {\n    apply(operation);\n    if (!(emojiTriggeringController !== null && emojiTriggeringController !== void 0 && emojiTriggeringController.hasTriggeringMark)) {\n      return;\n    }\n    const searchText = emojiTriggeringController.getText();\n    switch (operation.type) {\n      case 'set_selection':\n        {\n          emojiTriggeringController.reset();\n          comboboxActions.reset();\n          break;\n        }\n      case 'insert_text':\n        {\n          if (emojiTriggeringController.hasEnclosingTriggeringMark() && emojiInlineIndexSearch.search(searchText).hasFound(true)) {\n            const item = emojiInlineIndexSearch.getEmoji();\n            item && getEmojiOnSelectItem()(editor, item);\n            break;\n          }\n          if (!emojiTriggeringController.hasEnclosingTriggeringMark() && emojiTriggeringController.isTriggering && emojiInlineIndexSearch.search(searchText).hasFound()) {\n            comboboxActions.items(emojiInlineIndexSearch.search(searchText).get());\n            comboboxActions.open({\n              activeId: id,\n              text: '',\n              targetRange: editor.selection\n            });\n            break;\n          }\n          emojiTriggeringController.reset();\n          comboboxActions.reset();\n          break;\n        }\n      case 'remove_text':\n        {\n          if (emojiTriggeringController.isTriggering && emojiInlineIndexSearch.search(searchText).hasFound()) {\n            comboboxActions.items(emojiInlineIndexSearch.search(searchText).get());\n            comboboxActions.open({\n              activeId: id,\n              text: '',\n              targetRange: editor.selection\n            });\n            break;\n          }\n          emojiTriggeringController.reset();\n          comboboxActions.reset();\n          break;\n        }\n    }\n  };\n  return editor;\n};\n\nconst createEmojiPlugin = createPluginFactory({\n  key: KEY_EMOJI,\n  withOverrides: withEmoji,\n  options: {\n    trigger: EMOJI_TRIGGER,\n    createEmoji: item => item.data.emoji,\n    emojiTriggeringController: new EmojiTriggeringController()\n  },\n  then: (_, {\n    key,\n    options: {\n      trigger,\n      createEmoji,\n      emojiTriggeringController\n    }\n  }) => ({\n    options: {\n      id: key,\n      trigger,\n      createEmoji,\n      emojiTriggeringController\n    }\n  })\n});\n\nconst useEmojiComboboxState = ({\n  pluginKey\n}) => {\n  const editor = usePlateEditorRef();\n  const {\n    trigger\n  } = getPluginOptions(editor, pluginKey);\n  const onSelectItem = getEmojiOnSelectItem({\n    key: pluginKey\n  });\n  return {\n    trigger: trigger,\n    onSelectItem\n  };\n};\n\nfunction useEmojiDropdownMenuState({\n  settings = EmojiSettings,\n  closeOnSelect = true\n} = {}) {\n  const editor = usePlateEditorState();\n  const [emojiLibrary, indexSearch] = useStableMemo(() => {\n    const frequentEmojiStorage = new FrequentEmojiStorage({\n      limit: settings.showFrequent.limit\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    const emojiLibrary = EmojiFloatingLibrary.getInstance(settings, frequentEmojiStorage);\n\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    const indexSearch = EmojiFloatingIndexSearch.getInstance(emojiLibrary);\n    return [emojiLibrary, indexSearch];\n  }, [settings]);\n  const {\n    isOpen,\n    setIsOpen,\n    ...emojiPickerState\n  } = useEmojiPicker({\n    closeOnSelect,\n    editor,\n    emojiLibrary,\n    indexSearch\n  });\n  return {\n    isOpen,\n    setIsOpen,\n    emojiPickerState\n  };\n}\n\nclass LocalStorage {\n  constructor(key, defaultValue) {\n    this.key = key;\n    this.defaultValue = defaultValue;\n  }\n  set(value) {\n    window.localStorage.setItem(this.key, JSON.stringify(value));\n  }\n  get() {\n    let value = this.defaultValue;\n    if (typeof window === 'undefined') return value;\n    const valueInLocalStorage = window.localStorage.getItem(this.key);\n    if (valueInLocalStorage) {\n      try {\n        value = JSON.parse(valueInLocalStorage);\n      } catch {\n        window.localStorage.removeItem(this.key);\n      }\n    }\n    return value;\n  }\n}\n\nclass FrequentEmojiStorage {\n  constructor(props, defaultValue = DEFAULT_FREQUENTLY_USED_EMOJI) {\n    var _props$limit, _props$prefix, _props$key;\n    this.defaultValue = defaultValue;\n    _defineProperty(this, \"limit\", 8);\n    _defineProperty(this, \"prefix\", 'emoji');\n    _defineProperty(this, \"key\", EmojiCategory.Frequent);\n    _defineProperty(this, \"localStorage\", void 0);\n    this.limit = (_props$limit = props.limit) !== null && _props$limit !== void 0 ? _props$limit : this.limit;\n    const key = `${(_props$prefix = props.prefix) !== null && _props$prefix !== void 0 ? _props$prefix : this.prefix}:${(_props$key = props.key) !== null && _props$key !== void 0 ? _props$key : this.key}`;\n    this.localStorage = new LocalStorage(key, defaultValue);\n  }\n  update(emojiId) {\n    const prevEmojis = this.localStorage.get();\n    const count = prevEmojis[emojiId] ? prevEmojis[emojiId] + 1 : 1;\n    const emojis = {\n      ...prevEmojis,\n      [emojiId]: count\n    };\n    this.localStorage.set(emojis);\n    return emojis;\n  }\n  get() {\n    const data = this.localStorage.get();\n    return Object.fromEntries(Object.keys(data).sort((a, b) => data[b] - data[a]).map(key => [key, data[key]]));\n  }\n  getList() {\n    return Object.keys(this.get()).splice(0, this.limit);\n  }\n  set(value) {\n    this.localStorage.set(value);\n  }\n}\n\nexport { AGridSection, AIndexSearch, DEFAULT_FREQUENTLY_USED_EMOJI, EMOJI_MAX_SEARCH_RESULT, EMOJI_TRIGGER, EmojiCategory, EmojiFloatingGrid, EmojiFloatingGridBuilder, EmojiFloatingIndexSearch, EmojiFloatingLibrary, EmojiGridSectionWithRoot, EmojiInlineIndexSearch, EmojiInlineLibrary, EmojiPickerState, EmojiSettings, EmojiTriggeringController, FrequentEmojiStorage, Grid, KEY_EMOJI, LocalStorage, NUM_OF_CATEGORIES, createEmojiPlugin, defaultCategories, emojiTriggeringControllerOptions, getEmojiOnInsert, getEmojiOnSelectItem, getFindTriggeringInput, i18n, observeCategories, useEmojiComboboxState, useEmojiDropdownMenuState, useEmojiPicker, withEmoji };\n//# sourceMappingURL=index.es.js.map\n"],"names":["EmojiCategory","Activity","Custom","Flags","Foods","Frequent","Nature","Objects","People","Places","Symbols"],"mappingsaAAa,GAAG;AAC3BC,EAAAA,QAAQ,EAAE,UAAU;AACpBC,EAAAA,MAAM,EAAE,QAAQ;AAChBC,EAAAA,KAAK,EAAE,OAAO;AACdC,EAAAA,KAAK,EAAE,OAAO;AACdC,EAAAA,QAAQ,EAAE,UAAU;AACpBC,EAAAA,MAAM,EAAE,QAAQ;AAChBC,EAAAA,OAAO,EAAE,SAAS;AAClBC,EAAAA,MAAM,EAAE,QAAQ;AAChBC,EAAAA,MAAM,EAAE,QAAQ;AACh}