{"version":3,"file":"index.es.js","sources":["../../../node_modules/clsx/dist/clsx.m.js","../src/types.ts","../src/injectIndentListComponent.tsx","../../../node_modules/is-hotkey/lib/index.js","../src/transforms/indentList.ts","../src/transforms/outdentList.ts","../src/transforms/setIndentListNode.ts","../src/transforms/setIndentListNodes.ts","../src/queries/getSiblingIndentList.ts","../src/queries/getNextIndentList.ts","../src/queries/getPreviousIndentList.ts","../src/queries/getIndentListSiblings.ts","../src/transforms/setIndentListSiblingNodes.ts","../src/queries/areEqListStyleType.ts","../src/transforms/toggleIndentListSet.ts","../src/transforms/toggleIndentListUnset.ts","../src/transforms/toggleIndentList.ts","../src/onKeyDownIndentList.ts","../src/normalizers/normalizeIndentListNotIndented.ts","../src/normalizers/normalizeFirstIndentListStart.ts","../src/normalizers/normalizeIndentListStart.ts","../src/normalizeIndentList.ts","../src/withIndentList.ts","../src/createIndentListPlugin.ts","../src/hooks/someIndentList.ts","../src/hooks/useIndentListToolbarButton.ts","../src/queries/getSiblingListStyleType.ts"],"sourcesContent":["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","export enum ListStyleType {\n  // The marker is traditional Armenian numbering\n  Armenian = 'armenian',\n\n  // The marker is a circle\n  Circle = 'circle',\n\n  // The marker is plain ideographic numbers\n  CjkIdeographic = 'cjk-ideographic',\n\n  // The marker is a number. This is default for <ol>\n  Decimal = 'decimal',\n\n  // The marker is a number with leading zeros (01, 02, 03, etc.)\n  DecimalLeadingZero = 'decimal-leading-zero',\n\n  // The marker is a filled circle. This is default for <ul>\n  Disc = 'disc',\n\n  // The marker is traditional Georgian numbering\n  Georgian = 'georgian',\n\n  // The marker is traditional Hebrew numbering\n  Hebrew = 'hebrew',\n\n  // The marker is traditional Hiragana numbering\n  Hiragana = 'hiragana',\n\n  // The marker is traditional Hiragana iroha numbering\n  HiraganaIroha = 'hiragana-iroha',\n\n  // The marker is traditional Katakana numbering\n  Katakana = 'katakana',\n\n  // The marker is traditional Katakana iroha numbering\n  KatakanaIroha = 'katakana-iroha',\n\n  // The marker is lower-alpha (a, b, c, d, e, etc.)\n  LowerAlpha = 'lower-alpha',\n\n  // The marker is lower-greek\n  LowerGreek = 'lower-greek',\n\n  // The marker is lower-latin (a, b, c, d, e, etc.)\n  LowerLatin = 'lower-latin',\n\n  // The marker is lower-roman (i, ii, iii, iv, v, etc.)\n  LowerRoman = 'lower-roman',\n\n  // No marker is shown\n  None = 'none',\n\n  // The marker is a square\n  Square = 'square',\n\n  // The marker is upper-alpha (A, B, C, D, E, etc.)\n  UpperAlpha = 'upper-alpha',\n\n  // The marker is upper-latin (A, B, C, D, E, etc.)\n  UpperLatin = 'upper-latin',\n\n  // The marker is upper-roman (I, II, III, IV, V, etc.)\n  UpperRoman = 'upper-roman',\n\n  // Sets this property to its default value. Read about initial\n  Initial = 'initial',\n\n  // Inherits this property from its parent element. Read about inherit\n  Inherit = 'inherit',\n}\n","import React, { CSSProperties } from 'react';\nimport {\n  InjectComponentProps,\n  InjectComponentReturnType,\n} from '@udecode/plate-common';\nimport clsx from 'clsx';\n\nimport { KEY_LIST_START, KEY_LIST_STYLE_TYPE } from './createIndentListPlugin';\nimport { ListStyleType } from './types';\n\nexport const injectIndentListComponent = (\n  props: InjectComponentProps\n): InjectComponentReturnType => {\n  const { element } = props;\n\n  const listStyleType = element[KEY_LIST_STYLE_TYPE] as string;\n  const listStart = element[KEY_LIST_START] as number;\n\n  if (listStyleType) {\n    let className = clsx(`slate-${KEY_LIST_STYLE_TYPE}-${listStyleType}`);\n    const style: CSSProperties = {\n      padding: 0,\n      margin: 0,\n      listStyleType,\n    };\n\n    if (\n      [ListStyleType.Disc, ListStyleType.Circle, ListStyleType.Square].includes(\n        listStyleType as ListStyleType\n      )\n    ) {\n      className = clsx(className, 'slate-list-bullet');\n\n      return function Ul({ children }) {\n        return (\n          <ul style={style} className={className}>\n            <li>{children}</li>\n          </ul>\n        );\n      };\n    }\n\n    className = clsx(className, 'slate-list-number');\n\n    return function Ol({ children }) {\n      return (\n        <ol style={style} className={className} start={listStart}>\n          <li>{children}</li>\n        </ol>\n      );\n    };\n  }\n};\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n/**\n * Constants.\n */\n\n// We make this a function so it can be tested in describe block mocks with Jest.\nvar IS_MAC = () => typeof window != 'undefined' && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);\n\nvar MODIFIERS = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey'\n};\n\n// We make this a function so it can be tested in describe block mocks with Jest.\nvar ALIASES = () => ({\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC() ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta'\n});\n\nvar CODES = {\n  backspace: 8,\n  tab: 9,\n  enter: 13,\n  shift: 16,\n  control: 17,\n  alt: 18,\n  pause: 19,\n  capslock: 20,\n  escape: 27,\n  ' ': 32,\n  pageup: 33,\n  pagedown: 34,\n  end: 35,\n  home: 36,\n  arrowleft: 37,\n  arrowup: 38,\n  arrowright: 39,\n  arrowdown: 40,\n  insert: 45,\n  delete: 46,\n  meta: 91,\n  numlock: 144,\n  scrolllock: 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  '\\'': 222\n};\n\nfor (var f = 1; f < 20; f++) {\n  CODES['f' + f] = 111 + f;\n}\n\n/**\n * Is hotkey?\n */\n\nfunction isHotkey(hotkey, options, event) {\n  if (options && !('byKey' in options)) {\n    event = options;\n    options = null;\n  }\n\n  if (!Array.isArray(hotkey)) {\n    hotkey = [hotkey];\n  }\n\n  var array = hotkey.map(function (string) {\n    return parseHotkey(string, options);\n  });\n  var check = function check(e) {\n    return array.some(function (object) {\n      return compareHotkey(object, e);\n    });\n  };\n  var ret = event == null ? check : check(event);\n  return ret;\n}\n\nfunction isCodeHotkey(hotkey, event) {\n  return isHotkey(hotkey, event);\n}\n\nfunction isKeyHotkey(hotkey, event) {\n  return isHotkey(hotkey, { byKey: true }, event);\n}\n\n/**\n * Parse.\n */\n\nfunction parseHotkey(hotkey, options) {\n  var byKey = options && options.byKey;\n  var ret = {};\n\n  // Special case to handle the `+` key since we use it as a separator.\n  hotkey = hotkey.replace('++', '+add');\n  var values = hotkey.split('+');\n  var length = values.length;\n\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n\n  for (var k in MODIFIERS) {\n    ret[MODIFIERS[k]] = false;\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var value = _step.value;\n\n      var optional = value.endsWith('?') && value.length > 1;\n\n      if (optional) {\n        value = value.slice(0, -1);\n      }\n\n      var name = toKeyName(value);\n      var modifier = MODIFIERS[name];\n\n      if (length === 1 || !modifier) {\n        if (byKey) {\n          ret.key = name;\n        } else {\n          ret.which = toKeyCode(value);\n        }\n      }\n\n      if (modifier) {\n        ret[modifier] = optional ? null : true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return ret;\n}\n\n/**\n * Compare.\n */\n\nfunction compareHotkey(object, event) {\n  for (var key in object) {\n    var expected = object[key];\n    var actual = void 0;\n\n    if (expected == null) {\n      continue;\n    }\n\n    if (key === 'key' && event.key != null) {\n      actual = event.key.toLowerCase();\n    } else if (key === 'which') {\n      actual = expected === 91 && event.which === 93 ? 91 : event.which;\n    } else {\n      actual = event[key];\n    }\n\n    if (actual == null && expected === false) {\n      continue;\n    }\n\n    if (actual !== expected) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Utils.\n */\n\nfunction toKeyCode(name) {\n  name = toKeyName(name);\n  var code = CODES[name] || name.toUpperCase().charCodeAt(0);\n  return code;\n}\n\nfunction toKeyName(name) {\n  name = name.toLowerCase();\n  name = ALIASES()[name] || name;\n  return name;\n}\n\n/**\n * Export.\n */\n\nexports.default = isHotkey;\nexports.isHotkey = isHotkey;\nexports.isCodeHotkey = isCodeHotkey;\nexports.isKeyHotkey = isKeyHotkey;\nexports.parseHotkey = parseHotkey;\nexports.compareHotkey = compareHotkey;\nexports.toKeyCode = toKeyCode;\nexports.toKeyName = toKeyName;","import { PlateEditor, Value } from '@udecode/plate-common';\nimport { setIndent, SetIndentOptions } from '@udecode/plate-indent';\n\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\n\nexport interface IndentListOptions<V extends Value = Value>\n  extends SetIndentOptions<V> {\n  listStyleType?: ListStyleType | string;\n}\n\n/**\n * Increase the indentation of the selected blocks.\n */\nexport const indentList = <V extends Value>(\n  editor: PlateEditor<V>,\n  { listStyleType = ListStyleType.Disc, ...options }: IndentListOptions<V> = {}\n) => {\n  setIndent(editor, {\n    offset: 1,\n    setNodesProps: () => ({\n      [KEY_LIST_STYLE_TYPE]: listStyleType,\n    }),\n    ...options,\n  });\n};\n","import { PlateEditor, Value } from '@udecode/plate-common';\nimport { setIndent } from '@udecode/plate-indent';\n\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { IndentListOptions } from './indentList';\n\n/**\n * Decrease the indentation of the selected blocks.\n */\nexport const outdentList = <V extends Value>(\n  editor: PlateEditor<V>,\n  options: IndentListOptions<V> = {}\n) => {\n  setIndent(editor, {\n    offset: -1,\n    unsetNodesProps: [KEY_LIST_STYLE_TYPE],\n    ...options,\n  });\n};\n","import { setElements, TEditor, Value } from '@udecode/plate-common';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport { Path } from 'slate';\n\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\n\nexport const setIndentListNode = <V extends Value>(\n  editor: TEditor<V>,\n  {\n    listStyleType = ListStyleType.Disc,\n    indent = 0,\n    at,\n  }: {\n    listStyleType?: string;\n    indent?: number;\n    at: Path;\n  }\n) => {\n  const newIndent = indent || indent + 1;\n\n  setElements(\n    editor,\n    { [KEY_LIST_STYLE_TYPE]: listStyleType, [KEY_INDENT]: newIndent },\n    { at }\n  );\n};\n","import {\n  TEditor,\n  TNodeEntry,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\nimport { KEY_INDENT } from '@udecode/plate-indent';\n\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\nimport { setIndentListNode } from './setIndentListNode';\n\n/**\n * Set indent list to the given entries.\n * Add indent if listStyleType was not defined.\n */\nexport const setIndentListNodes = <V extends Value>(\n  editor: TEditor<V>,\n  entries: TNodeEntry[],\n  {\n    listStyleType = ListStyleType.Disc,\n  }: {\n    listStyleType?: string;\n  }\n) => {\n  withoutNormalizing(editor, () => {\n    entries.forEach((entry) => {\n      const [node, path] = entry;\n\n      let indent = (node[KEY_INDENT] as number) ?? 0;\n      indent = node[KEY_LIST_STYLE_TYPE] ? indent : indent + 1;\n\n      setIndentListNode(editor, {\n        listStyleType,\n        indent,\n        at: path,\n      });\n    });\n  });\n};\n","import {\n  EElement,\n  EElementEntry,\n  EElementOrText,\n  isDefined,\n  TEditor,\n  TNode,\n  TNodeEntry,\n  Value,\n} from '@udecode/plate-common';\nimport { KEY_INDENT } from '@udecode/plate-indent';\n\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\n\nexport interface GetSiblingIndentListOptions<\n  N extends EElement<V>,\n  V extends Value = Value,\n> {\n  getPreviousEntry?: (\n    entry: TNodeEntry<EElementOrText<V>>\n  ) => TNodeEntry<N> | undefined;\n  getNextEntry?: (\n    entry: TNodeEntry<EElementOrText<V>>\n  ) => TNodeEntry<N> | undefined;\n  /**\n   * Query to validate lookup. If false, check the next sibling.\n   */\n  query?: (siblingNode: TNode) => boolean | undefined;\n  /**\n   * Query to break lookup\n   */\n  eqIndent?: boolean;\n  breakQuery?: (siblingNode: TNode) => boolean | undefined;\n  breakOnLowerIndent?: boolean;\n  breakOnEqIndentNeqListStyleType?: boolean;\n}\n\n/**\n * Get the next sibling indent list node.\n * Default query: the sibling node should have the same listStyleType.\n */\nexport const getSiblingIndentList = <\n  N extends EElement<V>,\n  V extends Value = Value,\n>(\n  editor: TEditor<V>,\n  [node, path]: EElementEntry<V>,\n  {\n    getPreviousEntry,\n    getNextEntry,\n    query,\n    eqIndent = true,\n    breakQuery,\n    breakOnLowerIndent = true,\n    breakOnEqIndentNeqListStyleType = true,\n  }: GetSiblingIndentListOptions<N, V>\n): TNodeEntry<N> | undefined => {\n  if (!getPreviousEntry && !getNextEntry) return;\n\n  const getSiblingEntry = getNextEntry ?? getPreviousEntry!;\n\n  let nextEntry = getSiblingEntry([node, path]);\n\n  while (true) {\n    if (!nextEntry) return;\n\n    const [nextNode, nextPath] = nextEntry;\n\n    const indent = (node as any)[KEY_INDENT] as number;\n    const nextIndent = (nextNode as any)[KEY_INDENT] as number;\n\n    if (!isDefined(nextIndent)) return;\n\n    if (breakQuery && breakQuery(nextNode)) return;\n\n    if (breakOnLowerIndent && nextIndent < indent) return;\n    if (\n      breakOnEqIndentNeqListStyleType &&\n      nextIndent === indent &&\n      (nextNode as any)[KEY_LIST_STYLE_TYPE] !==\n        (node as any)[KEY_LIST_STYLE_TYPE]\n    )\n      return;\n\n    let valid = !query || query(nextNode as TNode);\n    if (valid) {\n      valid = !eqIndent || nextIndent === indent;\n      if (valid) return [nextNode, nextPath];\n    }\n\n    nextEntry = getSiblingEntry(nextEntry);\n  }\n};\n","import {\n  EElement,\n  EElementEntry,\n  getNode,\n  TEditor,\n  TNodeEntry,\n  Value,\n} from '@udecode/plate-common';\nimport { Path } from 'slate';\n\nimport {\n  getSiblingIndentList,\n  GetSiblingIndentListOptions,\n} from './getSiblingIndentList';\n\n/**\n * Get the next indent list.\n */\nexport const getNextIndentList = <\n  N extends EElement<V>,\n  V extends Value = Value,\n>(\n  editor: TEditor<V>,\n  entry: EElementEntry<V>,\n  options?: Partial<GetSiblingIndentListOptions<N, V>>\n): TNodeEntry<N> | undefined => {\n  return getSiblingIndentList(editor, entry, {\n    getNextEntry: ([, currPath]) => {\n      const nextPath = Path.next(currPath);\n      const nextNode = getNode<N>(editor, nextPath);\n      if (!nextNode) return;\n\n      return [nextNode, nextPath];\n    },\n    ...options,\n    getPreviousEntry: undefined,\n  });\n};\n","import {\n  EElement,\n  EElementEntry,\n  getNode,\n  getPreviousPath,\n  TEditor,\n  TNodeEntry,\n  Value,\n} from '@udecode/plate-common';\n\nimport {\n  getSiblingIndentList,\n  GetSiblingIndentListOptions,\n} from './getSiblingIndentList';\n\n/**\n * Get the previous indent list node.\n */\nexport const getPreviousIndentList = <\n  N extends EElement<V>,\n  V extends Value = Value,\n>(\n  editor: TEditor<V>,\n  entry: EElementEntry<V>,\n  options?: Partial<GetSiblingIndentListOptions<N, V>>\n): TNodeEntry<N> | undefined => {\n  return getSiblingIndentList(editor, entry, {\n    getPreviousEntry: ([, currPath]) => {\n      const prevPath = getPreviousPath(currPath);\n      if (!prevPath) return;\n\n      const prevNode = getNode<N>(editor, prevPath);\n      if (!prevNode) return;\n\n      return [prevNode, prevPath];\n    },\n    ...options,\n    getNextEntry: undefined,\n  });\n};\n","import {\n  EElement,\n  EElementEntry,\n  TEditor,\n  TNodeEntry,\n  Value,\n} from '@udecode/plate-common';\n\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { getNextIndentList } from './getNextIndentList';\nimport { getPreviousIndentList } from './getPreviousIndentList';\nimport { GetSiblingIndentListOptions } from './getSiblingIndentList';\n\nexport interface GetIndentListSiblingsOptions<\n  N extends EElement<V>,\n  V extends Value = Value,\n> extends Partial<GetSiblingIndentListOptions<N, V>> {\n  previous?: boolean;\n  current?: boolean;\n  next?: boolean;\n}\n\nexport const getIndentListSiblings = <\n  N extends EElement<V>,\n  V extends Value = Value,\n>(\n  editor: TEditor<V>,\n  entry: EElementEntry<V>,\n  {\n    previous = true,\n    current = true,\n    next = true,\n    ...options\n  }: GetIndentListSiblingsOptions<N, V> = {}\n) => {\n  const siblings: TNodeEntry[] = [];\n\n  const [node] = entry;\n\n  if (!(node as any)[KEY_LIST_STYLE_TYPE]) return siblings;\n\n  let iterEntry = entry;\n\n  if (previous) {\n    while (true) {\n      const prevEntry = getPreviousIndentList<N, V>(editor, iterEntry, options);\n      if (!prevEntry) break;\n\n      siblings.push(prevEntry);\n\n      iterEntry = prevEntry;\n    }\n  }\n\n  if (current) {\n    siblings.push(entry);\n  }\n\n  if (next) {\n    iterEntry = entry;\n\n    while (true) {\n      const nextEntry = getNextIndentList(editor, iterEntry, options);\n      if (!nextEntry) break;\n\n      siblings.push(nextEntry);\n\n      iterEntry = nextEntry;\n    }\n  }\n\n  return siblings;\n};\n","import {\n  EElement,\n  EElementEntry,\n  TEditor,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\nimport { KEY_INDENT } from '@udecode/plate-indent';\n\nimport { getIndentListSiblings } from '../queries/getIndentListSiblings';\nimport { GetSiblingIndentListOptions } from '../queries/getSiblingIndentList';\nimport { ListStyleType } from '../types';\nimport { setIndentListNode } from './setIndentListNode';\n\n/**\n * Set indent list to entry + siblings.\n */\nexport const setIndentListSiblingNodes = <\n  N extends EElement<V>,\n  V extends Value = Value,\n>(\n  editor: TEditor<V>,\n  entry: EElementEntry<V>,\n  {\n    listStyleType = ListStyleType.Disc,\n    getSiblingIndentListOptions,\n  }: {\n    listStyleType?: string;\n    getSiblingIndentListOptions?: GetSiblingIndentListOptions<N, V>;\n  }\n) => {\n  withoutNormalizing(editor, () => {\n    const siblings = getIndentListSiblings(\n      editor,\n      entry,\n      getSiblingIndentListOptions\n    );\n\n    siblings.forEach(([node, path]) => {\n      setIndentListNode(editor, {\n        listStyleType,\n        indent: node[KEY_INDENT] as number,\n        at: path,\n      });\n    });\n  });\n};\n","import { TEditor, TNodeEntry, Value } from '@udecode/plate-common';\n\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\n\nexport const areEqListStyleType = <V extends Value>(\n  editor: TEditor<V>,\n  entries: TNodeEntry[],\n  {\n    listStyleType = ListStyleType.Disc,\n  }: {\n    listStyleType?: string;\n  }\n) => {\n  let eqListStyleType = true;\n\n  for (const entry of entries) {\n    const [block] = entry;\n\n    if (\n      !block[KEY_LIST_STYLE_TYPE] ||\n      block[KEY_LIST_STYLE_TYPE] !== listStyleType\n    ) {\n      eqListStyleType = false;\n      break;\n    }\n  }\n\n  return eqListStyleType;\n};\n","import { TEditor, TNodeEntry, Value } from '@udecode/plate-common';\n\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\nimport { indentList, IndentListOptions } from './indentList';\n\n/**\n * Set indent list if not set.\n */\nexport const toggleIndentListSet = <V extends Value>(\n  editor: TEditor<V>,\n  [node]: TNodeEntry,\n  { listStyleType = ListStyleType.Disc, ...options }: IndentListOptions<V>\n) => {\n  if (!node[KEY_LIST_STYLE_TYPE]) {\n    indentList(editor as any, {\n      listStyleType,\n      ...options,\n    });\n    return true;\n  }\n};\n","import { TEditor, TNodeEntry, unsetNodes, Value } from '@udecode/plate-common';\n\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\nimport { outdentList } from './outdentList';\n\n/**\n * Unset list style type if already set.\n */\nexport const toggleIndentListUnset = <V extends Value>(\n  editor: TEditor<V>,\n  [node, path]: TNodeEntry,\n  {\n    listStyleType = ListStyleType.Disc,\n  }: {\n    listStyleType?: string;\n  }\n) => {\n  if (listStyleType === node[KEY_LIST_STYLE_TYPE]) {\n    unsetNodes(editor as any, KEY_LIST_STYLE_TYPE, { at: path });\n    outdentList(editor as any, { listStyleType });\n    return true;\n  }\n};\n","import {\n  getBlockAbove,\n  getNodeEntries,\n  getPluginOptions,\n  isCollapsed,\n  isExpanded,\n  PlateEditor,\n  setElements,\n  TElement,\n  unsetNodes,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\nimport { KEY_INDENT } from '@udecode/plate-indent';\n\nimport {\n  IndentListPlugin,\n  KEY_LIST_STYLE_TYPE,\n} from '../createIndentListPlugin';\nimport { areEqListStyleType } from '../queries/areEqListStyleType';\nimport { IndentListOptions } from './indentList';\nimport { setIndentListNodes } from './setIndentListNodes';\nimport { setIndentListSiblingNodes } from './setIndentListSiblingNodes';\nimport { toggleIndentListSet } from './toggleIndentListSet';\nimport { toggleIndentListUnset } from './toggleIndentListUnset';\n\n/**\n * Toggle indent list.\n */\nexport const toggleIndentList = <V extends Value>(\n  editor: PlateEditor<V>,\n  options: IndentListOptions<V>\n) => {\n  const { listStyleType } = options;\n\n  const { getSiblingIndentListOptions } = getPluginOptions<IndentListPlugin, V>(\n    editor,\n    KEY_LIST_STYLE_TYPE\n  );\n\n  if (isCollapsed(editor.selection)) {\n    const entry = getBlockAbove<TElement>(editor);\n    if (!entry) return;\n\n    if (toggleIndentListSet(editor, entry, { listStyleType })) {\n      return;\n    }\n\n    if (toggleIndentListUnset(editor, entry, { listStyleType })) {\n      return;\n    }\n\n    setIndentListSiblingNodes(editor, entry, {\n      listStyleType,\n      getSiblingIndentListOptions,\n    });\n    return;\n  }\n\n  if (isExpanded(editor.selection)) {\n    const _entries = getNodeEntries<TElement>(editor, { block: true });\n    const entries = [..._entries];\n\n    const eqListStyleType = areEqListStyleType(editor, entries, {\n      listStyleType,\n    });\n\n    if (eqListStyleType) {\n      withoutNormalizing(editor, () => {\n        entries.forEach((entry) => {\n          const [node, path] = entry;\n\n          const indent = node[KEY_INDENT] as number;\n\n          unsetNodes(editor, KEY_LIST_STYLE_TYPE, { at: path });\n          if (indent > 1) {\n            setElements(editor, { [KEY_INDENT]: indent - 1 }, { at: path });\n          } else {\n            unsetNodes(editor, KEY_INDENT, { at: path });\n          }\n          // setIndentListNode(editor, {\n          //   listStyleType,\n          //   indent: node[KEY_INDENT],\n          //   at: path,\n          // });\n        });\n      });\n      return;\n    }\n\n    setIndentListNodes(editor, entries, { listStyleType });\n  }\n};\n","import {\n  getBlockAbove,\n  isBlockAboveEmpty,\n  KeyboardHandlerReturnType,\n  PlateEditor,\n  TElement,\n  Value,\n  WithPlatePlugin,\n} from '@udecode/plate-common';\nimport isHotkey from 'is-hotkey';\n\nimport {\n  IndentListPlugin,\n  KEY_LIST_STYLE_TYPE,\n} from './createIndentListPlugin';\nimport { outdentList } from './transforms/index';\n\nexport const onKeyDownIndentList =\n  <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(\n    editor: E,\n    // eslint-disable-next-line unused-imports/no-unused-vars\n    plugin: WithPlatePlugin<IndentListPlugin, V, E>\n  ): KeyboardHandlerReturnType =>\n  (e) => {\n    if (e.defaultPrevented) return;\n    if (!editor.selection) return;\n\n    const entry = getBlockAbove(editor);\n    if (!entry) return;\n\n    const node = entry[0] as TElement;\n\n    const listStyleType = node[KEY_LIST_STYLE_TYPE] as string | undefined;\n    if (!listStyleType) return;\n\n    if (isHotkey('Enter', e) && isBlockAboveEmpty(editor) && node.indent) {\n      outdentList(editor);\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  };\n","import {\n  isDefined,\n  TEditor,\n  TNodeEntry,\n  unsetNodes,\n  Value,\n} from '@udecode/plate-common';\nimport { KEY_INDENT } from '@udecode/plate-indent';\n\nimport { KEY_LIST_START, KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\n\n/**\n * Unset KEY_LIST_STYLE_TYPE, KEY_LIST_START if KEY_INDENT is not defined.\n */\nexport const normalizeIndentListNotIndented = <V extends Value>(\n  editor: TEditor<V>,\n  [node, path]: TNodeEntry\n) => {\n  if (\n    !isDefined(node[KEY_INDENT]) &&\n    (node[KEY_LIST_STYLE_TYPE] || node[KEY_LIST_START])\n  ) {\n    unsetNodes(editor, [KEY_LIST_STYLE_TYPE, KEY_LIST_START], { at: path });\n    return true;\n  }\n};\n","import {\n  isDefined,\n  TEditor,\n  TNodeEntry,\n  unsetNodes,\n  Value,\n} from '@udecode/plate-common';\n\nimport { KEY_LIST_START } from '../createIndentListPlugin';\n\n/**\n * If there is no previous list item and node list start is defined, unset list start (1).\n */\nexport const normalizeFirstIndentListStart = <V extends Value>(\n  editor: TEditor<V>,\n  [node, path]: TNodeEntry\n) => {\n  if (isDefined(node[KEY_LIST_START])) {\n    unsetNodes(editor, KEY_LIST_START, { at: path });\n    return true;\n  }\n};\n","import {\n  EElement,\n  EElementEntry,\n  getNode,\n  setElements,\n  TEditor,\n  TNodeEntry,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\n\nimport {\n  KEY_LIST_RESTART,\n  KEY_LIST_START,\n  KEY_LIST_STYLE_TYPE,\n} from '../createIndentListPlugin';\nimport { getNextIndentList } from '../queries/getNextIndentList';\nimport { getPreviousIndentList } from '../queries/getPreviousIndentList';\nimport { GetSiblingIndentListOptions } from '../queries/getSiblingIndentList';\nimport { normalizeFirstIndentListStart } from './normalizeFirstIndentListStart';\n\nexport const normalizeNextIndentListStart = <V extends Value>(\n  editor: TEditor<V>,\n  entry: TNodeEntry,\n  prevEntry?: TNodeEntry\n) => {\n  const [node, path] = entry;\n  const [prevNode] = prevEntry ?? [null];\n\n  const prevListStart = (prevNode?.[KEY_LIST_START] as number) ?? 1;\n  const currListStart = (node[KEY_LIST_START] as number) ?? 1;\n  const restart = node[KEY_LIST_RESTART];\n  const listStart = restart == null ? prevListStart + 1 : restart;\n\n  if (currListStart !== listStart) {\n    setElements(editor, { [KEY_LIST_START]: listStart }, { at: path });\n    return true;\n  }\n\n  return false;\n};\n\nexport const normalizeIndentListStart = <\n  N extends EElement<V>,\n  V extends Value = Value,\n>(\n  editor: TEditor<V>,\n  entry: EElementEntry<V>,\n  options?: Partial<GetSiblingIndentListOptions<N, V>>\n) => {\n  return withoutNormalizing(editor, () => {\n    const [node] = entry;\n    const listStyleType = (node as any)[KEY_LIST_STYLE_TYPE];\n\n    if (!listStyleType) return;\n\n    let normalized: boolean | undefined = false;\n\n    let prevEntry = getPreviousIndentList(editor, entry, options);\n\n    if (!prevEntry) {\n      normalized = normalizeFirstIndentListStart(editor, entry);\n\n      // if no prevEntry and not normalized, nothing happened: next should not be normalized\n      if (!normalized) return;\n    }\n\n    let normalizeNext = true;\n\n    let currEntry: EElementEntry<V> | undefined = entry;\n\n    // normalize next until current is not normalized\n    while (normalizeNext) {\n      normalizeNext =\n        normalizeNextIndentListStart(editor, currEntry, prevEntry) ||\n        normalized;\n\n      if (normalizeNext) normalized = true;\n\n      // get the node again after setNodes\n      prevEntry = [getNode<N>(editor, currEntry[1])!, currEntry[1]];\n      currEntry = getNextIndentList(editor, currEntry, options);\n\n      if (!currEntry) break;\n    }\n\n    return normalized;\n  });\n};\n","import {\n  ENodeEntry,\n  TEditor,\n  TElement,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\n\nimport { IndentListPlugin } from './createIndentListPlugin';\nimport { normalizeIndentListNotIndented } from './normalizers/normalizeIndentListNotIndented';\nimport { normalizeIndentListStart } from './normalizers/normalizeIndentListStart';\n\nexport const normalizeIndentList = <V extends Value>(\n  editor: TEditor<V>,\n  { getSiblingIndentListOptions }: IndentListPlugin = {}\n) => {\n  const { normalizeNode } = editor;\n\n  return ([node, path]: ENodeEntry<V>) => {\n    const normalized = withoutNormalizing(editor, () => {\n      if (normalizeIndentListNotIndented(editor, [node, path])) return true;\n      if (\n        normalizeIndentListStart<TElement, Value>(\n          editor,\n          [node as TElement, path],\n          getSiblingIndentListOptions\n        )\n      )\n        return true;\n    });\n    if (normalized) return;\n\n    return normalizeNode([node, path]);\n  };\n};\n","import {\n  createPathRef,\n  getNode,\n  PlateEditor,\n  TElement,\n  Value,\n  WithPlatePlugin,\n} from '@udecode/plate-common';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport { PathRef } from 'slate';\n\nimport {\n  IndentListPlugin,\n  KEY_LIST_STYLE_TYPE,\n} from './createIndentListPlugin';\nimport { normalizeIndentList } from './normalizeIndentList';\nimport { normalizeIndentListStart } from './normalizers/normalizeIndentListStart';\nimport { getNextIndentList } from './queries/getNextIndentList';\nimport { getPreviousIndentList } from './queries/getPreviousIndentList';\nimport { ListStyleType } from './types';\n\nexport const withIndentList = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  { options }: WithPlatePlugin<IndentListPlugin, V, E>\n) => {\n  const { apply } = editor;\n\n  const { getSiblingIndentListOptions } = options;\n\n  editor.normalizeNode = normalizeIndentList<Value>(editor, options);\n\n  editor.apply = (operation) => {\n    const { path } = operation as any;\n\n    let nodeBefore: TElement | null = null;\n\n    if (operation.type === 'set_node') {\n      nodeBefore = getNode<TElement>(editor, path);\n    }\n\n    // If there is a previous indent list, the inserted indent list style type should be the same.\n    // Only for lower-roman and upper-roman as it overlaps with lower-alpha and upper-alpha.\n    if (operation.type === 'insert_node') {\n      const listStyleType = operation.node[KEY_LIST_STYLE_TYPE];\n\n      if (\n        listStyleType &&\n        ['lower-roman', 'upper-roman'].includes(listStyleType as ListStyleType)\n      ) {\n        const prevNodeEntry = getPreviousIndentList<TElement>(\n          editor,\n          [operation.node as TElement, path],\n          {\n            eqIndent: false,\n            breakOnEqIndentNeqListStyleType: false,\n            ...getSiblingIndentListOptions,\n          }\n        );\n\n        if (prevNodeEntry) {\n          const prevListStyleType = prevNodeEntry[0][KEY_LIST_STYLE_TYPE];\n\n          if (\n            prevListStyleType === ListStyleType.LowerAlpha &&\n            listStyleType === ListStyleType.LowerRoman\n          ) {\n            operation.node[KEY_LIST_STYLE_TYPE] = ListStyleType.LowerAlpha;\n          } else if (\n            prevListStyleType === ListStyleType.UpperAlpha &&\n            listStyleType === ListStyleType.UpperRoman\n          ) {\n            operation.node[KEY_LIST_STYLE_TYPE] = ListStyleType.UpperAlpha;\n          }\n        }\n      }\n    }\n\n    // FIXME: delete first list\n    let nextIndentListPathRef: PathRef | null = null;\n    if (\n      operation.type === 'merge_node' &&\n      (operation.properties as any)[KEY_LIST_STYLE_TYPE]\n    ) {\n      const node = getNode<TElement>(editor, path);\n\n      if (node) {\n        const nextNodeEntryBefore = getNextIndentList<TElement>(\n          editor,\n          [node, path],\n          getSiblingIndentListOptions\n        );\n        if (nextNodeEntryBefore) {\n          nextIndentListPathRef = createPathRef(editor, nextNodeEntryBefore[1]);\n        }\n      }\n    }\n\n    apply(operation);\n\n    if (operation.type === 'merge_node') {\n      const { properties } = operation;\n\n      if ((properties as any)[KEY_LIST_STYLE_TYPE]) {\n        const node = getNode<TElement>(editor, path);\n        if (!node) return;\n\n        // const prevNodeEntry = getPreviousIndentList(\n        //   editor,\n        //   [node, path],\n        //   getSiblingIndentListOptions\n        // );\n        // if (!prevNodeEntry) {\n        // normalizeIndentListStart(\n        //   editor,\n        //   [node as any, path],\n        //   getSiblingIndentListOptions\n        // );\n        //   return;\n        // }\n        // normalizeIndentListStart(\n        //   editor,\n        //   prevNodeEntry,\n        //   getSiblingIndentListOptions\n        // );\n\n        normalizeIndentListStart<TElement>(\n          editor,\n          [node, path],\n          getSiblingIndentListOptions\n        );\n\n        if (nextIndentListPathRef) {\n          const nextPath = nextIndentListPathRef.unref();\n          if (nextPath) {\n            const nextNode = getNode<TElement>(editor, nextPath);\n            if (nextNode) {\n              normalizeIndentListStart<TElement>(\n                editor,\n                [nextNode, nextPath],\n                getSiblingIndentListOptions\n              );\n            }\n          }\n        }\n      }\n    }\n\n    if (nodeBefore && operation.type === 'set_node') {\n      const prevListStyleType = (operation.properties as any)[\n        KEY_LIST_STYLE_TYPE\n      ];\n      const listStyleType = (operation.newProperties as any)[\n        KEY_LIST_STYLE_TYPE\n      ];\n\n      // Remove list style type\n      if (prevListStyleType && !listStyleType) {\n        const node = getNode(editor, path);\n        if (!node) return;\n\n        const nextNodeEntry = getNextIndentList<TElement>(\n          editor,\n          [nodeBefore, path],\n          getSiblingIndentListOptions\n        );\n        if (!nextNodeEntry) return;\n\n        normalizeIndentListStart<TElement>(\n          editor,\n          nextNodeEntry,\n          getSiblingIndentListOptions\n        );\n      }\n\n      // Update list style type\n      if (\n        (prevListStyleType || listStyleType) &&\n        prevListStyleType !== listStyleType\n      ) {\n        const node = getNode<TElement>(editor, path);\n        if (!node) return;\n\n        /**\n         * Case:\n         * - 1-<o>-1 <- toggle ol\n         * - <1>-1-2 <- normalize\n         * - 1-2-3\n         */\n        // const prevNodeEntry = getPreviousIndentList(\n        //   editor,\n        //   [node, path],\n        //   getSiblingIndentListOptions\n        // );\n        // if (prevNodeEntry) {\n        //   normalizeIndentListStart(\n        //     editor,\n        //     prevNodeEntry,\n        //     getSiblingIndentListOptions\n        //   );\n        // }\n\n        /**\n         * Case:\n         * - 1-<2>-3 <- toggle ul\n         * - 1-o-<3> <- normalize\n         * - 1-o-1\n         */\n        let nextNodeEntry = getNextIndentList<TElement>(\n          editor,\n          [nodeBefore, path],\n          getSiblingIndentListOptions\n        );\n        if (nextNodeEntry) {\n          normalizeIndentListStart<TElement>(\n            editor,\n            nextNodeEntry,\n            getSiblingIndentListOptions\n          );\n        }\n        nextNodeEntry = getNextIndentList<TElement>(\n          editor,\n          [node, path],\n          getSiblingIndentListOptions\n        );\n        if (nextNodeEntry) {\n          normalizeIndentListStart<TElement>(\n            editor,\n            nextNodeEntry,\n            getSiblingIndentListOptions\n          );\n        }\n      }\n\n      const prevIndent = (operation.properties as any)[KEY_INDENT];\n      const indent = (operation.newProperties as any)[KEY_INDENT];\n\n      // Update indent\n      if (prevIndent !== indent) {\n        const node = getNode<TElement>(editor, path);\n        if (!node) return;\n\n        /**\n         * Case:\n         * - 1-<o>-1 <- indent\n         * - <1>-1o-1 <- normalize node before\n         * - 1-1o-2\n         */\n        let prevNodeEntry = getPreviousIndentList<TElement>(\n          editor,\n          [nodeBefore, path],\n          {\n            eqIndent: false,\n            breakOnLowerIndent: false,\n            breakOnEqIndentNeqListStyleType: false,\n            ...getSiblingIndentListOptions,\n          }\n        );\n        if (prevNodeEntry) {\n          normalizeIndentListStart<TElement>(\n            editor,\n            prevNodeEntry,\n            getSiblingIndentListOptions\n          );\n        }\n\n        /**\n         * Case:\n         * - 11-<1>-11 <- indent\n         * - <11>-11-12 <- normalize prev node after\n         * - 11-12-13\n         */\n        prevNodeEntry = getPreviousIndentList<TElement>(editor, [node, path], {\n          eqIndent: false,\n          breakOnLowerIndent: false,\n          breakOnEqIndentNeqListStyleType: false,\n          ...getSiblingIndentListOptions,\n        });\n        if (prevNodeEntry) {\n          normalizeIndentListStart<TElement>(\n            editor,\n            prevNodeEntry,\n            getSiblingIndentListOptions\n          );\n        }\n\n        /**\n         * Case:\n         * - 11-<12>-13 <- outdent\n         * - 11-2-<13> <- normalize next node before\n         * - 11-2-11\n         */\n        let nextNodeEntry = getNextIndentList<TElement>(\n          editor,\n          [nodeBefore, path],\n          {\n            eqIndent: false,\n            breakOnLowerIndent: false,\n            breakOnEqIndentNeqListStyleType: false,\n          }\n        );\n        if (nextNodeEntry) {\n          normalizeIndentListStart<TElement>(\n            editor,\n            nextNodeEntry,\n            getSiblingIndentListOptions\n          );\n        }\n\n        /**\n         * Case:\n         * - 1-<1o>-2 <- outdent\n         * - 1-o-<2> <- normalize next node after\n         * - 1-o-1\n         */\n        nextNodeEntry = getNextIndentList<TElement>(editor, [node, path], {\n          eqIndent: false,\n          breakOnLowerIndent: false,\n          breakOnEqIndentNeqListStyleType: false,\n        });\n        if (nextNodeEntry) {\n          normalizeIndentListStart<TElement>(\n            editor,\n            nextNodeEntry,\n            getSiblingIndentListOptions\n          );\n        }\n      }\n    }\n  };\n\n  return editor;\n};\n","import {\n  createPluginFactory,\n  ELEMENT_DEFAULT,\n  getPluginType,\n  isHtmlBlockElement,\n  KEY_DESERIALIZE_HTML,\n  postCleanHtml,\n  TElement,\n  traverseHtmlElements,\n} from '@udecode/plate-common';\n\nimport { injectIndentListComponent } from './injectIndentListComponent';\nimport { onKeyDownIndentList } from './onKeyDownIndentList';\nimport { GetSiblingIndentListOptions } from './queries/getSiblingIndentList';\nimport { ListStyleType } from './types';\nimport { withIndentList } from './withIndentList';\n\nexport const KEY_LIST_STYLE_TYPE = 'listStyleType';\nexport const KEY_LIST_START = 'listStart';\nexport const KEY_LIST_RESTART = 'listRestart';\n\nexport interface IndentListPlugin {\n  getSiblingIndentListOptions?: GetSiblingIndentListOptions<TElement>;\n\n  /**\n   * Map html element to list style type.\n   */\n  getListStyleType?: (element: HTMLElement) => ListStyleType;\n}\n\nexport const createIndentListPlugin = createPluginFactory<IndentListPlugin>({\n  key: KEY_LIST_STYLE_TYPE,\n  inject: {\n    belowComponent: injectIndentListComponent,\n  },\n  withOverrides: withIndentList,\n  handlers: {\n    onKeyDown: onKeyDownIndentList,\n  },\n  options: {\n    getListStyleType: (element) => element.style.listStyleType as ListStyleType,\n  },\n  then: (editor, { options }) => ({\n    inject: {\n      pluginsByKey: {\n        [KEY_DESERIALIZE_HTML]: {\n          editor: {\n            insertData: {\n              transformData: (data) => {\n                const document = new DOMParser().parseFromString(\n                  data,\n                  'text/html'\n                );\n                const { body } = document;\n\n                traverseHtmlElements(body, (element) => {\n                  if (element.tagName === 'LI') {\n                    const { childNodes } = element;\n\n                    // replace li block children (e.g. p) by their children\n                    const liChildren: Node[] = [];\n                    childNodes.forEach((child) => {\n                      if (isHtmlBlockElement(child as Element)) {\n                        liChildren.push(...child.childNodes);\n                      } else {\n                        liChildren.push(child);\n                      }\n                    });\n\n                    element.replaceChildren(...liChildren);\n\n                    // TODO: recursive check on ul parents for indent\n\n                    return false;\n                  }\n\n                  return true;\n                });\n\n                return postCleanHtml(body.innerHTML);\n              },\n            },\n          },\n        },\n      },\n    },\n    deserializeHtml: {\n      isElement: true,\n      getNode: (element) => ({\n        type: getPluginType(editor, ELEMENT_DEFAULT),\n        listStyleType: options.getListStyleType?.(element),\n        // gdoc uses aria-level attribute\n        indent: Number(element.getAttribute('aria-level')),\n      }),\n      rules: [\n        {\n          validNodeName: 'LI',\n        },\n      ],\n    },\n  }),\n});\n","import { PlateEditor, someNode, Value } from '@udecode/plate-common';\n\nimport { KEY_LIST_STYLE_TYPE, ListStyleType } from '../index';\n\nexport const someIndentList = <V extends Value>(\n  editor: PlateEditor<V>,\n  type: string\n) => {\n  return someNode(editor, {\n    match: (n) => {\n      const list = n[KEY_LIST_STYLE_TYPE];\n      if (type === ListStyleType.Disc) return list === ListStyleType.Disc;\n      return !!list && list !== ListStyleType.Disc;\n    },\n  });\n};\n","import {\n  focusEditor,\n  usePlateEditorRef,\n  usePlateEditorState,\n} from '@udecode/plate-common';\n\nimport { ListStyleType, toggleIndentList } from '../index';\nimport { someIndentList } from './someIndentList';\n\nexport const useIndentListToolbarButtonState = ({\n  nodeType = ListStyleType.Disc,\n}: { nodeType?: string } = {}) => {\n  const editor = usePlateEditorState();\n\n  return {\n    pressed: someIndentList(editor, nodeType),\n    nodeType,\n  };\n};\n\nexport const useIndentListToolbarButton = ({\n  nodeType,\n  pressed,\n}: ReturnType<typeof useIndentListToolbarButtonState>) => {\n  const editor = usePlateEditorRef();\n\n  return {\n    props: {\n      pressed,\n      onClick: (e: any) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        toggleIndentList(editor, {\n          listStyleType: nodeType,\n        });\n        focusEditor(editor);\n      },\n    },\n  };\n};\n","import {\n  EElement,\n  PlateEditor,\n  TElement,\n  TNodeEntry,\n  Value,\n} from '@udecode/plate-common';\n\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\nimport { getIndentListSiblings, GetIndentListSiblingsOptions } from './index';\n\n/**\n * Get the first sibling list style type at the given indent.\n * If none, return the entry list style type.\n */\nexport const getSiblingListStyleType = <V extends Value = Value>(\n  editor: PlateEditor<V>,\n  {\n    entry,\n    indent,\n    ...options\n  }: {\n    entry: TNodeEntry<TElement>;\n    indent: number;\n  } & GetIndentListSiblingsOptions<EElement<V>, V>\n) => {\n  const siblingEntry: TNodeEntry<TElement> = [\n    { ...entry[0], indent },\n    entry[1],\n  ];\n\n  const siblings = getIndentListSiblings(editor, siblingEntry as any, {\n    eqIndent: true,\n    current: false,\n    breakOnEqIndentNeqListStyleType: false,\n    ...options,\n  });\n\n  return (\n    siblings.length > 0\n      ? siblings[0][0][KEY_LIST_STYLE_TYPE]\n      : entry[0][KEY_LIST_STYLE_TYPE]\n  ) as ListStyleType;\n};\n"],"names":["ListStyleType","injectIndentListComponent","props","element","listStyleType","KEY_LIST_STYLE_TYPE","listStart","KEY_LIST_START","className","clsx","style","padding","margin","Disc","Circle","Square","includes","Ul","children","React","createElement","Ol","start","indentList","editor","options","setIndent","offset","setNodesProps","outdentList","unsetNodesProps","setIndentListNode","indent","at","newIndent","setElements","KEY_INDENT","setIndentListNodes","entries","withoutNormalizing","forEach","entry","_ref","node","path","getSiblingIndentList","getPreviousEntry","getNextEntry","query","eqIndent","breakQuery","breakOnLowerIndent","breakOnEqIndentNeqListStyleType","getSiblingEntry","nextEntry","nextNode","nextPath","nextIndent","isDefined","valid","getNextIndentList","currPath","Path","next","getNode","undefined","getPreviousIndentList","prevPath","getPreviousPath","prevNode","getIndentListSiblings","previous","current","siblings","iterEntry","prevEntry","push","setIndentListSiblingNodes","getSiblingIndentListOptions","areEqListStyleType","eqListStyleType","block","toggleIndentListSet","toggleIndentListUnset","unsetNodes","toggleIndentList","getPluginOptions","isCollapsed","selection","getBlockAbove","isExpanded","_entries","getNodeEntries","onKeyDownIndentList","plugin","e","defaultPrevented","isHotkey","isBlockAboveEmpty","stopPropagation","preventDefault","normalizeIndentListNotIndented","normalizeFirstIndentListStart","normalizeNextIndentListStart","_ref2","prevListStart","currListStart","restart","KEY_LIST_RESTART","normalizeIndentListStart","normalized","normalizeNext","currEntry","normalizeIndentList","normalizeNode","withIndentList","apply","operation","nodeBefore","type","prevNodeEntry","prevListStyleType","LowerAlpha","LowerRoman","UpperAlpha","UpperRoman","nextIndentListPathRef","properties","nextNodeEntryBefore","createPathRef","unref","newProperties","nextNodeEntry","prevIndent","createIndentListPlugin","createPluginFactory","key","inject","belowComponent","withOverrides","handlers","onKeyDown","getListStyleType","then","pluginsByKey","KEY_DESERIALIZE_HTML","insertData","transformData","data","document","DOMParser","parseFromString","body","traverseHtmlElements","tagName","childNodes","liChildren","child","isHtmlBlockElement","replaceChildren","postCleanHtml","innerHTML","deserializeHtml","isElement","_options$getListStyle","getPluginType","ELEMENT_DEFAULT","call","Number","getAttribute","rules","validNodeName","someIndentList","someNode","match","n","list","useIndentListToolbarButtonState","nodeType","usePlateEditorState","pressed","useIndentListToolbarButton","usePlateEditorRef","onClick","focusEditor","getSiblingListStyleType","siblingEntry","length"],"mappings":"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","x_google_ignoreList":[0,3]}