/// <reference types="react" />
export declare const CommentEditActions: {
    SaveButton: import("react").ForwardRefExoticComponent<{
        as?: import("react").ElementType<any> | undefined;
        asChild?: boolean | undefined;
        className?: string | undefined;
        style?: import("react").CSSProperties | undefined;
        options?: undefined;
        state?: {
            value: string | null;
            editingValue: import("packages/slate/dist").Value | null;
            setEditingValue: (value: import("packages/slate/dist").Value | null) => void;
            id: string;
            onCommentUpdate: ((value: Pick<import("..").TComment, "id"> & Partial<Omit<import("..").TComment, "id">>) => void) | null;
            updateComment: (value: Partial<import("..").TComment>) => void;
        } | undefined;
        setProps?: ((hookProps: {
            onClick: () => void;
            disabled: boolean;
        }) => Omit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref">) | undefined;
    } & Omit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & import("react").RefAttributes<any>>;
    CancelButton: import("react").ForwardRefExoticComponent<{
        as?: import("react").ElementType<any> | undefined;
        asChild?: boolean | undefined;
        className?: string | undefined;
        style?: import("react").CSSProperties | undefined;
        options?: any;
        state?: undefined;
        setProps?: ((hookProps: {
            onClick: () => void;
        }) => Omit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref">) | undefined;
    } & Omit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & import("react").RefAttributes<any>>;
};
//# sourceMappingURL=CommentEditActions.d.ts.map