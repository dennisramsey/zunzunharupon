/// <reference types="react" />
export declare const useCommentNewSubmitButtonState: () => {
    editingCommentText: string;
    resetNewCommentValue: () => void;
    addComment: (value: import("@udecode/plate-common").WithPartial<import("..").TComment, "userId" | "id" | "createdAt">) => import("@udecode/plate-common").WithPartial<import("..").TComment, "userId">;
    isReplyComment: boolean;
    submitButtonText: string;
    onCommentAdd: ((value: import("@udecode/plate-common").WithPartial<import("..").TComment, "userId">) => void) | null;
    activeCommentId: string;
    comment: import("..").TComment;
    newValue: import("@udecode/plate-common").Value;
};
export declare const useCommentNewSubmitButton: ({ editingCommentText, resetNewCommentValue, addComment, isReplyComment, submitButtonText, onCommentAdd, activeCommentId, comment, newValue, }: ReturnType<typeof useCommentNewSubmitButtonState>) => {
    props: {
        type: string;
        disabled: boolean;
        children: string;
        onClick: () => void;
    };
};
export declare const CommentNewSubmitButton: import("react").ForwardRefExoticComponent<{
    as?: import("react").ElementType<any> | undefined;
    asChild?: boolean | undefined;
    className?: string | undefined;
    style?: import("react").CSSProperties | undefined;
    options?: undefined;
    state?: {
        editingCommentText: string;
        resetNewCommentValue: () => void;
        addComment: (value: import("@udecode/plate-common").WithPartial<import("..").TComment, "userId" | "id" | "createdAt">) => import("@udecode/plate-common").WithPartial<import("..").TComment, "userId">;
        isReplyComment: boolean;
        submitButtonText: string;
        onCommentAdd: ((value: import("@udecode/plate-common").WithPartial<import("..").TComment, "userId">) => void) | null;
        activeCommentId: string;
        comment: import("..").TComment;
        newValue: import("@udecode/plate-common").Value;
    } | undefined;
    setProps?: ((hookProps: {
        type: string;
        disabled: boolean;
        children: string;
        onClick: () => void;
    }) => Omit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref">) | undefined;
} & Omit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & import("react").RefAttributes<any>>;
//# sourceMappingURL=CommentNewSubmitButton.d.ts.map