/// <reference types="react" />
export declare const useCommentEditTextareaState: () => {
    textareaRef: import("react").MutableRefObject<HTMLTextAreaElement | null>;
    setEditingValue: (value: import("@udecode/plate-common").Value | null) => void;
    value: string | null;
};
export declare const useCommentEditTextarea: ({ setEditingValue, textareaRef, value, }: ReturnType<typeof useCommentEditTextareaState>) => {
    props: {
        placeholder: string;
        rows: number;
        ref: import("react").MutableRefObject<HTMLTextAreaElement | null>;
        value: string | undefined;
        onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;
    };
};
export declare const CommentEditTextarea: import("react").ForwardRefExoticComponent<{
    as?: import("react").ElementType<any> | undefined;
    asChild?: boolean | undefined;
    className?: string | undefined;
    style?: import("react").CSSProperties | undefined;
    options?: undefined;
    state?: {
        textareaRef: import("react").MutableRefObject<HTMLTextAreaElement | null>;
        setEditingValue: (value: import("@udecode/plate-common").Value | null) => void;
        value: string | null;
    } | undefined;
    setProps?: ((hookProps: {
        placeholder: string;
        rows: number;
        ref: import("react").MutableRefObject<HTMLTextAreaElement | null>;
        value: string | undefined;
        onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;
    }) => Omit<import("react").DetailedHTMLProps<import("react").TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>, "ref">) | undefined;
} & Omit<import("react").DetailedHTMLProps<import("react").TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>, "ref"> & import("react").RefAttributes<any>>;
//# sourceMappingURL=CommentEditTextarea.d.ts.map