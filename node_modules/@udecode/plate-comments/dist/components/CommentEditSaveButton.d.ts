/// <reference types="react" />
export declare const useCommentEditSaveButtonState: () => {
    value: string | null;
    editingValue: import("@udecode/plate-common").Value | null;
    setEditingValue: (value: import("@udecode/plate-common").Value | null) => void;
    id: string;
    onCommentUpdate: ((value: Pick<import("..").TComment, "id"> & Partial<Omit<import("..").TComment, "id">>) => void) | null;
    updateComment: (value: Partial<import("..").TComment>) => void;
};
export declare const useCommentEditSaveButton: ({ editingValue, setEditingValue, id, onCommentUpdate, updateComment, value, }: ReturnType<typeof useCommentEditSaveButtonState>) => {
    props: {
        onClick: () => void;
        disabled: boolean;
    };
};
export declare const CommentEditSaveButton: import("react").ForwardRefExoticComponent<{
    as?: import("react").ElementType<any> | undefined;
    asChild?: boolean | undefined;
    className?: string | undefined;
    style?: import("react").CSSProperties | undefined;
    options?: undefined;
    state?: {
        value: string | null;
        editingValue: import("@udecode/plate-common").Value | null;
        setEditingValue: (value: import("@udecode/plate-common").Value | null) => void;
        id: string;
        onCommentUpdate: ((value: Pick<import("..").TComment, "id"> & Partial<Omit<import("..").TComment, "id">>) => void) | null;
        updateComment: (value: Partial<import("..").TComment>) => void;
    } | undefined;
    setProps?: ((hookProps: {
        onClick: () => void;
        disabled: boolean;
    }) => Omit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref">) | undefined;
} & Omit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & import("react").RefAttributes<any>>;
//# sourceMappingURL=CommentEditSaveButton.d.ts.map