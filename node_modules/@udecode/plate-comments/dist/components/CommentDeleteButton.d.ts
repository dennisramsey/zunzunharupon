/// <reference types="react" />
export declare const useCommentDeleteButtonState: () => {
    activeCommentId: string | null;
    onCommentDelete: ((id: string) => void) | null;
    id: string;
    setActiveCommentId: (value: string | null) => void;
    removeComment: (id: string | null) => void;
    editor: import("@udecode/plate-common").PlateEditor<import("@udecode/plate-common").Value>;
};
export declare const useCommentDeleteButton: ({ activeCommentId, editor, id, onCommentDelete, removeComment, setActiveCommentId, }: ReturnType<typeof useCommentDeleteButtonState>) => {
    props: {
        onClick: () => void;
    };
};
export declare const CommentDeleteButton: import("react").ForwardRefExoticComponent<{
    as?: import("react").ElementType<any> | undefined;
    asChild?: boolean | undefined;
    className?: string | undefined;
    style?: import("react").CSSProperties | undefined;
    options?: undefined;
    state?: {
        activeCommentId: string | null;
        onCommentDelete: ((id: string) => void) | null;
        id: string;
        setActiveCommentId: (value: string | null) => void;
        removeComment: (id: string | null) => void;
        editor: import("@udecode/plate-common").PlateEditor<import("@udecode/plate-common").Value>;
    } | undefined;
    setProps?: ((hookProps: {
        onClick: () => void;
    }) => Omit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref">) | undefined;
} & Omit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & import("react").RefAttributes<any>>;
//# sourceMappingURL=CommentDeleteButton.d.ts.map