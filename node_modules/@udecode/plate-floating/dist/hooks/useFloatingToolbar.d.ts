/// <reference types="react" />
import { UseVirtualFloatingOptions } from '..';
export type FloatingToolbarState = {
    floatingOptions?: UseVirtualFloatingOptions;
    ignoreReadOnly?: boolean;
    hideToolbar?: boolean;
};
export declare const useFloatingToolbarState: ({ floatingOptions, hideToolbar, ignoreReadOnly, }: FloatingToolbarState) => {
    editor: import("@udecode/plate-common").PlateEditor<import("@udecode/plate-common").Value>;
    open: boolean;
    setOpen: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    waitForCollapsedSelection: boolean;
    setWaitForCollapsedSelection: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    selectionExpanded: boolean;
    selectionText: string;
    focused: boolean;
    focusedEditorId: import("@udecode/plate-common").Scope | null;
    ignoreReadOnly: boolean | undefined;
    hideToolbar: boolean | undefined;
    floating: import("./useVirtualFloating").UseVirtualFloatingReturn<import("@floating-ui/react/src/types").ReferenceType>;
};
export declare const useFloatingToolbar: ({ editor, selectionExpanded, selectionText, waitForCollapsedSelection, setWaitForCollapsedSelection, open, setOpen, focused, focusedEditorId, floating, ignoreReadOnly, hideToolbar, }: ReturnType<typeof useFloatingToolbarState>) => {
    ref: (node: HTMLElement | null) => void;
    props: {
        style: import("react").CSSProperties;
    };
    hidden: boolean;
};
//# sourceMappingURL=useFloatingToolbar.d.ts.map