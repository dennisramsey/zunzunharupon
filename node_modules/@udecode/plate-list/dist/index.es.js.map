{"version":3,"file":"index.es.js","sources":["../../../node_modules/lodash/isArray.js","../../../node_modules/lodash/castArray.js","../../../node_modules/is-hotkey/lib/index.js","../src/queries/isListNested.ts","../src/queries/getListTypes.ts","../src/queries/getHighestEmptyList.ts","../src/queries/getListItemEntry.ts","../src/queries/getListRoot.ts","../src/transforms/insertTodoListItem.ts","../src/insertBreakTodoList.ts","../src/withTodoList.ts","../src/todo-list/createTodoListPlugin.ts","../src/queries/getTodoListItemEntry.ts","../src/queries/hasListChild.ts","../src/queries/isAcrossListItems.ts","../src/queries/isListRoot.ts","../src/queries/someList.ts","../src/transforms/moveListItemDown.ts","../src/transforms/moveListItemsToList.ts","../src/transforms/unwrapList.ts","../src/transforms/moveListItemUp.ts","../src/transforms/removeFirstListItem.ts","../src/transforms/moveListItems.ts","../src/transforms/indentListItems.ts","../src/transforms/insertListItem.ts","../src/transforms/moveListItemSublistItemsToListItemSublist.ts","../src/transforms/moveListSiblingsAfterCursor.ts","../src/transforms/removeListItem.ts","../src/transforms/toggleList.ts","../src/transforms/unindentListItems.ts","../src/onKeyDownList.ts","../src/deleteBackwardList.ts","../src/deleteForwardList.ts","../src/deleteFragmentList.ts","../src/insertBreakList.ts","../src/insertFragmentList.ts","../src/normalizers/normalizeListItem.ts","../src/normalizers/normalizeNestedList.ts","../src/normalizers/normalizeList.ts","../src/withList.ts","../src/createListPlugin.ts","../src/hooks/useListToolbarButton.ts","../src/hooks/useTodoListElement.ts"],"sourcesContent":["/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var isArray = require('./isArray');\n\n/**\n * Casts `value` as an array if it's not one.\n *\n * @static\n * @memberOf _\n * @since 4.4.0\n * @category Lang\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast array.\n * @example\n *\n * _.castArray(1);\n * // => [1]\n *\n * _.castArray({ 'a': 1 });\n * // => [{ 'a': 1 }]\n *\n * _.castArray('abc');\n * // => ['abc']\n *\n * _.castArray(null);\n * // => [null]\n *\n * _.castArray(undefined);\n * // => [undefined]\n *\n * _.castArray();\n * // => []\n *\n * var array = [1, 2, 3];\n * console.log(_.castArray(array) === array);\n * // => true\n */\nfunction castArray() {\n  if (!arguments.length) {\n    return [];\n  }\n  var value = arguments[0];\n  return isArray(value) ? value : [value];\n}\n\nmodule.exports = castArray;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n/**\n * Constants.\n */\n\n// We make this a function so it can be tested in describe block mocks with Jest.\nvar IS_MAC = () => typeof window != 'undefined' && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);\n\nvar MODIFIERS = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey'\n};\n\n// We make this a function so it can be tested in describe block mocks with Jest.\nvar ALIASES = () => ({\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC() ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta'\n});\n\nvar CODES = {\n  backspace: 8,\n  tab: 9,\n  enter: 13,\n  shift: 16,\n  control: 17,\n  alt: 18,\n  pause: 19,\n  capslock: 20,\n  escape: 27,\n  ' ': 32,\n  pageup: 33,\n  pagedown: 34,\n  end: 35,\n  home: 36,\n  arrowleft: 37,\n  arrowup: 38,\n  arrowright: 39,\n  arrowdown: 40,\n  insert: 45,\n  delete: 46,\n  meta: 91,\n  numlock: 144,\n  scrolllock: 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  '\\'': 222\n};\n\nfor (var f = 1; f < 20; f++) {\n  CODES['f' + f] = 111 + f;\n}\n\n/**\n * Is hotkey?\n */\n\nfunction isHotkey(hotkey, options, event) {\n  if (options && !('byKey' in options)) {\n    event = options;\n    options = null;\n  }\n\n  if (!Array.isArray(hotkey)) {\n    hotkey = [hotkey];\n  }\n\n  var array = hotkey.map(function (string) {\n    return parseHotkey(string, options);\n  });\n  var check = function check(e) {\n    return array.some(function (object) {\n      return compareHotkey(object, e);\n    });\n  };\n  var ret = event == null ? check : check(event);\n  return ret;\n}\n\nfunction isCodeHotkey(hotkey, event) {\n  return isHotkey(hotkey, event);\n}\n\nfunction isKeyHotkey(hotkey, event) {\n  return isHotkey(hotkey, { byKey: true }, event);\n}\n\n/**\n * Parse.\n */\n\nfunction parseHotkey(hotkey, options) {\n  var byKey = options && options.byKey;\n  var ret = {};\n\n  // Special case to handle the `+` key since we use it as a separator.\n  hotkey = hotkey.replace('++', '+add');\n  var values = hotkey.split('+');\n  var length = values.length;\n\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n\n  for (var k in MODIFIERS) {\n    ret[MODIFIERS[k]] = false;\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var value = _step.value;\n\n      var optional = value.endsWith('?') && value.length > 1;\n\n      if (optional) {\n        value = value.slice(0, -1);\n      }\n\n      var name = toKeyName(value);\n      var modifier = MODIFIERS[name];\n\n      if (length === 1 || !modifier) {\n        if (byKey) {\n          ret.key = name;\n        } else {\n          ret.which = toKeyCode(value);\n        }\n      }\n\n      if (modifier) {\n        ret[modifier] = optional ? null : true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return ret;\n}\n\n/**\n * Compare.\n */\n\nfunction compareHotkey(object, event) {\n  for (var key in object) {\n    var expected = object[key];\n    var actual = void 0;\n\n    if (expected == null) {\n      continue;\n    }\n\n    if (key === 'key' && event.key != null) {\n      actual = event.key.toLowerCase();\n    } else if (key === 'which') {\n      actual = expected === 91 && event.which === 93 ? 91 : event.which;\n    } else {\n      actual = event[key];\n    }\n\n    if (actual == null && expected === false) {\n      continue;\n    }\n\n    if (actual !== expected) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Utils.\n */\n\nfunction toKeyCode(name) {\n  name = toKeyName(name);\n  var code = CODES[name] || name.toUpperCase().charCodeAt(0);\n  return code;\n}\n\nfunction toKeyName(name) {\n  name = name.toLowerCase();\n  name = ALIASES()[name] || name;\n  return name;\n}\n\n/**\n * Export.\n */\n\nexports.default = isHotkey;\nexports.isHotkey = isHotkey;\nexports.isCodeHotkey = isCodeHotkey;\nexports.isKeyHotkey = isKeyHotkey;\nexports.parseHotkey = parseHotkey;\nexports.compareHotkey = compareHotkey;\nexports.toKeyCode = toKeyCode;\nexports.toKeyName = toKeyName;","import {\n  getParentNode,\n  getPluginType,\n  PlateEditor,\n  TElement,\n  Value,\n} from '@udecode/plate-common';\nimport { Path } from 'slate';\n\nimport { ELEMENT_LI } from '../createListPlugin';\n\n/**\n * Is the list nested, i.e. its parent is a list item.\n */\nexport const isListNested = <V extends Value>(\n  editor: PlateEditor<V>,\n  listPath: Path\n) => {\n  const listParentNode = getParentNode<TElement>(editor, listPath)?.[0];\n\n  return listParentNode?.type === getPluginType(editor, ELEMENT_LI);\n};\n","import { getPluginType, PlateEditor, Value } from '@udecode/plate-common';\n\nimport {\n  ELEMENT_LI,\n  ELEMENT_LIC,\n  ELEMENT_OL,\n  ELEMENT_UL,\n} from '../createListPlugin';\n\nexport const getUnorderedListType = <V extends Value>(\n  editor: PlateEditor<V>\n) => {\n  return getPluginType(editor, ELEMENT_UL);\n};\n\nexport const getOrderedListType = <V extends Value>(editor: PlateEditor<V>) => {\n  return getPluginType(editor, ELEMENT_OL);\n};\n\nexport const getListTypes = <V extends Value>(editor: PlateEditor<V>) => {\n  return [getOrderedListType(editor), getUnorderedListType(editor)];\n};\n\nexport const getListItemType = <V extends Value>(editor: PlateEditor<V>) => {\n  return getPluginType(editor, ELEMENT_LI);\n};\n\nexport const getListItemContentType = <V extends Value>(\n  editor: PlateEditor<V>\n) => {\n  return getPluginType(editor, ELEMENT_LIC);\n};\n","import {\n  getAboveNode,\n  getPluginType,\n  PlateEditor,\n  Value,\n} from '@udecode/plate-common';\nimport { Path } from 'slate';\n\nimport { ELEMENT_LI } from '../createListPlugin';\nimport { getListTypes } from './getListTypes';\n\n/**\n * Find the highest end list that can be deleted.\n * Its path should be different to diffListPath.\n * If the highest end list 2+ items, return liPath.\n * Get the parent list until:\n * - the list has less than 2 items.\n * - its path is not equals to diffListPath.\n */\nexport const getHighestEmptyList = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    diffListPath,\n    liPath,\n  }: {\n    liPath: Path;\n    diffListPath?: Path;\n  }\n): Path | undefined => {\n  const list = getAboveNode(editor, {\n    at: liPath,\n    match: { type: getListTypes(editor) },\n  });\n  if (!list) return;\n  const [listNode, listPath] = list;\n\n  if (!diffListPath || !Path.equals(listPath, diffListPath)) {\n    if (listNode.children.length < 2) {\n      const liParent = getAboveNode(editor, {\n        at: listPath,\n        match: { type: getPluginType(editor, ELEMENT_LI) },\n      });\n\n      if (liParent) {\n        return (\n          getHighestEmptyList(editor, { liPath: liParent[1], diffListPath }) ||\n          listPath\n        );\n      }\n    }\n    return liPath;\n  }\n};\n","import {\n  getAboveNode,\n  getNode,\n  getParentNode,\n  getPluginType,\n  isCollapsed,\n  PlateEditor,\n  TElement,\n  TElementEntry,\n  Value,\n} from '@udecode/plate-common';\nimport { Location, Path, Range } from 'slate';\n\nimport { ELEMENT_LI } from '../createListPlugin';\n\n/**\n * Returns the nearest li and ul / ol wrapping node entries for a given path (default = selection)\n */\nexport const getListItemEntry = <V extends Value>(\n  editor: PlateEditor<V>,\n  { at = editor.selection }: { at?: Location | null } = {}\n): { list: TElementEntry; listItem: TElementEntry } | undefined => {\n  const liType = getPluginType(editor, ELEMENT_LI);\n\n  let _at: Path;\n\n  if (Range.isRange(at) && !isCollapsed(at)) {\n    _at = at.focus.path;\n  } else if (Range.isRange(at)) {\n    _at = at.anchor.path;\n  } else {\n    _at = at as Path;\n  }\n\n  if (_at) {\n    const node = getNode<TElement>(editor, _at);\n    if (node) {\n      const listItem = getAboveNode<TElement>(editor, {\n        at: _at,\n        match: { type: liType },\n      });\n\n      if (listItem) {\n        const list = getParentNode<TElement>(editor, listItem[1])!;\n\n        return { list, listItem };\n      }\n    }\n  }\n};\n","import {\n  getAboveNode,\n  getPluginType,\n  PlateEditor,\n  TElement,\n  TElementEntry,\n  Value,\n} from '@udecode/plate-common';\nimport { Path, Point, Range } from 'slate';\n\nimport { ELEMENT_OL, ELEMENT_UL } from '../createListPlugin';\n\n/**\n * Searches upward for the root list element\n */\nexport const getListRoot = <V extends Value>(\n  editor: PlateEditor<V>,\n  at: Path | Range | Point | null = editor.selection\n): TElementEntry | undefined => {\n  if (!at) return;\n\n  const parentList = getAboveNode<TElement>(editor, {\n    at,\n    match: {\n      type: [\n        getPluginType(editor, ELEMENT_UL),\n        getPluginType(editor, ELEMENT_OL),\n      ],\n    },\n  });\n\n  if (parentList) {\n    const [, parentListPath] = parentList;\n\n    return getListRoot(editor, parentListPath) ?? parentList;\n  }\n};\n","import {\n  deleteText,\n  getAboveNode,\n  getMarks,\n  getPluginType,\n  insertElements,\n  isBlockTextEmptyAfterSelection,\n  isStartPoint,\n  PlateEditor,\n  select,\n  splitNodes,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\nimport { Path, Range } from 'slate';\n\nimport { ELEMENT_TODO_LI } from '../todo-list/index';\nimport { TodoListPlugin } from '../types';\n\n/**\n * Insert todo list item if selection in li>p.\n * TODO: test\n */\nexport const insertTodoListItem = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    inheritCheckStateOnLineStartBreak = false,\n    inheritCheckStateOnLineEndBreak = false,\n  }: TodoListPlugin\n): boolean => {\n  const todoType = getPluginType(editor, ELEMENT_TODO_LI);\n\n  if (!editor.selection) {\n    return false;\n  }\n\n  const todoEntry = getAboveNode(editor, { match: { type: todoType } });\n  if (!todoEntry) return false;\n  const [todo, paragraphPath] = todoEntry;\n\n  let success = false;\n\n  withoutNormalizing(editor, () => {\n    if (!Range.isCollapsed(editor.selection!)) {\n      deleteText(editor);\n    }\n\n    const isStart = isStartPoint(\n      editor,\n      editor.selection!.focus,\n      paragraphPath\n    );\n    const isEnd = isBlockTextEmptyAfterSelection(editor);\n\n    const nextParagraphPath = Path.next(paragraphPath);\n\n    /**\n     * If start, insert a list item before\n     */\n    if (isStart) {\n      insertElements(\n        editor,\n        {\n          type: todoType,\n          checked: inheritCheckStateOnLineStartBreak ? todo.checked : false,\n          children: [{ text: '' }],\n        },\n        { at: paragraphPath }\n      );\n\n      success = true;\n\n      return;\n    }\n\n    /**\n     * If not end, split the nodes\n     */\n    if (isEnd) {\n      /**\n       * If end, insert a list item after and select it\n       */\n      const marks = getMarks(editor) || {};\n      insertElements(\n        editor,\n        {\n          type: todoType,\n          checked: inheritCheckStateOnLineEndBreak ? todo.checked : false,\n          children: [{ text: '', ...marks }],\n        },\n        { at: nextParagraphPath }\n      );\n      select(editor, nextParagraphPath);\n    } else {\n      withoutNormalizing(editor, () => {\n        splitNodes(editor);\n      });\n    }\n\n    success = true;\n  });\n\n  return success;\n};\n","import { PlateEditor, Value } from '@udecode/plate-common';\n\nimport { getTodoListItemEntry } from './queries/getTodoListItemEntry';\nimport { insertTodoListItem } from './transforms/insertTodoListItem';\nimport { TodoListPlugin } from './types';\n\nexport const insertBreakTodoList = <V extends Value>(\n  editor: PlateEditor<V>,\n  options: TodoListPlugin\n) => {\n  if (!editor.selection) return;\n\n  const res = getTodoListItemEntry(editor);\n\n  // If selection is in a todo li\n  if (res) {\n    const inserted = insertTodoListItem(editor, options);\n    if (inserted) return true;\n  }\n};\n","import { PlateEditor, Value, WithPlatePlugin } from '@udecode/plate-common';\n\nimport { insertBreakTodoList } from './insertBreakTodoList';\nimport { TodoListPlugin } from './types';\n\nexport const withTodoList = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  { options }: WithPlatePlugin<TodoListPlugin, V, E>\n) => {\n  const { insertBreak } = editor;\n\n  editor.insertBreak = () => {\n    if (insertBreakTodoList(editor, options)) return;\n    insertBreak();\n  };\n\n  return editor;\n};\n","import {\n  createPluginFactory,\n  onKeyDownToggleElement,\n} from '@udecode/plate-common';\n\nimport { TodoListPlugin } from '../types';\nimport { withTodoList } from '../withTodoList';\n\nexport const ELEMENT_TODO_LI = 'action_item';\n\nexport const createTodoListPlugin = createPluginFactory<TodoListPlugin>({\n  key: ELEMENT_TODO_LI,\n  isElement: true,\n  withOverrides: withTodoList,\n  handlers: {\n    onKeyDown: onKeyDownToggleElement,\n  },\n  options: {\n    hotkey: ['mod+opt+4', 'mod+shift+4'],\n  },\n});\n","import {\n  getAboveNode,\n  getNode,\n  getParentNode,\n  getPluginType,\n  isCollapsed,\n  PlateEditor,\n  TElement,\n  TElementEntry,\n  Value,\n} from '@udecode/plate-common';\nimport { Location, Path, Range } from 'slate';\n\nimport { ELEMENT_TODO_LI } from '../todo-list/createTodoListPlugin';\n\n/**\n * Returns the nearest li and ul / ol wrapping node entries for a given path (default = selection)\n */\nexport const getTodoListItemEntry = <V extends Value>(\n  editor: PlateEditor<V>,\n  { at = editor.selection }: { at?: Location | null } = {}\n): { list: TElementEntry; listItem: TElementEntry } | undefined => {\n  const todoType = getPluginType(editor, ELEMENT_TODO_LI);\n\n  let _at: Path;\n\n  if (Range.isRange(at) && !isCollapsed(at)) {\n    _at = at.focus.path;\n  } else if (Range.isRange(at)) {\n    _at = at.anchor.path;\n  } else {\n    _at = at as Path;\n  }\n\n  if (_at) {\n    const node = getNode<TElement>(editor, _at);\n    if (node) {\n      const listItem = getAboveNode<TElement>(editor, {\n        at: _at,\n        match: { type: todoType },\n      });\n\n      if (listItem) {\n        const list = getParentNode<TElement>(editor, listItem[1])!;\n\n        return { list, listItem };\n      }\n    }\n  }\n};\n","import { match, PlateEditor, TAncestor, Value } from '@udecode/plate-common';\n\nimport { getListTypes } from './getListTypes';\n\n/**\n * Is there a list child in the node.\n */\nexport const hasListChild = <V extends Value>(\n  editor: PlateEditor<V>,\n  node: TAncestor\n) => node.children.some((n) => match(n, [], { type: getListTypes(editor) }));\n","import {\n  getPluginType,\n  isCollapsed,\n  isRangeAcrossBlocks,\n  PlateEditor,\n  someNode,\n  Value,\n} from '@udecode/plate-common';\n\nimport { ELEMENT_LI } from '../createListPlugin';\n\n/**\n * Is selection across blocks with list items\n */\nexport const isAcrossListItems = <V extends Value>(editor: PlateEditor<V>) => {\n  const { selection } = editor;\n\n  if (!selection || isCollapsed(selection)) {\n    return false;\n  }\n\n  const isAcrossBlocks = isRangeAcrossBlocks(editor);\n  if (!isAcrossBlocks) return false;\n\n  return someNode(editor, {\n    match: { type: getPluginType(editor, ELEMENT_LI) },\n  });\n};\n","import {\n  isElement,\n  PlateEditor,\n  TDescendant,\n  Value,\n} from '@udecode/plate-common';\n\nimport { getListTypes } from './getListTypes';\n\nexport const isListRoot = <V extends Value>(\n  editor: PlateEditor<V>,\n  node: TDescendant\n): boolean => isElement(node) && getListTypes(editor).includes(node.type);\n","import { PlateEditor, Value } from '@udecode/plate-common';\n\nimport { getListItemEntry } from '../index';\n\nexport const someList = <V extends Value>(\n  editor: PlateEditor<V>,\n  type: string\n) => {\n  return getListItemEntry(editor)?.list?.[0].type === type;\n};\n","import {\n  getNodeEntry,\n  match,\n  moveNodes,\n  PlateEditor,\n  TElement,\n  TElementEntry,\n  Value,\n  withoutNormalizing,\n  wrapNodes,\n} from '@udecode/plate-common';\nimport { Path } from 'slate';\n\nimport { getListTypes } from '../queries/index';\n\nexport interface MoveListItemDownOptions {\n  list: TElementEntry;\n  listItem: TElementEntry;\n}\n\nexport const moveListItemDown = <V extends Value>(\n  editor: PlateEditor<V>,\n  { list, listItem }: MoveListItemDownOptions\n) => {\n  let moved = false;\n\n  const [listNode] = list;\n  const [, listItemPath] = listItem;\n\n  let previousListItemPath: Path;\n\n  try {\n    previousListItemPath = Path.previous(listItemPath);\n  } catch (error) {\n    return;\n  }\n\n  // Previous sibling is the new parent\n  const previousSiblingItem = getNodeEntry<TElement>(\n    editor,\n    previousListItemPath\n  );\n\n  if (previousSiblingItem) {\n    const [previousNode, previousPath] = previousSiblingItem;\n\n    const sublist = (previousNode.children as TElement[]).find((n) =>\n      match(n, [], { type: getListTypes(editor) })\n    );\n    const newPath = previousPath.concat(\n      sublist ? [1, sublist.children.length] : [1]\n    );\n\n    withoutNormalizing(editor, () => {\n      if (!sublist) {\n        // Create new sublist\n        wrapNodes<TElement>(\n          editor,\n          { type: listNode.type, children: [] },\n          { at: listItemPath }\n        );\n      }\n\n      // Move the current item to the sublist\n      moveNodes(editor, {\n        at: listItemPath,\n        to: newPath,\n      });\n\n      moved = true;\n    });\n  }\n\n  return moved;\n};\n","import {\n  deleteText,\n  findDescendant,\n  getLastChildPath,\n  moveChildren,\n  MoveChildrenOptions,\n  PlateEditor,\n  TElementEntry,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\nimport { Path } from 'slate';\n\nimport { getListTypes } from '../queries/getListTypes';\n\nexport interface MergeListItemIntoListOptions<V extends Value = Value> {\n  /**\n   * List items of the sublist of this node will be moved.\n   */\n  fromListItem?: TElementEntry;\n\n  /**\n   * List items of the list will be moved.\n   */\n  fromList?: TElementEntry;\n\n  /**\n   * List items will be moved in this list.\n   */\n  toList?: TElementEntry;\n\n  fromStartIndex?: MoveChildrenOptions<V>['fromStartIndex'];\n\n  /**\n   * List position where to move the list items.\n   */\n  toListIndex?: number | null;\n\n  to?: Path;\n\n  /**\n   * Delete `fromListItem` sublist if true.\n   * @default true\n   */\n  deleteFromList?: boolean;\n}\n\n/**\n * Move the list items of the sublist of `fromListItem` to `toList` (if `fromListItem` is defined).\n * Move the list items of `fromList` to `toList` (if `fromList` is defined).\n */\nexport const moveListItemsToList = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    fromList,\n    fromListItem,\n    fromStartIndex,\n    to: _to,\n    toList,\n    toListIndex = null,\n    deleteFromList = true,\n  }: MergeListItemIntoListOptions<V>\n) => {\n  let fromListPath: Path | undefined;\n  let moved;\n\n  withoutNormalizing(editor, () => {\n    if (fromListItem) {\n      const fromListItemSublist = findDescendant(editor, {\n        at: fromListItem[1],\n        match: {\n          type: getListTypes(editor),\n        },\n      });\n      if (!fromListItemSublist) return;\n\n      fromListPath = fromListItemSublist?.[1];\n    } else if (fromList) {\n      // eslint-disable-next-line prefer-destructuring\n      fromListPath = fromList[1];\n    } else {\n      return;\n    }\n\n    let to: Path | null = null;\n\n    if (_to) to = _to;\n    if (toList) {\n      if (toListIndex === null) {\n        const lastChildPath = getLastChildPath(toList);\n        to = Path.next(lastChildPath);\n      } else {\n        to = toList[1].concat([toListIndex]);\n      }\n    }\n    if (!to) return;\n\n    moved = moveChildren(editor, {\n      at: fromListPath,\n      to,\n      fromStartIndex,\n    });\n\n    // Remove the empty list\n    if (deleteFromList) {\n      deleteText(editor, { at: fromListPath });\n    }\n  });\n\n  return moved;\n};\n","import {\n  ELEMENT_DEFAULT,\n  getAboveNode,\n  getBlockAbove,\n  getCommonNode,\n  getPluginType,\n  isElement,\n  PlateEditor,\n  setElements,\n  unwrapNodes,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\nimport { Path } from 'slate';\n\nimport {\n  ELEMENT_LI,\n  ELEMENT_LIC,\n  ELEMENT_OL,\n  ELEMENT_UL,\n} from '../createListPlugin';\nimport { getListTypes } from '../queries/index';\n\nexport const unwrapList = <V extends Value>(\n  editor: PlateEditor<V>,\n  { at }: { at?: Path } = {}\n) => {\n  const ancestorListTypeCheck = () => {\n    if (getAboveNode(editor, { match: { type: getListTypes(editor), at } })) {\n      return true;\n    }\n\n    // The selection's common node might be a list type\n    if (!at && editor.selection) {\n      const commonNode = getCommonNode(\n        editor,\n        editor.selection.anchor.path,\n        editor.selection.focus.path\n      );\n      if (\n        isElement(commonNode[0]) &&\n        getListTypes(editor).includes(commonNode[0].type)\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  withoutNormalizing(editor, () => {\n    do {\n      const licEntry = getBlockAbove(editor, {\n        at,\n        match: { type: getPluginType(editor, ELEMENT_LIC) },\n      });\n      if (licEntry) {\n        setElements(editor, {\n          at,\n          type: getPluginType(editor, ELEMENT_DEFAULT),\n        });\n      }\n\n      unwrapNodes(editor, {\n        at,\n        match: { type: getPluginType(editor, ELEMENT_LI) },\n        split: true,\n      });\n\n      unwrapNodes(editor, {\n        at,\n        match: {\n          type: [\n            getPluginType(editor, ELEMENT_UL),\n            getPluginType(editor, ELEMENT_OL),\n          ],\n        },\n        split: true,\n      });\n    } while (ancestorListTypeCheck());\n  });\n};\n","import {\n  getAboveNode,\n  getNode,\n  getPluginType,\n  insertElements,\n  isLastChild,\n  moveNodes,\n  PlateEditor,\n  TElement,\n  TElementEntry,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\nimport { Path } from 'slate';\n\nimport { ELEMENT_LI } from '../createListPlugin';\nimport { hasListChild } from '../queries/hasListChild';\nimport { moveListItemsToList } from './moveListItemsToList';\nimport { unwrapList } from './unwrapList';\n\nexport interface MoveListItemUpOptions {\n  list: TElementEntry;\n  listItem: TElementEntry;\n}\n\n/**\n * Move a list item up.\n */\nexport const moveListItemUp = <V extends Value>(\n  editor: PlateEditor<V>,\n  { list, listItem }: MoveListItemUpOptions\n) => {\n  const move = () => {\n    const [listNode, listPath] = list;\n    const [liNode, liPath] = listItem;\n\n    const liParent = getAboveNode<TElement>(editor, {\n      at: listPath,\n      match: { type: getPluginType(editor, ELEMENT_LI) },\n    });\n    if (!liParent) {\n      let toListPath;\n      try {\n        toListPath = Path.next(listPath);\n      } catch (error) {\n        return;\n      }\n\n      const condA = hasListChild(editor, liNode);\n      const condB = !isLastChild(list, liPath);\n\n      if (condA || condB) {\n        // Insert a new list next to `list`\n        insertElements(\n          editor,\n          {\n            type: listNode.type,\n            children: [],\n          },\n          { at: toListPath }\n        );\n      }\n\n      if (condA) {\n        const toListNode = getNode<TElement>(editor, toListPath);\n        if (!toListNode) return;\n\n        // Move li sub-lis to the new list\n        moveListItemsToList(editor, {\n          fromListItem: listItem,\n          toList: [toListNode, toListPath],\n        });\n      }\n\n      // If there is siblings li, move them to the new list\n      if (condB) {\n        const toListNode = getNode<TElement>(editor, toListPath);\n        if (!toListNode) return;\n\n        // Move next lis to the new list\n        moveListItemsToList(editor, {\n          fromList: list,\n          fromStartIndex: liPath.at(-1)! + 1,\n          toList: [toListNode, toListPath],\n          deleteFromList: false,\n        });\n      }\n\n      // Finally, unwrap the list\n      unwrapList(editor, { at: liPath.concat(0) });\n\n      return true;\n    }\n    const [, liParentPath] = liParent;\n\n    const toListPath = liPath.concat([1]);\n\n    // If li has next siblings, we need to move them.\n    if (!isLastChild(list, liPath)) {\n      // If li has no sublist, insert one.\n      if (!hasListChild(editor, liNode)) {\n        insertElements(\n          editor,\n          {\n            type: listNode.type,\n            children: [],\n          },\n          { at: toListPath }\n        );\n      }\n\n      const toListNode = getNode<TElement>(editor, toListPath);\n      if (!toListNode) return;\n\n      // Move next siblings to li sublist.\n      moveListItemsToList(editor, {\n        fromListItem: liParent,\n        toList: [toListNode, toListPath],\n        fromStartIndex: liPath.at(-1)! + 1,\n        deleteFromList: false,\n      });\n    }\n\n    const movedUpLiPath = Path.next(liParentPath);\n\n    // Move li one level up: next to the li parent.\n    moveNodes(editor, {\n      at: liPath,\n      to: movedUpLiPath,\n    });\n\n    return true;\n  };\n\n  let moved: boolean | undefined = false;\n\n  withoutNormalizing(editor, () => {\n    moved = move();\n  });\n\n  return moved;\n};\n","import { PlateEditor, TElementEntry, Value } from '@udecode/plate-common';\n\nimport { isListNested } from '../queries/isListNested';\nimport { moveListItemUp } from './moveListItemUp';\n\n/**\n * If list is not nested and if li is not the first child, move li up.\n */\nexport const removeFirstListItem = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    list,\n    listItem,\n  }: {\n    list: TElementEntry;\n    listItem: TElementEntry;\n  }\n) => {\n  const [, listPath] = list;\n\n  if (!isListNested(editor, listPath)) {\n    moveListItemUp(editor, { list, listItem });\n\n    return true;\n  }\n\n  return false;\n};\n","import {\n  createPathRef,\n  getNodeEntries,\n  GetNodeEntriesOptions,\n  getParentNode,\n  getPluginType,\n  PlateEditor,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\nimport { Path, PathRef } from 'slate';\n\nimport { ELEMENT_LIC } from '../createListPlugin';\nimport { isListNested } from '../queries/isListNested';\nimport { moveListItemDown } from './moveListItemDown';\nimport { moveListItemUp } from './moveListItemUp';\nimport { removeFirstListItem } from './removeFirstListItem';\n\nexport type MoveListItemsOptions = {\n  increase?: boolean;\n  at?: GetNodeEntriesOptions['at'];\n  enableResetOnShiftTab?: boolean;\n};\n\nexport const moveListItems = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    increase = true,\n    at = editor.selection ?? undefined,\n    enableResetOnShiftTab,\n  }: MoveListItemsOptions = {}\n) => {\n  const _nodes = getNodeEntries(editor, {\n    at,\n    match: {\n      type: getPluginType(editor, ELEMENT_LIC),\n    },\n  });\n\n  // Get the selected lic\n  const lics = Array.from(_nodes);\n\n  if (lics.length === 0) return;\n\n  const highestLicPaths: Path[] = [];\n  const highestLicPathRefs: PathRef[] = [];\n\n  // Filter out the nested lic, we just need to move the highest ones\n  lics.forEach((lic) => {\n    const licPath = lic[1];\n    const liPath = Path.parent(licPath);\n\n    const isAncestor = highestLicPaths.some((path) => {\n      const highestLiPath = Path.parent(path);\n\n      return Path.isAncestor(highestLiPath, liPath);\n    });\n    if (!isAncestor) {\n      highestLicPaths.push(licPath);\n      highestLicPathRefs.push(createPathRef(editor, licPath));\n    }\n  });\n\n  const licPathRefsToMove = increase\n    ? highestLicPathRefs\n    : highestLicPathRefs.reverse();\n\n  return withoutNormalizing(editor, () => {\n    let moved = false;\n\n    licPathRefsToMove.forEach((licPathRef) => {\n      const licPath = licPathRef.unref();\n      if (!licPath) return;\n\n      const listItem = getParentNode(editor, licPath);\n      if (!listItem) return;\n\n      const parentList = getParentNode(editor, listItem[1]);\n      if (!parentList) return;\n\n      let _moved: any;\n\n      if (increase) {\n        _moved = moveListItemDown(editor, {\n          list: parentList as any,\n          listItem: listItem as any,\n        });\n      } else if (isListNested(editor, parentList[1])) {\n        // un-indent a sub-list item\n        _moved = moveListItemUp(editor, {\n          list: parentList as any,\n          listItem: listItem as any,\n        });\n      } else if (enableResetOnShiftTab) {\n        // unindenting a top level list item, effectively breaking apart the list.\n        _moved = removeFirstListItem(editor, {\n          list: parentList as any,\n          listItem: listItem as any,\n        });\n      }\n\n      moved = _moved || moved;\n    });\n\n    return moved;\n  });\n};\n","import { PlateEditor, Value } from '@udecode/plate-common';\n\nimport { moveListItems } from './moveListItems';\n\nexport const indentListItems = <V extends Value>(editor: PlateEditor<V>) => {\n  moveListItems(editor, { increase: true });\n};\n","import {\n  collapseSelection,\n  deleteText,\n  getAboveNode,\n  getMarks,\n  getParentNode,\n  getPluginType,\n  insertElements,\n  isBlockTextEmptyAfterSelection,\n  isStartPoint,\n  moveNodes,\n  PlateEditor,\n  select,\n  splitNodes,\n  TElement,\n  Value,\n  withoutNormalizing,\n  wrapNodes,\n} from '@udecode/plate-common';\nimport { Path, Range } from 'slate';\n\nimport { ELEMENT_LI, ELEMENT_LIC } from '../createListPlugin';\n\n/**\n * Insert list item if selection in li>p.\n * TODO: test\n */\nexport const insertListItem = <V extends Value>(\n  editor: PlateEditor<V>\n): boolean => {\n  const liType = getPluginType(editor, ELEMENT_LI);\n  const licType = getPluginType(editor, ELEMENT_LIC);\n\n  if (!editor.selection) {\n    return false;\n  }\n\n  const licEntry = getAboveNode(editor, { match: { type: licType } });\n  if (!licEntry) return false;\n  const [, paragraphPath] = licEntry;\n\n  const listItemEntry = getParentNode(editor, paragraphPath);\n  if (!listItemEntry) return false;\n  const [listItemNode, listItemPath] = listItemEntry;\n\n  if (listItemNode.type !== liType) return false;\n\n  let success = false;\n\n  withoutNormalizing(editor, () => {\n    if (!Range.isCollapsed(editor.selection!)) {\n      deleteText(editor);\n    }\n\n    const isStart = isStartPoint(\n      editor,\n      editor.selection!.focus,\n      paragraphPath\n    );\n    const isEnd = isBlockTextEmptyAfterSelection(editor);\n\n    const nextParagraphPath = Path.next(paragraphPath);\n    const nextListItemPath = Path.next(listItemPath);\n\n    /**\n     * If start, insert a list item before\n     */\n    if (isStart) {\n      insertElements(\n        editor,\n        {\n          type: liType,\n          children: [{ type: licType, children: [{ text: '' }] }],\n        },\n        { at: listItemPath }\n      );\n\n      success = true;\n\n      return;\n    }\n\n    /**\n     * If not end, split nodes, wrap a list item on the new paragraph and move it to the next list item\n     */\n    if (isEnd) {\n      /**\n       * If end, insert a list item after and select it\n       */\n      const marks = getMarks(editor) || {};\n      insertElements(\n        editor,\n        {\n          type: liType,\n          children: [{ type: licType, children: [{ text: '', ...marks }] }],\n        },\n        { at: nextListItemPath }\n      );\n      select(editor, nextListItemPath);\n    } else {\n      withoutNormalizing(editor, () => {\n        splitNodes(editor);\n        wrapNodes<TElement>(\n          editor,\n          {\n            type: liType,\n            children: [],\n          },\n          { at: nextParagraphPath }\n        );\n        moveNodes(editor, {\n          at: nextParagraphPath,\n          to: nextListItemPath,\n        });\n        select(editor, nextListItemPath);\n        collapseSelection(editor, {\n          edge: 'start',\n        });\n      });\n    }\n\n    /**\n     * If there is a list in the list item, move it to the next list item\n     */\n    if (listItemNode.children.length > 1) {\n      moveNodes(editor, {\n        at: nextParagraphPath,\n        to: nextListItemPath.concat(1),\n      });\n    }\n\n    success = true;\n  });\n\n  return success;\n};\n","import {\n  deleteText,\n  findDescendant,\n  getLastChildPath,\n  getParentNode,\n  insertElements,\n  moveChildren,\n  PlateEditor,\n  TElement,\n  TElementEntry,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\nimport { Path } from 'slate';\n\nimport { getListTypes } from '../queries/getListTypes';\n\nexport interface MoveListItemSublistItemsToListItemSublistOptions {\n  /**\n   * The list item to merge.\n   */\n  fromListItem: TElementEntry;\n\n  /**\n   * The list item where to merge.\n   */\n  toListItem: TElementEntry;\n\n  /**\n   * Move to the start of the list instead of the end.\n   */\n  start?: boolean;\n}\n\n/**\n * Move fromListItem sublist list items to the end of `toListItem` sublist.\n * If there is no `toListItem` sublist, insert one.\n */\nexport const moveListItemSublistItemsToListItemSublist = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    fromListItem,\n    toListItem,\n    start,\n  }: MoveListItemSublistItemsToListItemSublistOptions\n) => {\n  const [, fromListItemPath] = fromListItem;\n  const [, toListItemPath] = toListItem;\n  let moved = 0;\n\n  withoutNormalizing(editor, () => {\n    const fromListItemSublist = findDescendant<TElement>(editor, {\n      at: fromListItemPath,\n      match: {\n        type: getListTypes(editor),\n      },\n    });\n    if (!fromListItemSublist) return;\n\n    const [, fromListItemSublistPath] = fromListItemSublist;\n\n    const toListItemSublist = findDescendant<TElement>(editor, {\n      at: toListItemPath,\n      match: {\n        type: getListTypes(editor),\n      },\n    });\n\n    let to: Path;\n\n    if (!toListItemSublist) {\n      const fromList = getParentNode(editor, fromListItemPath);\n      if (!fromList) return;\n      const [fromListNode] = fromList;\n\n      const fromListType = fromListNode.type;\n\n      const toListItemSublistPath = toListItemPath.concat([1]);\n\n      insertElements(\n        editor,\n        { type: fromListType as string, children: [] },\n        { at: toListItemSublistPath }\n      );\n\n      to = toListItemSublistPath.concat([0]);\n    } else if (start) {\n      const [, toListItemSublistPath] = toListItemSublist;\n      to = toListItemSublistPath.concat([0]);\n    } else {\n      to = Path.next(getLastChildPath(toListItemSublist));\n    }\n\n    moved = moveChildren(editor, {\n      at: fromListItemSublistPath,\n      to,\n    });\n\n    // Remove the empty list\n    deleteText(editor, { at: fromListItemSublistPath });\n  });\n\n  return moved;\n};\n","import {\n  getNode,\n  match,\n  moveChildren,\n  PlateEditor,\n  TElement,\n  TElementEntry,\n  Value,\n} from '@udecode/plate-common';\nimport { Path } from 'slate';\n\nimport { getListTypes } from '../queries/getListTypes';\n\nexport const moveListSiblingsAfterCursor = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    at,\n    to,\n  }: {\n    at: Path;\n    to: Path;\n  }\n): number => {\n  const offset = at.at(-1)!;\n  at = Path.parent(at);\n  const listNode = getNode<TElement>(editor, at)!;\n  const listEntry: TElementEntry = [listNode, at];\n\n  if (\n    !match(listNode, [], { type: getListTypes(editor) }) ||\n    Path.isParent(at, to) // avoid moving nodes within its own list\n  ) {\n    return 0;\n  }\n\n  return moveChildren(editor, {\n    at: listEntry as any,\n    to,\n    fromStartIndex: offset + 1,\n  });\n};\n","import {\n  createPathRef,\n  deleteMerge,\n  getNodeEntry,\n  getPluginType,\n  getPreviousPath,\n  insertElements,\n  isExpanded,\n  PlateEditor,\n  removeNodes,\n  TElement,\n  TElementEntry,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\nimport { Path } from 'slate';\n\nimport { ELEMENT_LI, ELEMENT_LIC } from '../createListPlugin';\nimport { hasListChild } from '../queries/hasListChild';\nimport { moveListItemsToList } from './moveListItemsToList';\nimport { moveListItemSublistItemsToListItemSublist } from './moveListItemSublistItemsToListItemSublist';\n\nexport interface RemoveListItemOptions {\n  list: TElementEntry;\n  listItem: TElementEntry;\n  reverse?: boolean;\n}\n\n/**\n * Remove list item and move its sublist to list if any.\n */\nexport const removeListItem = <V extends Value>(\n  editor: PlateEditor<V>,\n  { list, listItem, reverse = true }: RemoveListItemOptions\n) => {\n  const [liNode, liPath] = listItem;\n\n  // Stop if the list item has no sublist\n  if (isExpanded(editor.selection) || !hasListChild(editor, liNode)) {\n    return false;\n  }\n\n  const previousLiPath = getPreviousPath(liPath);\n\n  let success = false;\n\n  withoutNormalizing(editor, () => {\n    /**\n     * If there is a previous li, we need to move sub-lis to the previous li.\n     * As we need to delete first, we will:\n     * 1. insert a temporary li: tempLi\n     * 2. move sub-lis to tempLi\n     * 3. delete\n     * 4. move sub-lis from tempLi to the previous li.\n     * 5. remove tempLi\n     */\n    if (previousLiPath) {\n      const previousLi = getNodeEntry<TElement>(editor, previousLiPath);\n      if (!previousLi) return;\n\n      // 1\n      let tempLiPath = Path.next(liPath);\n      insertElements(\n        editor,\n        {\n          type: getPluginType(editor, ELEMENT_LI),\n          children: [\n            {\n              type: getPluginType(editor, ELEMENT_LIC),\n              children: [{ text: '' }],\n            },\n          ],\n        },\n        { at: tempLiPath }\n      );\n\n      const tempLi = getNodeEntry<TElement>(editor, tempLiPath);\n      if (!tempLi) return;\n      const tempLiPathRef = createPathRef(editor, tempLi[1]);\n\n      // 2\n      moveListItemSublistItemsToListItemSublist(editor, {\n        fromListItem: listItem,\n        toListItem: tempLi,\n      });\n\n      // 3\n      deleteMerge(editor, {\n        reverse,\n      });\n\n      tempLiPath = tempLiPathRef.unref()!;\n\n      // 4\n      moveListItemSublistItemsToListItemSublist(editor, {\n        fromListItem: [tempLi[0], tempLiPath],\n        toListItem: previousLi,\n      });\n\n      // 5\n      removeNodes(editor, { at: tempLiPath });\n\n      success = true;\n      return;\n    }\n\n    // If it's the first li, move the sublist to the parent list\n    moveListItemsToList(editor, {\n      fromListItem: listItem,\n      toList: list,\n      toListIndex: 1,\n    });\n  });\n\n  return success;\n};\n","import {\n  ELEMENT_DEFAULT,\n  findNode,\n  getBlockAbove,\n  getCommonNode,\n  getNodeEntries,\n  getPluginOptions,\n  getPluginType,\n  isCollapsed,\n  isElement,\n  isRangeAcrossBlocks,\n  PlateEditor,\n  setElements,\n  TElement,\n  Value,\n  withoutNormalizing,\n  wrapNodes,\n} from '@udecode/plate-common';\nimport { Range } from 'slate';\n\nimport { ELEMENT_LI, ELEMENT_LIC } from '../createListPlugin';\nimport { getListItemEntry, getListTypes } from '../queries/index';\nimport { ListPlugin } from '../types';\nimport { unwrapList } from './unwrapList';\n\nexport const toggleList = <V extends Value>(\n  editor: PlateEditor<V>,\n  { type, pluginKey = type }: { type: string; pluginKey?: string }\n) =>\n  withoutNormalizing(editor, () => {\n    if (!editor.selection) {\n      return;\n    }\n\n    const { validLiChildrenTypes } = getPluginOptions<ListPlugin, V>(\n      editor,\n      pluginKey\n    );\n\n    if (isCollapsed(editor.selection) || !isRangeAcrossBlocks(editor)) {\n      // selection is collapsed\n      const res = getListItemEntry(editor);\n\n      if (res) {\n        const { list } = res;\n        if (list[0].type === type) {\n          unwrapList(editor);\n        } else {\n          setElements(\n            editor,\n            { type },\n            {\n              at: editor.selection,\n              match: (n) =>\n                isElement(n) && getListTypes(editor).includes(n.type),\n              mode: 'lowest',\n            }\n          );\n        }\n      } else {\n        const list = { type, children: [] };\n        wrapNodes<TElement>(editor, list);\n\n        const _nodes = getNodeEntries(editor, {\n          match: { type: getPluginType(editor, ELEMENT_DEFAULT) },\n        });\n        const nodes = Array.from(_nodes);\n\n        const blockAbove = getBlockAbove(editor, {\n          match: { type: validLiChildrenTypes },\n        });\n        if (!blockAbove) {\n          setElements(editor, {\n            type: getPluginType(editor, ELEMENT_LIC),\n          });\n        }\n\n        const listItem = {\n          type: getPluginType(editor, ELEMENT_LI),\n          children: [],\n        };\n\n        for (const [, path] of nodes) {\n          wrapNodes<TElement>(editor, listItem, {\n            at: path,\n          });\n        }\n      }\n    } else {\n      // selection is a range\n\n      const [startPoint, endPoint] = Range.edges(editor.selection!);\n      const commonEntry = getCommonNode<TElement>(\n        editor,\n        startPoint.path,\n        endPoint.path\n      );\n\n      if (\n        getListTypes(editor).includes(commonEntry[0].type) ||\n        (commonEntry[0] as TElement).type === getPluginType(editor, ELEMENT_LI)\n      ) {\n        if ((commonEntry[0] as TElement).type === type) {\n          unwrapList(editor);\n        } else {\n          const startList = findNode(editor, {\n            at: Range.start(editor.selection),\n            match: { type: getListTypes(editor) },\n            mode: 'lowest',\n          });\n          const endList = findNode(editor, {\n            at: Range.end(editor.selection),\n            match: { type: getListTypes(editor) },\n            mode: 'lowest',\n          });\n          const rangeLength = Math.min(\n            startList![1].length,\n            endList![1].length\n          );\n          setElements(\n            editor,\n            { type },\n            {\n              at: editor.selection,\n              match: (n, path) =>\n                isElement(n) &&\n                getListTypes(editor).includes(n.type) &&\n                path.length >= rangeLength,\n              mode: 'all',\n            }\n          );\n        }\n      } else {\n        const rootPathLength = commonEntry[1].length;\n        const _nodes = getNodeEntries<TElement>(editor, {\n          mode: 'all',\n        });\n        const nodes = Array.from(_nodes).filter(\n          ([, path]) => path.length === rootPathLength + 1\n        );\n\n        nodes.forEach((n) => {\n          if (getListTypes(editor).includes(n[0].type)) {\n            setElements(\n              editor,\n              { type },\n              {\n                at: n[1],\n                match: (_n) =>\n                  isElement(_n) && getListTypes(editor).includes(_n.type),\n                mode: 'all',\n              }\n            );\n          } else {\n            if (!validLiChildrenTypes?.includes(n[0].type)) {\n              setElements(\n                editor,\n                { type: getPluginType(editor, ELEMENT_LIC) },\n                { at: n[1] }\n              );\n            }\n\n            const listItem = {\n              type: getPluginType(editor, ELEMENT_LI),\n              children: [],\n            };\n            wrapNodes<TElement>(editor, listItem, {\n              at: n[1],\n            });\n\n            const list = { type, children: [] };\n            wrapNodes<TElement>(editor, list, { at: n[1] });\n          }\n        });\n      }\n    }\n  });\n","import { PlateEditor, Value } from '@udecode/plate-common';\n\nimport { moveListItems, MoveListItemsOptions } from './moveListItems';\n\nexport type UnindentListItemsOptions = Omit<MoveListItemsOptions, 'increase'>;\n\nexport const unindentListItems = <V extends Value>(\n  editor: PlateEditor<V>,\n  options: UnindentListItemsOptions = {}\n) => moveListItems(editor, { ...options, increase: false });\n","import {\n  getPluginType,\n  Hotkeys,\n  isCollapsed,\n  KeyboardHandlerReturnType,\n  PlateEditor,\n  select,\n  someNode,\n  unhangRange,\n  Value,\n  WithPlatePlugin,\n} from '@udecode/plate-common';\nimport isHotkey from 'is-hotkey';\nimport { castArray } from 'lodash';\nimport { Range } from 'slate';\n\nimport { ELEMENT_LI } from './createListPlugin';\nimport { moveListItems, toggleList } from './transforms/index';\nimport { ListPlugin } from './types';\n\nexport const onKeyDownList =\n  <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(\n    editor: E,\n    {\n      type,\n      options: { hotkey, enableResetOnShiftTab },\n    }: WithPlatePlugin<ListPlugin, V, E>\n  ): KeyboardHandlerReturnType =>\n  (e) => {\n    if (e.defaultPrevented) return;\n\n    const isTab = Hotkeys.isTab(editor, e);\n    const isUntab = Hotkeys.isUntab(editor, e);\n\n    let workRange = editor.selection;\n\n    if (editor.selection && (isTab || isUntab)) {\n      const { selection } = editor;\n\n      // Unhang the expanded selection\n      if (!isCollapsed(editor.selection)) {\n        const { anchor, focus } = Range.isBackward(selection)\n          ? { anchor: { ...selection.focus }, focus: { ...selection.anchor } }\n          : { anchor: { ...selection.anchor }, focus: { ...selection.focus } };\n\n        // This is a workaround for a Slate bug\n        // See: https://github.com/ianstormtaylor/slate/pull/5039\n        const unHungRange = unhangRange(editor, { anchor, focus });\n        if (unHungRange) {\n          workRange = unHungRange;\n          select(editor, unHungRange);\n        }\n      }\n\n      // check if we're in a list context.\n      const listSelected = someNode(editor, {\n        match: { type: getPluginType(editor, ELEMENT_LI) },\n      });\n\n      if (workRange && listSelected) {\n        e.preventDefault();\n        moveListItems(editor, {\n          at: workRange,\n          increase: isTab,\n          enableResetOnShiftTab,\n        });\n        return true;\n      }\n    }\n\n    if (!hotkey) return;\n\n    const hotkeys = castArray(hotkey);\n\n    for (const _hotkey of hotkeys) {\n      if (isHotkey(_hotkey)(e as any)) {\n        toggleList(editor, { type: type! });\n      }\n    }\n  };\n","import {\n  deleteMerge,\n  ELEMENT_DEFAULT,\n  getNodeEntries,\n  getNodeEntry,\n  getPluginType,\n  getPointBefore,\n  isFirstChild,\n  isSelectionAtBlockStart,\n  mockPlugin,\n  PlateEditor,\n  removeNodes,\n  TElement,\n  TNodeEntry,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\nimport {\n  onKeyDownResetNode,\n  ResetNodePlugin,\n  SIMULATE_BACKSPACE,\n} from '@udecode/plate-reset-node';\nimport { Path, TextUnit } from 'slate';\n\nimport { ELEMENT_LI, ELEMENT_LIC } from './createListPlugin';\nimport { isAcrossListItems } from './queries';\nimport { getListItemEntry } from './queries/getListItemEntry';\nimport { isListNested } from './queries/isListNested';\nimport { removeFirstListItem } from './transforms/removeFirstListItem';\nimport { removeListItem } from './transforms/removeListItem';\nimport { unwrapList } from './transforms/unwrapList';\n\nexport const deleteBackwardList = <V extends Value>(\n  editor: PlateEditor<V>,\n  unit: TextUnit\n) => {\n  const res = getListItemEntry(editor, {});\n\n  let moved: boolean | undefined = false;\n\n  if (res) {\n    const { list, listItem } = res;\n\n    if (\n      isSelectionAtBlockStart(editor, {\n        match: (node) => node.type === getPluginType(editor, ELEMENT_LI),\n      })\n    ) {\n      withoutNormalizing(editor, () => {\n        moved = removeFirstListItem(editor, { list, listItem });\n        if (moved) return true;\n\n        moved = removeListItem(editor, { list, listItem });\n        if (moved) return true;\n\n        if (isFirstChild(listItem[1]) && !isListNested(editor, list[1])) {\n          onKeyDownResetNode(\n            editor as any,\n            mockPlugin<ResetNodePlugin>({\n              options: {\n                rules: [\n                  {\n                    types: [getPluginType(editor, ELEMENT_LI)],\n                    defaultType: getPluginType(editor, ELEMENT_DEFAULT),\n                    hotkey: 'backspace',\n                    predicate: () => isSelectionAtBlockStart(editor),\n                    onReset: (e) => unwrapList(e),\n                  },\n                ],\n              },\n            })\n          )(SIMULATE_BACKSPACE);\n          moved = true;\n          return;\n        }\n\n        const pointBeforeListItem = getPointBefore(\n          editor,\n          editor.selection!.focus\n        );\n\n        let currentLic: TNodeEntry<TElement> | undefined;\n        let hasMultipleChildren = false;\n\n        // check if closest lic ancestor has multiple children\n        if (\n          pointBeforeListItem &&\n          isAcrossListItems({\n            ...editor,\n            selection: {\n              anchor: editor.selection!.anchor,\n              focus: pointBeforeListItem,\n            },\n          })\n        ) {\n          // get closest lic ancestor of current selectable\n          const licType = getPluginType(editor, ELEMENT_LIC);\n          const _licNodes = getNodeEntries<TElement>(editor, {\n            at: listItem[1],\n            mode: 'lowest',\n            match: (node) => node.type === licType,\n          });\n          currentLic = [..._licNodes][0];\n          hasMultipleChildren = currentLic[0].children.length > 1;\n        }\n\n        deleteMerge(editor, {\n          unit,\n          reverse: true,\n        });\n        moved = true;\n\n        if (!currentLic || !hasMultipleChildren) return;\n\n        const leftoverListItem = getNodeEntry<TElement>(\n          editor,\n          Path.parent(currentLic[1])\n        )!;\n\n        if (leftoverListItem && leftoverListItem[0].children.length === 0) {\n          // remove the leftover empty list item\n          removeNodes(editor, { at: leftoverListItem[1] });\n        }\n      });\n    }\n  }\n\n  return moved;\n};\n","import {\n  getBlockAbove,\n  getChildren,\n  getEditorString,\n  getNode,\n  getNodeEntries,\n  getNodeEntry,\n  getParentNode,\n  getPluginType,\n  getPointAfter,\n  isSelectionAtBlockEnd,\n  PlateEditor,\n  removeNodes,\n  TElement,\n  TElementEntry,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\nimport { Path, TextUnit } from 'slate';\n\nimport { ELEMENT_LI, ELEMENT_LIC } from './createListPlugin';\nimport {\n  getListItemEntry,\n  getListRoot,\n  hasListChild,\n  isAcrossListItems,\n} from './queries/index';\nimport {\n  moveListItemsToList,\n  moveListItemUp,\n  removeFirstListItem,\n  removeListItem,\n} from './transforms/index';\n\nconst selectionIsNotInAListHandler = <V extends Value>(\n  editor: PlateEditor<V>\n): boolean => {\n  const pointAfterSelection = getPointAfter(\n    editor,\n    editor.selection!.focus.path\n  );\n\n  if (pointAfterSelection) {\n    // there is a block after it\n    const nextSiblingListRes = getListItemEntry(editor, {\n      at: pointAfterSelection,\n    });\n\n    if (nextSiblingListRes) {\n      // the next block is a list\n      const { listItem } = nextSiblingListRes;\n      const parentBlockEntity = getBlockAbove(editor, {\n        at: editor.selection!.anchor,\n      });\n\n      if (!getEditorString(editor, parentBlockEntity![1])) {\n        // the selected block is empty\n        removeNodes(editor);\n\n        return true;\n      }\n\n      if (hasListChild(editor, listItem[0])) {\n        // the next block has children, so we have to move the first item up\n        const sublistRes = getListItemEntry(editor, {\n          at: [...listItem[1], 1, 0, 0],\n        });\n\n        moveListItemUp(editor, sublistRes!);\n      }\n    }\n  }\n\n  return false;\n};\n\nconst selectionIsInAListHandler = <V extends Value>(\n  editor: PlateEditor<V>,\n  res: { list: TElementEntry; listItem: TElementEntry },\n  defaultDelete: (unit: TextUnit) => void,\n  unit: 'character' | 'word' | 'line' | 'block'\n): boolean => {\n  const { listItem } = res;\n\n  // if it has no children\n  if (!hasListChild(editor, listItem[0])) {\n    const liType = getPluginType(editor, ELEMENT_LI);\n    const _nodes = getNodeEntries(editor, {\n      at: listItem[1],\n      mode: 'lowest',\n      match: (node, path) => {\n        if (path.length === 0) {\n          return false;\n        }\n\n        const isNodeLi = (node as TElement).type === liType;\n        const isSiblingOfNodeLi =\n          getNode<TElement>(editor, Path.next(path))?.type === liType;\n\n        return isNodeLi && isSiblingOfNodeLi;\n      },\n    });\n    const liWithSiblings = Array.from(_nodes, (entry) => entry[1])[0];\n\n    if (!liWithSiblings) {\n      // there are no more list item in the list\n      const pointAfterListItem = getPointAfter(editor, listItem[1]);\n\n      if (pointAfterListItem) {\n        // there is a block after it\n        const nextSiblingListRes = getListItemEntry(editor, {\n          at: pointAfterListItem,\n        });\n\n        if (nextSiblingListRes) {\n          // it is a list so we merge the lists\n          const listRoot = getListRoot(editor, listItem[1]);\n\n          moveListItemsToList(editor, {\n            fromList: nextSiblingListRes.list,\n            toList: listRoot,\n            deleteFromList: true,\n          });\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    const siblingListItem = getNodeEntry<TElement>(\n      editor,\n      Path.next(liWithSiblings)\n    );\n    if (!siblingListItem) return false;\n\n    const siblingList = getParentNode<TElement>(editor, siblingListItem[1]);\n\n    if (\n      siblingList &&\n      removeListItem(editor, {\n        list: siblingList,\n        listItem: siblingListItem,\n        reverse: false,\n      })\n    ) {\n      return true;\n    }\n\n    const pointAfterListItem = getPointAfter(editor, editor.selection!.focus);\n    if (\n      !pointAfterListItem ||\n      !isAcrossListItems({\n        ...editor,\n        selection: {\n          anchor: editor.selection!.anchor,\n          focus: pointAfterListItem,\n        },\n      })\n    ) {\n      return false;\n    }\n\n    // get closest lic ancestor of next selectable\n    const licType = getPluginType(editor, ELEMENT_LIC);\n    const _licNodes = getNodeEntries<TElement>(editor, {\n      at: pointAfterListItem.path,\n      mode: 'lowest',\n      match: (node) => node.type === licType,\n    });\n    const nextSelectableLic = [..._licNodes][0];\n\n    // let slate handle single child cases\n    if (nextSelectableLic[0].children.length < 2) return false;\n\n    // manually run default delete\n    defaultDelete(unit);\n\n    const leftoverListItem = getNodeEntry<TElement>(\n      editor,\n      Path.parent(nextSelectableLic[1])\n    )!;\n\n    if (leftoverListItem && leftoverListItem[0].children.length === 0) {\n      // remove the leftover empty list item\n      removeNodes(editor, { at: leftoverListItem[1] });\n    }\n\n    return true;\n  }\n\n  // if it has children\n  const nestedList = getNodeEntry<TElement>(\n    editor,\n    Path.next([...listItem[1], 0])\n  );\n  if (!nestedList) return false;\n\n  const nestedListItem = getChildren<TElement>(nestedList)[0];\n\n  if (\n    removeFirstListItem(editor, {\n      list: nestedList,\n      listItem: nestedListItem,\n    })\n  ) {\n    return true;\n  }\n\n  if (\n    removeListItem(editor, {\n      list: nestedList,\n      listItem: nestedListItem,\n    })\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const deleteForwardList = <V extends Value>(\n  editor: PlateEditor<V>,\n  defaultDelete: (unit: TextUnit) => void,\n  unit: TextUnit\n) => {\n  let skipDefaultDelete = false;\n\n  if (!editor?.selection) {\n    return skipDefaultDelete;\n  }\n\n  if (!isSelectionAtBlockEnd(editor)) {\n    return skipDefaultDelete;\n  }\n\n  withoutNormalizing(editor, () => {\n    const res = getListItemEntry(editor, {});\n\n    if (!res) {\n      skipDefaultDelete = selectionIsNotInAListHandler(editor);\n      return;\n    }\n\n    skipDefaultDelete = selectionIsInAListHandler(\n      editor,\n      res,\n      defaultDelete,\n      unit\n    );\n  });\n\n  return skipDefaultDelete;\n};\n","import {\n  createPathRef,\n  deleteMerge,\n  getAboveNode,\n  getEndPoint,\n  getParentNode,\n  getPluginType,\n  getStartPoint,\n  PlateEditor,\n  removeNodes,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\nimport { Range } from 'slate';\n\nimport { ELEMENT_LI } from './createListPlugin';\nimport { getHighestEmptyList } from './queries/getHighestEmptyList';\nimport { hasListChild } from './queries/hasListChild';\nimport { isAcrossListItems } from './queries/isAcrossListItems';\n\nconst getLiStart = <V extends Value>(editor: PlateEditor<V>) => {\n  const start = getStartPoint(editor, editor.selection as Range);\n  return getAboveNode(editor, {\n    at: start,\n    match: { type: getPluginType(editor, ELEMENT_LI) },\n  });\n};\n\nexport const deleteFragmentList = <V extends Value>(editor: PlateEditor<V>) => {\n  let deleted = false;\n\n  withoutNormalizing(editor, () => {\n    // Selection should be across list items\n    if (!isAcrossListItems(editor)) return;\n\n    /**\n     * Check if the end li can be deleted (if it has no sublist).\n     * Store the path ref to delete it after deleteMerge.\n     */\n    const end = getEndPoint(editor, editor.selection as Range);\n    const liEnd = getAboveNode(editor, {\n      at: end,\n      match: { type: getPluginType(editor, ELEMENT_LI) },\n    });\n    const liEndCanBeDeleted = liEnd && !hasListChild(editor, liEnd[0]);\n    const liEndPathRef = liEndCanBeDeleted\n      ? createPathRef(editor, liEnd![1])\n      : undefined;\n\n    // use deleteFragment when selection wrapped around list\n    if (!getLiStart(editor) || !liEnd) {\n      deleted = false;\n      return;\n    }\n\n    /**\n     * Delete fragment and move end block children to start block\n     */\n    deleteMerge(editor);\n\n    const liStart = getLiStart(editor);\n\n    if (liEndPathRef) {\n      const liEndPath = liEndPathRef.unref()!;\n\n      const listStart = liStart && getParentNode(editor, liStart[1]);\n\n      const deletePath = getHighestEmptyList(editor, {\n        liPath: liEndPath,\n        diffListPath: listStart?.[1],\n      });\n\n      if (deletePath) {\n        removeNodes(editor, { at: deletePath });\n      }\n\n      deleted = true;\n    }\n  });\n\n  return deleted;\n};\n","import {\n  ELEMENT_DEFAULT,\n  getPluginType,\n  isBlockAboveEmpty,\n  mockPlugin,\n  PlateEditor,\n  Value,\n} from '@udecode/plate-common';\nimport {\n  onKeyDownResetNode,\n  ResetNodePlugin,\n  SIMULATE_BACKSPACE,\n} from '@udecode/plate-reset-node';\n\nimport { ELEMENT_LI } from './createListPlugin';\nimport { getListItemEntry } from './queries/getListItemEntry';\nimport { insertListItem } from './transforms/insertListItem';\nimport { moveListItemUp } from './transforms/moveListItemUp';\nimport { unwrapList } from './transforms/unwrapList';\n\nexport const insertBreakList = <V extends Value>(editor: PlateEditor<V>) => {\n  if (!editor.selection) return;\n\n  const res = getListItemEntry(editor, {});\n  let moved: boolean | undefined;\n\n  // If selection is in a li\n  if (res) {\n    const { list, listItem } = res;\n\n    // If selected li is empty, move it up.\n    if (isBlockAboveEmpty(editor)) {\n      moved = moveListItemUp(editor, {\n        list,\n        listItem,\n      });\n\n      if (moved) return true;\n    }\n  }\n\n  const didReset = onKeyDownResetNode(\n    editor as any,\n    mockPlugin<ResetNodePlugin>({\n      options: {\n        rules: [\n          {\n            types: [getPluginType(editor, ELEMENT_LI)],\n            defaultType: getPluginType(editor, ELEMENT_DEFAULT),\n            predicate: () => !moved && isBlockAboveEmpty(editor),\n            onReset: (_editor) => unwrapList(_editor),\n          },\n        ],\n      },\n    })\n  )(SIMULATE_BACKSPACE as any);\n  if (didReset) return true;\n\n  /**\n   * If selection is in li > p, insert li.\n   */\n  if (!moved) {\n    const inserted = insertListItem(editor);\n    if (inserted) return true;\n  }\n};\n","import {\n  findNode,\n  getCommonNode,\n  getNode,\n  getNodes,\n  getNodeString,\n  getNodeTexts,\n  getPlugin,\n  insertElements,\n  isElement,\n  PlateEditor,\n  removeNodes,\n  TAncestor,\n  TAncestorEntry,\n  TDescendant,\n  TDescendantEntry,\n  TElement,\n  TElementEntry,\n  TText,\n  Value,\n  WithPlatePlugin,\n} from '@udecode/plate-common';\nimport { Path } from 'slate';\n\nimport { ELEMENT_LI } from './createListPlugin';\nimport {\n  getListItemContentType,\n  getListItemType,\n  isListRoot,\n} from './queries/index';\n\nexport const insertFragmentList = <V extends Value>(editor: PlateEditor<V>) => {\n  const { insertFragment } = editor;\n\n  const listItemPlugin = getPlugin<{}, V>(editor, ELEMENT_LI);\n  const listItemType = getListItemType(editor);\n  const listItemContentType = getListItemContentType(editor);\n\n  const getFirstAncestorOfType = (\n    root: TDescendant,\n    entry: TDescendantEntry,\n    { type }: WithPlatePlugin\n  ): TAncestorEntry => {\n    let ancestor: Path = Path.parent(entry[1]);\n    while (getNode<TElement>(root, ancestor)!.type !== type) {\n      ancestor = Path.parent(ancestor);\n    }\n\n    return [getNode<TAncestor>(root, ancestor)!, ancestor];\n  };\n\n  const findListItemsWithContent = (first: TDescendant): TDescendant[] => {\n    let prev = null;\n    let node = first;\n    while (\n      isListRoot(editor, node) ||\n      (node.type === listItemType &&\n        (node.children as TElement[])[0].type !== listItemContentType)\n    ) {\n      prev = node;\n      [node] = node.children as TDescendant[];\n    }\n\n    return prev ? (prev.children as TDescendant[]) : [node];\n  };\n\n  /**\n   * Removes the \"empty\" leading lis. Empty in this context means lis only with other lis as children.\n   *\n   * @returns If argument is not a list root, returns it, otherwise returns ul[] or li[].\n   */\n  const trimList = (listRoot: TDescendant): TElement[] => {\n    if (!isListRoot(editor, listRoot)) {\n      return [listRoot as TElement];\n    }\n\n    const _texts = getNodeTexts(listRoot);\n    const textEntries = Array.from(_texts);\n\n    const commonAncestorEntry = textEntries.reduce(\n      (commonAncestor, textEntry) =>\n        Path.isAncestor(commonAncestor[1], textEntry[1])\n          ? commonAncestor\n          : (getCommonNode(listRoot, textEntry[1], commonAncestor[1]) as any),\n      // any list item would do, we grab the first one\n      getFirstAncestorOfType(listRoot, textEntries[0], listItemPlugin as any)\n    );\n\n    const [first, ...rest] = isListRoot(\n      editor,\n      commonAncestorEntry[0] as TDescendant\n    )\n      ? (commonAncestorEntry[0] as any).children\n      : [commonAncestorEntry[0]];\n    return [...findListItemsWithContent(first), ...rest];\n  };\n\n  const wrapNodeIntoListItem = (node: TDescendant): TElement => {\n    return node.type === listItemType\n      ? (node as TElement)\n      : ({\n          type: listItemType,\n          children: [node],\n        } as TElement);\n  };\n\n  /**\n   * Checks if the fragment only consists of a single LIC in which case it is considered the user's intention was to copy a text, not a list\n   */\n  const isSingleLic = (fragment: TDescendant[]) => {\n    const isFragmentOnlyListRoot =\n      fragment.length === 1 && isListRoot(editor, fragment[0]);\n\n    return (\n      isFragmentOnlyListRoot &&\n      [...getNodes({ children: fragment } as any)]\n        .filter((entry): entry is TElementEntry => isElement(entry[0]))\n        .filter(([node]) => node.type === listItemContentType).length === 1\n    );\n  };\n\n  const getTextAndListItemNodes = (\n    fragment: TDescendant[],\n    liEntry: TElementEntry,\n    licEntry: TElementEntry\n  ) => {\n    const [, liPath] = liEntry;\n    const [licNode, licPath] = licEntry;\n    const isEmptyNode = !getNodeString(licNode);\n    const [first, ...rest] = fragment\n      .flatMap(trimList)\n      .map(wrapNodeIntoListItem);\n    let textNode: TText;\n    let listItemNodes: TElement[];\n    if (isListRoot(editor, fragment[0])) {\n      if (isSingleLic(fragment)) {\n        textNode = first as any;\n        listItemNodes = rest as TElement[];\n      } else if (isEmptyNode) {\n        // FIXME: is there a more direct way to set this?\n        const li = getNode(editor, liPath);\n        const [, ...currentSublists] = li!.children as TElement[];\n        const [newLic, ...newSublists] = first.children as TElement[];\n        insertElements(editor, newLic, {\n          at: Path.next(licPath),\n          select: true,\n        });\n        removeNodes(editor, {\n          at: licPath,\n        });\n        if (newSublists?.length) {\n          if (currentSublists?.length) {\n            // TODO: any better way to compile the path where the LIs of the newly inserted element will be inserted?\n            const path = [...liPath, 1, 0];\n            insertElements(editor, newSublists[0].children as TElement[], {\n              at: path,\n              select: true,\n            });\n          } else {\n            insertElements(editor, newSublists, {\n              at: Path.next(licPath),\n              select: true,\n            });\n          }\n        }\n\n        textNode = { text: '' };\n        listItemNodes = rest as TElement[];\n      } else {\n        textNode = { text: '' };\n        listItemNodes = [first as TElement, ...(rest as TElement[])];\n      }\n    } else {\n      textNode = first as any;\n      listItemNodes = rest as TElement[];\n    }\n\n    return { textNode, listItemNodes };\n  };\n\n  return (fragment: TDescendant[]) => {\n    let liEntry = findNode<TElement>(editor, {\n      match: { type: listItemType },\n      mode: 'lowest',\n    });\n    // not inserting into a list item, delegate to other plugins\n    if (!liEntry) {\n      return insertFragment(\n        isListRoot(editor, fragment[0]) ? [{ text: '' }, ...fragment] : fragment\n      );\n    }\n\n    // delete selection (if necessary) so that it can check if needs to insert into an empty block\n    insertFragment([{ text: '' }] as any);\n\n    // refetch to find the currently selected LI after the deletion above is performed\n    liEntry = findNode<TElement>(editor, {\n      match: { type: listItemType },\n      mode: 'lowest',\n    });\n\n    const licEntry = findNode<TElement>(editor, {\n      match: { type: listItemContentType },\n      mode: 'lowest',\n    });\n    if (!licEntry) {\n      return insertFragment(\n        isListRoot(editor, fragment[0]) ? [{ text: '' }, ...fragment] : fragment\n      );\n    }\n\n    const { textNode, listItemNodes } = getTextAndListItemNodes(\n      fragment,\n      liEntry!,\n      licEntry\n    );\n\n    insertFragment<TText>([textNode]); // insert text if needed\n\n    const [, liPath] = liEntry!;\n\n    return insertElements(editor, listItemNodes, {\n      at: Path.next(liPath),\n      select: true,\n    });\n  };\n};\n","import {\n  createPathRef,\n  getChildren,\n  getParentNode,\n  getPluginType,\n  insertEmptyElement,\n  isBlock,\n  match,\n  moveNodes,\n  PlateEditor,\n  removeNodes,\n  setElements,\n  TDescendant,\n  TElement,\n  TElementEntry,\n  TNodeEntry,\n  Value,\n} from '@udecode/plate-common';\nimport { Path, PathRef } from 'slate';\n\nimport { ELEMENT_LIC, ELEMENT_OL, ELEMENT_UL } from '../createListPlugin';\nimport { getListTypes } from '../queries/index';\nimport { moveListItemUp } from '../transforms/index';\nimport { ListPlugin } from '../types';\n\n/**\n * Recursively get all the:\n * - block children\n * - inline children except those at excludeDepth\n */\nexport const getDeepInlineChildren = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    children,\n  }: {\n    children: TNodeEntry<TDescendant>[];\n  }\n) => {\n  const inlineChildren: TNodeEntry<TDescendant>[] = [];\n\n  for (const child of children) {\n    if (isBlock(editor, child[0])) {\n      inlineChildren.push(\n        ...getDeepInlineChildren(editor, {\n          children: getChildren(child),\n        })\n      );\n    } else {\n      inlineChildren.push(child);\n    }\n  }\n\n  return inlineChildren;\n};\n\n/**\n * If the list item has no child: insert an empty list item container.\n * Else: move the children that are not valid to the list item container.\n */\nexport const normalizeListItem = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    listItem,\n    validLiChildrenTypes = [],\n  }: { listItem: TElementEntry } & ListPlugin\n) => {\n  let changed = false;\n\n  const allValidLiChildrenTypes = new Set([\n    getPluginType(editor, ELEMENT_UL),\n    getPluginType(editor, ELEMENT_OL),\n    getPluginType(editor, ELEMENT_LIC),\n    ...validLiChildrenTypes,\n  ]);\n\n  const [, liPath] = listItem;\n  const liChildren = getChildren<TElement>(listItem);\n\n  // Get invalid (type) li children path refs to be moved\n  const invalidLiChildrenPathRefs = liChildren\n    .filter(([child]) => !allValidLiChildrenTypes.has(child.type))\n    .map(([, childPath]) => createPathRef(editor, childPath));\n\n  const firstLiChild: TElementEntry | undefined = liChildren[0];\n  const [firstLiChildNode, firstLiChildPath] = firstLiChild ?? [];\n\n  // If li has no child or inline child, insert lic\n  if (!firstLiChild || !isBlock(editor, firstLiChildNode)) {\n    insertEmptyElement(editor, getPluginType(editor, ELEMENT_LIC), {\n      at: liPath.concat([0]),\n    });\n    return true;\n  }\n\n  // If first li child is a block but not lic, set it to lic\n  if (\n    isBlock(editor, firstLiChildNode) &&\n    !match(firstLiChildNode, [], {\n      type: getPluginType(editor, ELEMENT_LIC),\n    })\n  ) {\n    if (\n      match(firstLiChildNode, [], {\n        type: getListTypes(editor),\n      })\n    ) {\n      // the listItem has no lic so we move the children up a level\n      const parent = getParentNode(editor, listItem[1]);\n      const sublist = firstLiChild;\n      const children = getChildren<TElement>(firstLiChild).reverse();\n      children.forEach((c) => {\n        moveListItemUp(editor, {\n          list: sublist,\n          listItem: c,\n        });\n      });\n\n      removeNodes(editor, { at: [...parent![1], 0] });\n\n      return true;\n    }\n\n    // Allow block elements listed as valid li children types to be a first child instead of LIC\n    if (validLiChildrenTypes.includes(firstLiChildNode.type)) {\n      return true;\n    }\n\n    setElements(\n      editor,\n      {\n        type: getPluginType(editor, ELEMENT_LIC),\n      },\n      {\n        at: firstLiChildPath,\n      }\n    );\n\n    changed = true;\n  }\n\n  const licChildren = getChildren(firstLiChild);\n\n  if (licChildren.length > 0) {\n    const blockPathRefs: PathRef[] = [];\n    const inlineChildren: TNodeEntry[] = [];\n\n    // Check that lic has no block children\n    for (const licChild of licChildren) {\n      if (!isBlock(editor, licChild[0])) {\n        break;\n      }\n\n      blockPathRefs.push(createPathRef(editor, licChild[1]));\n\n      inlineChildren.push(\n        ...getDeepInlineChildren(editor, {\n          children: getChildren(licChild),\n        })\n      );\n    }\n\n    const to = Path.next(licChildren.at(-1)![1]);\n\n    // Move lic nested inline children to its children\n    inlineChildren.reverse().forEach(([, path]) => {\n      moveNodes(editor, {\n        at: path,\n        to,\n      });\n    });\n\n    // Remove lic block children\n    blockPathRefs.forEach((pathRef) => {\n      const path = pathRef.unref();\n\n      path &&\n        removeNodes(editor, {\n          at: path,\n        });\n    });\n\n    if (blockPathRefs.length > 0) {\n      changed = true;\n    }\n  }\n\n  if (changed) return true;\n\n  // Ensure that any text nodes under the list are inside the list item container\n  invalidLiChildrenPathRefs.reverse().forEach((ref) => {\n    const path = ref.unref();\n\n    path &&\n      moveNodes(editor, {\n        at: path,\n        to: firstLiChildPath.concat([0]),\n      });\n  });\n\n  return invalidLiChildrenPathRefs.length > 0;\n};\n","import {\n  getNodeEntry,\n  getParentNode,\n  match,\n  moveNodes,\n  PlateEditor,\n  TElement,\n  TElementEntry,\n  Value,\n} from '@udecode/plate-common';\nimport { Path } from 'slate';\n\nimport { getListTypes } from '../queries/index';\n\n// When pasting from e.g. Google Docs, the structure of nested lists like \"ul -> ul\"\n// should be normalized to \"ul -> li -> lic + ul\".\n// In other words, a nested list as a direct children of a list should be moved into a previous list item sibling\nexport const normalizeNestedList = <V extends Value>(\n  editor: PlateEditor<V>,\n  { nestedListItem }: { nestedListItem: TElementEntry }\n) => {\n  const [, path] = nestedListItem;\n\n  const parentNode = getParentNode(editor, path);\n  const hasParentList =\n    parentNode && match(parentNode[0], [], { type: getListTypes(editor) });\n  if (!hasParentList) {\n    return false;\n  }\n\n  let previousListItemPath: Path;\n  try {\n    previousListItemPath = Path.previous(path);\n  } catch (error) {\n    return false;\n  }\n\n  // Previous sibling is the new parent\n  const previousSiblingItem = getNodeEntry<TElement>(\n    editor,\n    previousListItemPath\n  );\n\n  if (previousSiblingItem) {\n    const [, previousPath] = previousSiblingItem;\n    const newPath = previousPath.concat([1]);\n\n    // Move the current item to the sublist\n    moveNodes(editor, {\n      at: path,\n      to: newPath,\n    });\n\n    return true;\n  }\n};\n","import {\n  ELEMENT_DEFAULT,\n  getChildren,\n  getNode,\n  getParentNode,\n  getPluginType,\n  getPreviousPath,\n  isElement,\n  match,\n  PlateEditor,\n  removeNodes,\n  setElements,\n  TElement,\n  TNodeEntry,\n  Value,\n  wrapNodes,\n} from '@udecode/plate-common';\nimport { Path } from 'slate';\n\nimport { ELEMENT_LI, ELEMENT_LIC } from '../createListPlugin';\nimport { getListTypes, isListRoot } from '../queries/index';\nimport { moveListItemsToList } from '../transforms/index';\nimport { ListPlugin } from '../types';\nimport { normalizeListItem } from './normalizeListItem';\nimport { normalizeNestedList } from './normalizeNestedList';\n\n/**\n * Normalize list node to force the ul>li>p+ul structure.\n */\nexport const normalizeList = <V extends Value>(\n  editor: PlateEditor<V>,\n  { validLiChildrenTypes }: ListPlugin\n) => {\n  const { normalizeNode } = editor;\n  const liType = getPluginType(editor, ELEMENT_LI);\n  const licType = getPluginType(editor, ELEMENT_LIC);\n  const defaultType = getPluginType(editor, ELEMENT_DEFAULT);\n\n  return ([node, path]: TNodeEntry) => {\n    if (!isElement(node)) {\n      return normalizeNode([node, path]);\n    }\n\n    if (isListRoot(editor, node)) {\n      const nonLiChild = getChildren([node, path]).find(\n        ([child]) => child.type !== liType\n      );\n\n      if (nonLiChild) {\n        return wrapNodes<TElement>(\n          editor,\n          { type: liType, children: [] },\n          { at: nonLiChild[1] }\n        );\n      }\n    }\n\n    // remove empty list\n    if (match(node, [], { type: getListTypes(editor) })) {\n      if (\n        node.children.length === 0 ||\n        !node.children.some((item) => item.type === liType)\n      ) {\n        return removeNodes(editor, { at: path });\n      }\n\n      const nextPath = Path.next(path);\n      const nextNode = getNode<TElement>(editor, nextPath);\n\n      // Has a list afterwards with the same type\n      if (nextNode?.type === node.type) {\n        moveListItemsToList(editor, {\n          fromList: [nextNode, nextPath],\n          toList: [node, path],\n          deleteFromList: true,\n        });\n      }\n\n      const prevPath = getPreviousPath(path) as Path;\n      const prevNode = getNode<TElement>(editor, prevPath);\n\n      // Has a list before with the same type\n      if (prevNode?.type === node.type) {\n        editor.normalizeNode([prevNode, prevPath]);\n\n        // early return since this node will no longer exists\n        return;\n      }\n\n      if (normalizeNestedList(editor, { nestedListItem: [node, path] })) {\n        return;\n      }\n    }\n\n    if (\n      node.type === getPluginType(editor, ELEMENT_LI) &&\n      normalizeListItem(editor, {\n        listItem: [node, path],\n        validLiChildrenTypes,\n      })\n    ) {\n      return;\n    }\n\n    // LIC should have LI parent. If not, set LIC to DEFAULT type.\n    if (\n      node.type === licType &&\n      licType !== defaultType &&\n      getParentNode(editor, path)?.[0].type !== liType\n    ) {\n      setElements(editor, { type: defaultType }, { at: path });\n      return;\n    }\n\n    normalizeNode([node, path]);\n  };\n};\n","import { PlateEditor, Value, WithPlatePlugin } from '@udecode/plate-common';\n\nimport { deleteBackwardList } from './deleteBackwardList';\nimport { deleteForwardList } from './deleteForwardList';\nimport { deleteFragmentList } from './deleteFragmentList';\nimport { insertBreakList } from './insertBreakList';\nimport { insertFragmentList } from './insertFragmentList';\nimport { normalizeList } from './normalizers/index';\nimport { ListPlugin } from './types';\n\nexport const withList = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  { options: { validLiChildrenTypes } }: WithPlatePlugin<ListPlugin, V, E>\n) => {\n  const { insertBreak, deleteBackward, deleteForward, deleteFragment } = editor;\n\n  editor.insertBreak = () => {\n    if (insertBreakList(editor)) return;\n\n    insertBreak();\n  };\n\n  editor.deleteBackward = (unit) => {\n    if (deleteBackwardList(editor, unit)) return;\n\n    deleteBackward(unit);\n  };\n\n  editor.deleteForward = (unit) => {\n    if (deleteForwardList(editor, deleteForward, unit)) return;\n\n    deleteForward(unit);\n  };\n\n  editor.deleteFragment = (direction) => {\n    if (deleteFragmentList(editor)) return;\n\n    deleteFragment(direction);\n  };\n\n  editor.insertFragment = insertFragmentList(editor);\n\n  editor.normalizeNode = normalizeList(editor, { validLiChildrenTypes });\n\n  return editor;\n};\n","import {\n  createPluginFactory,\n  KEY_DESERIALIZE_HTML,\n  PlatePlugin,\n  someNode,\n} from '@udecode/plate-common';\n\nimport { onKeyDownList } from './onKeyDownList';\nimport { ListPlugin } from './types';\nimport { withList } from './withList';\n\nexport const ELEMENT_UL = 'ul';\nexport const ELEMENT_OL = 'ol';\nexport const ELEMENT_LI = 'li';\nexport const ELEMENT_LIC = 'lic';\n\n/**\n * Enables support for bulleted, numbered and to-do lists.\n */\nexport const createListPlugin = createPluginFactory({\n  key: 'list',\n  plugins: [\n    {\n      key: ELEMENT_UL,\n      isElement: true,\n      handlers: {\n        onKeyDown: onKeyDownList,\n      },\n      withOverrides: withList,\n      deserializeHtml: {\n        rules: [\n          {\n            validNodeName: 'UL',\n          },\n        ],\n      },\n    } as PlatePlugin<ListPlugin>,\n    {\n      key: ELEMENT_OL,\n      isElement: true,\n      handlers: {\n        onKeyDown: onKeyDownList,\n      },\n      deserializeHtml: { rules: [{ validNodeName: 'OL' }] },\n    } as PlatePlugin<ListPlugin>,\n    {\n      key: ELEMENT_LI,\n      isElement: true,\n      deserializeHtml: { rules: [{ validNodeName: 'LI' }] },\n      then: (editor, { type }) => ({\n        inject: {\n          pluginsByKey: {\n            [KEY_DESERIALIZE_HTML]: {\n              editor: {\n                insertData: {\n                  preInsert: () => {\n                    return someNode(editor, { match: { type } });\n                  },\n                },\n              },\n            },\n          },\n        },\n      }),\n    },\n    {\n      key: ELEMENT_LIC,\n      isElement: true,\n    },\n  ],\n});\n","import {\n  focusEditor,\n  getPluginType,\n  someNode,\n  usePlateEditorRef,\n  usePlateEditorState,\n} from '@udecode/plate-common';\n\nimport { ELEMENT_UL, toggleList } from '../index';\n\nexport const useListToolbarButtonState = ({ nodeType = ELEMENT_UL } = {}) => {\n  const editor = usePlateEditorState();\n  const pressed =\n    !!editor?.selection &&\n    someNode(editor, { match: { type: getPluginType(editor, nodeType) } });\n\n  return {\n    pressed,\n    nodeType,\n  };\n};\n\nexport const useListToolbarButton = (\n  state: ReturnType<typeof useListToolbarButtonState>\n) => {\n  const editor = usePlateEditorRef();\n\n  return {\n    props: {\n      pressed: state.pressed,\n      onClick: (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        toggleList(editor, { type: state.nodeType });\n        focusEditor(editor);\n      },\n    },\n  };\n};\n","import {\n  findNodePath,\n  setNodes,\n  usePlateEditorRef,\n} from '@udecode/plate-common';\nimport { useReadOnly } from 'slate-react';\n\nimport { TTodoListItemElement } from '../index';\n\nexport const useTodoListElementState = ({\n  element,\n}: {\n  element: TTodoListItemElement;\n}) => {\n  const editor = usePlateEditorRef();\n  const { checked } = element;\n  const readOnly = useReadOnly();\n\n  return {\n    checked,\n    readOnly,\n    element,\n    editor,\n  };\n};\n\nexport const useTodoListElement = (\n  state: ReturnType<typeof useTodoListElementState>\n) => {\n  const { checked, readOnly, element } = state;\n  const editor = usePlateEditorRef();\n\n  return {\n    checkboxProps: {\n      checked: !!checked,\n      onCheckedChange: (value: boolean) => {\n        if (readOnly) return;\n        const path = findNodePath(editor, element);\n        if (!path) return;\n\n        setNodes<TTodoListItemElement>(\n          editor,\n          { checked: value },\n          {\n            at: path,\n          }\n        );\n      },\n    },\n  };\n};\n"],"names":["isArray","isListNested","editor","listPath","_getParentNode","listParentNode","getParentNode","type","getPluginType","ELEMENT_LI","getUnorderedListType","ELEMENT_UL","getOrderedListType","ELEMENT_OL","getListTypes","getListItemType","getListItemContentType","ELEMENT_LIC","getHighestEmptyList","diffListPath","liPath","list","getAboveNode","at","match","listNode","Path","equals","children","length","liParent","getListItemEntry","selection","liType","_at","Range","isRange","isCollapsed","focus","path","anchor","node","getNode","listItem","getListRoot","parentList","_getListRoot","parentListPath","insertTodoListItem","inheritCheckStateOnLineStartBreak","inheritCheckStateOnLineEndBreak","todoType","ELEMENT_TODO_LI","todoEntry","todo","paragraphPath","success","withoutNormalizing","deleteText","isStart","isStartPoint","isEnd","isBlockTextEmptyAfterSelection","nextParagraphPath","next","insertElements","checked","text","marks","getMarks","select","splitNodes","insertBreakTodoList","options","res","getTodoListItemEntry","inserted","withTodoList","insertBreak","createTodoListPlugin","createPluginFactory","key","isElement","withOverrides","handlers","onKeyDown","onKeyDownToggleElement","hotkey","hasListChild","some","n","isAcrossListItems","isAcrossBlocks","isRangeAcrossBlocks","someNode","isListRoot","includes","someList","_getListItemEntry","_getListItemEntry$lis","moveListItemDown","moved","listItemPath","previousListItemPath","previous","error","previousSiblingItem","getNodeEntry","previousNode","previousPath","sublist","find","newPath","concat","wrapNodes","moveNodes","to","moveListItemsToList","fromList","fromListItem","fromStartIndex","_to","toList","toListIndex","deleteFromList","fromListPath","fromListItemSublist","findDescendant","lastChildPath","getLastChildPath","moveChildren","unwrapList","ancestorListTypeCheck","commonNode","getCommonNode","licEntry","getBlockAbove","setElements","ELEMENT_DEFAULT","unwrapNodes","split","moveListItemUp","move","liNode","toListPath","condA","condB","isLastChild","toListNode","liParentPath","movedUpLiPath","removeFirstListItem","moveListItems","increase","_editor$selection","undefined","enableResetOnShiftTab","_nodes","getNodeEntries","lics","Array","from","highestLicPaths","highestLicPathRefs","forEach","lic","licPath","parent","isAncestor","highestLiPath","push","createPathRef","licPathRefsToMove","reverse","licPathRef","unref","_moved","indentListItems","insertListItem","licType","listItemEntry","listItemNode","nextListItemPath","collapseSelection","edge","moveListItemSublistItemsToListItemSublist","toListItem","start","fromListItemPath","toListItemPath","fromListItemSublistPath","toListItemSublist","fromListNode","fromListType","toListItemSublistPath","moveListSiblingsAfterCursor","offset","listEntry","isParent","removeListItem","isExpanded","previousLiPath","getPreviousPath","previousLi","tempLiPath","tempLi","tempLiPathRef","deleteMerge","removeNodes","toggleList","pluginKey","validLiChildrenTypes","getPluginOptions","mode","nodes","blockAbove","startPoint","endPoint","edges","commonEntry","startList","findNode","endList","end","rangeLength","Math","min","rootPathLength","filter","_n","unindentListItems","onKeyDownList","e","defaultPrevented","isTab","Hotkeys","isUntab","workRange","isBackward","unHungRange","unhangRange","listSelected","preventDefault","hotkeys","_castArray","_hotkey","isHotkey","deleteBackwardList","unit","isSelectionAtBlockStart","isFirstChild","onKeyDownResetNode","mockPlugin","rules","types","defaultType","predicate","onReset","SIMULATE_BACKSPACE","pointBeforeListItem","getPointBefore","currentLic","hasMultipleChildren","_licNodes","leftoverListItem","selectionIsNotInAListHandler","pointAfterSelection","getPointAfter","nextSiblingListRes","parentBlockEntity","getEditorString","sublistRes","selectionIsInAListHandler","defaultDelete","_getNode","isNodeLi","isSiblingOfNodeLi","liWithSiblings","entry","pointAfterListItem","listRoot","siblingListItem","siblingList","nextSelectableLic","nestedList","nestedListItem","getChildren","deleteForwardList","skipDefaultDelete","isSelectionAtBlockEnd","getLiStart","getStartPoint","deleteFragmentList","deleted","getEndPoint","liEnd","liEndCanBeDeleted","liEndPathRef","liStart","liEndPath","listStart","deletePath","insertBreakList","isBlockAboveEmpty","didReset","_editor","insertFragmentList","insertFragment","listItemPlugin","getPlugin","listItemType","listItemContentType","getFirstAncestorOfType","root","ancestor","findListItemsWithContent","first","prev","trimList","_texts","getNodeTexts","textEntries","commonAncestorEntry","reduce","commonAncestor","textEntry","rest","wrapNodeIntoListItem","isSingleLic","fragment","isFragmentOnlyListRoot","getNodes","getTextAndListItemNodes","liEntry","licNode","isEmptyNode","getNodeString","flatMap","map","textNode","listItemNodes","li","currentSublists","newLic","newSublists","getDeepInlineChildren","inlineChildren","child","isBlock","normalizeListItem","changed","allValidLiChildrenTypes","Set","liChildren","invalidLiChildrenPathRefs","has","childPath","firstLiChild","firstLiChildNode","firstLiChildPath","insertEmptyElement","c","licChildren","blockPathRefs","licChild","pathRef","ref","normalizeNestedList","parentNode","hasParentList","normalizeList","normalizeNode","nonLiChild","item","nextPath","nextNode","prevPath","prevNode","withList","deleteBackward","deleteForward","deleteFragment","direction","createListPlugin","plugins","deserializeHtml","validNodeName","then","inject","pluginsByKey","KEY_DESERIALIZE_HTML","insertData","preInsert","useListToolbarButtonState","nodeType","usePlateEditorState","pressed","useListToolbarButton","state","usePlateEditorRef","props","onClick","stopPropagation","focusEditor","useTodoListElementState","element","readOnly","useReadOnly","useTodoListElement","checkboxProps","onCheckedChange","value","findNodePath","setNodes"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;AAC5B;AACA,IAAA,SAAc,GAAG,OAAO;;ACvBxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,SAAS,GAAG;AACrB,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;AACzB,IAAI,OAAO,EAAE,CAAC;AACd,GAAG;AACH,EAAE,IAAI,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AAC3B,EAAE,OAAOA,SAAO,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC;AAC1C,CAAC;AACD;AACA,IAAA,WAAc,GAAG,SAAS;;;;;;;;;;;AC1C1B;AACA,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE;AAC7C,EAAE,KAAK,EAAE,IAAI;AACb,CAAC,CAAC,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,MAAM,GAAG,MAAM,OAAO,MAAM,IAAI,WAAW,IAAI,sBAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;AAC1G;AACA,IAAI,SAAS,GAAG;AAChB,EAAE,GAAG,EAAE,QAAQ;AACf,EAAE,OAAO,EAAE,SAAS;AACpB,EAAE,IAAI,EAAE,SAAS;AACjB,EAAE,KAAK,EAAE,UAAU;AACnB,CAAC,CAAC;AACF;AACA;AACA,IAAI,OAAO,GAAG,OAAO;AACrB,EAAE,GAAG,EAAE,GAAG;AACV,EAAE,KAAK,EAAE,OAAO;AAChB,EAAE,GAAG,EAAE,MAAM;AACb,EAAE,OAAO,EAAE,MAAM;AACjB,EAAE,GAAG,EAAE,SAAS;AAChB,EAAE,IAAI,EAAE,SAAS;AACjB,EAAE,GAAG,EAAE,QAAQ;AACf,EAAE,IAAI,EAAE,WAAW;AACnB,EAAE,GAAG,EAAE,QAAQ;AACf,EAAE,GAAG,EAAE,QAAQ;AACf,EAAE,IAAI,EAAE,WAAW;AACnB,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,MAAM,GAAG,SAAS;AACpC,EAAE,GAAG,EAAE,KAAK;AACZ,EAAE,MAAM,EAAE,KAAK;AACf,EAAE,MAAM,EAAE,OAAO;AACjB,EAAE,KAAK,EAAE,YAAY;AACrB,EAAE,KAAK,EAAE,GAAG;AACZ,EAAE,QAAQ,EAAE,GAAG;AACf,EAAE,EAAE,EAAE,SAAS;AACf,EAAE,GAAG,EAAE,MAAM;AACb,EAAE,OAAO,EAAE,MAAM;AACjB,CAAC,CAAC,CAAC;AACH;AACA,IAAI,KAAK,GAAG;AACZ,EAAE,SAAS,EAAE,CAAC;AACd,EAAE,GAAG,EAAE,CAAC;AACR,EAAE,KAAK,EAAE,EAAE;AACX,EAAE,KAAK,EAAE,EAAE;AACX,EAAE,OAAO,EAAE,EAAE;AACb,EAAE,GAAG,EAAE,EAAE;AACT,EAAE,KAAK,EAAE,EAAE;AACX,EAAE,QAAQ,EAAE,EAAE;AACd,EAAE,MAAM,EAAE,EAAE;AACZ,EAAE,GAAG,EAAE,EAAE;AACT,EAAE,MAAM,EAAE,EAAE;AACZ,EAAE,QAAQ,EAAE,EAAE;AACd,EAAE,GAAG,EAAE,EAAE;AACT,EAAE,IAAI,EAAE,EAAE;AACV,EAAE,SAAS,EAAE,EAAE;AACf,EAAE,OAAO,EAAE,EAAE;AACb,EAAE,UAAU,EAAE,EAAE;AAChB,EAAE,SAAS,EAAE,EAAE;AACf,EAAE,MAAM,EAAE,EAAE;AACZ,EAAE,MAAM,EAAE,EAAE;AACZ,EAAE,IAAI,EAAE,EAAE;AACV,EAAE,OAAO,EAAE,GAAG;AACd,EAAE,UAAU,EAAE,GAAG;AACjB,EAAE,GAAG,EAAE,GAAG;AACV,EAAE,GAAG,EAAE,GAAG;AACV,EAAE,GAAG,EAAE,GAAG;AACV,EAAE,GAAG,EAAE,GAAG;AACV,EAAE,GAAG,EAAE,GAAG;AACV,EAAE,GAAG,EAAE,GAAG;AACV,EAAE,GAAG,EAAE,GAAG;AACV,EAAE,GAAG,EAAE,GAAG;AACV,EAAE,IAAI,EAAE,GAAG;AACX,EAAE,GAAG,EAAE,GAAG;AACV,EAAE,IAAI,EAAE,GAAG;AACX,CAAC,CAAC;AACF;AACA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;AAC7B,EAAE,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;AAC3B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE;AAC1C,EAAE,IAAI,OAAO,IAAI,EAAE,OAAO,IAAI,OAAO,CAAC,EAAE;AACxC,IAAI,KAAK,GAAG,OAAO,CAAC;AACpB,IAAI,OAAO,GAAG,IAAI,CAAC;AACnB,GAAG;AACH;AACA,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;AAC9B,IAAI,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC;AACtB,GAAG;AACH;AACA,EAAE,IAAI,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,UAAU,MAAM,EAAE;AAC3C,IAAI,OAAO,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACxC,GAAG,CAAC,CAAC;AACL,EAAE,IAAI,KAAK,GAAG,SAAS,KAAK,CAAC,CAAC,EAAE;AAChC,IAAI,OAAO,KAAK,CAAC,IAAI,CAAC,UAAU,MAAM,EAAE;AACxC,MAAM,OAAO,aAAa,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACtC,KAAK,CAAC,CAAC;AACP,GAAG,CAAC;AACJ,EAAE,IAAI,GAAG,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;AACjD,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AACD;AACA,SAAS,YAAY,CAAC,MAAM,EAAE,KAAK,EAAE;AACrC,EAAE,OAAO,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AACjC,CAAC;AACD;AACA,SAAS,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE;AACpC,EAAE,OAAO,QAAQ,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,KAAK,CAAC,CAAC;AAClD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS,WAAW,CAAC,MAAM,EAAE,OAAO,EAAE;AACtC,EAAE,IAAI,KAAK,GAAG,OAAO,IAAI,OAAO,CAAC,KAAK,CAAC;AACvC,EAAE,IAAI,GAAG,GAAG,EAAE,CAAC;AACf;AACA;AACA,EAAE,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACxC,EAAE,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACjC,EAAE,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AAC7B;AACA;AACA;AACA,EAAE,KAAK,IAAI,CAAC,IAAI,SAAS,EAAE;AAC3B,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;AAC9B,GAAG;AACH;AACA,EAAE,IAAI,yBAAyB,GAAG,IAAI,CAAC;AACvC,EAAE,IAAI,iBAAiB,GAAG,KAAK,CAAC;AAChC,EAAE,IAAI,cAAc,GAAG,SAAS,CAAC;AACjC;AACA,EAAE,IAAI;AACN,IAAI,KAAK,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,EAAE,KAAK,EAAE,EAAE,yBAAyB,GAAG,CAAC,KAAK,GAAG,SAAS,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,EAAE,yBAAyB,GAAG,IAAI,EAAE;AAC7J,MAAM,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;AAC9B;AACA,MAAM,IAAI,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;AAC7D;AACA,MAAM,IAAI,QAAQ,EAAE;AACpB,QAAQ,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACnC,OAAO;AACP;AACA,MAAM,IAAI,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;AAClC,MAAM,IAAI,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;AACrC;AACA,MAAM,IAAI,MAAM,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE;AACrC,QAAQ,IAAI,KAAK,EAAE;AACnB,UAAU,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC;AACzB,SAAS,MAAM;AACf,UAAU,GAAG,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;AACvC,SAAS;AACT,OAAO;AACP;AACA,MAAM,IAAI,QAAQ,EAAE;AACpB,QAAQ,GAAG,CAAC,QAAQ,CAAC,GAAG,QAAQ,GAAG,IAAI,GAAG,IAAI,CAAC;AAC/C,OAAO;AACP,KAAK;AACL,GAAG,CAAC,OAAO,GAAG,EAAE;AAChB,IAAI,iBAAiB,GAAG,IAAI,CAAC;AAC7B,IAAI,cAAc,GAAG,GAAG,CAAC;AACzB,GAAG,SAAS;AACZ,IAAI,IAAI;AACR,MAAM,IAAI,CAAC,yBAAyB,IAAI,SAAS,CAAC,MAAM,EAAE;AAC1D,QAAQ,SAAS,CAAC,MAAM,EAAE,CAAC;AAC3B,OAAO;AACP,KAAK,SAAS;AACd,MAAM,IAAI,iBAAiB,EAAE;AAC7B,QAAQ,MAAM,cAAc,CAAC;AAC7B,OAAO;AACP,KAAK;AACL,GAAG;AACH;AACA,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS,aAAa,CAAC,MAAM,EAAE,KAAK,EAAE;AACtC,EAAE,KAAK,IAAI,GAAG,IAAI,MAAM,EAAE;AAC1B,IAAI,IAAI,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AAC/B,IAAI,IAAI,MAAM,GAAG,KAAK,CAAC,CAAC;AACxB;AACA,IAAI,IAAI,QAAQ,IAAI,IAAI,EAAE;AAC1B,MAAM,SAAS;AACf,KAAK;AACL;AACA,IAAI,IAAI,GAAG,KAAK,KAAK,IAAI,KAAK,CAAC,GAAG,IAAI,IAAI,EAAE;AAC5C,MAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;AACvC,KAAK,MAAM,IAAI,GAAG,KAAK,OAAO,EAAE;AAChC,MAAM,MAAM,GAAG,QAAQ,KAAK,EAAE,IAAI,KAAK,CAAC,KAAK,KAAK,EAAE,GAAG,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC;AACxE,KAAK,MAAM;AACX,MAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;AAC1B,KAAK;AACL;AACA,IAAI,IAAI,MAAM,IAAI,IAAI,IAAI,QAAQ,KAAK,KAAK,EAAE;AAC9C,MAAM,SAAS;AACf,KAAK;AACL;AACA,IAAI,IAAI,MAAM,KAAK,QAAQ,EAAE;AAC7B,MAAM,OAAO,KAAK,CAAC;AACnB,KAAK;AACL,GAAG;AACH;AACA,EAAE,OAAO,IAAI,CAAC;AACd,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS,SAAS,CAAC,IAAI,EAAE;AACzB,EAAE,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;AACzB,EAAE,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AAC7D,EAAE,OAAO,IAAI,CAAC;AACd,CAAC;AACD;AACA,SAAS,SAAS,CAAC,IAAI,EAAE;AACzB,EAAE,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;AAC5B,EAAE,IAAI,GAAG,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC;AACjC,EAAE,OAAO,IAAI,CAAC;AACd,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAe,CAAA,OAAA,GAAG,QAAQ,CAAC;AAC3B,OAAgB,CAAA,QAAA,GAAG,QAAQ,CAAC;AAC5B,OAAoB,CAAA,YAAA,GAAG,YAAY,CAAC;AACpC,OAAmB,CAAA,WAAA,GAAG,WAAW,CAAC;AAClC,OAAmB,CAAA,WAAA,GAAG,WAAW,CAAC;AAClC,OAAqB,CAAA,aAAA,GAAG,aAAa,CAAC;AACtC,OAAiB,CAAA,SAAA,GAAG,SAAS,CAAC;AAC9B,OAAA,CAAA,SAAiB,GAAG,SAAS,CAAA;;;;;;;;;;;;AC3O7B;AACA;AACA;MACaC,YAAY,GAAGA,CAC1BC,MAAsB,EACtBC,QAAc,KACX;AAAA,EAAA,IAAAC,cAAA,CAAA;AACH,EAAA,MAAMC,cAAc,GAAAD,CAAAA,cAAA,GAAGE,aAAa,CAAWJ,MAAM,EAAEC,QAAQ,CAAC,cAAAC,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAzCA,cAAA,CAA4C,CAAC,CAAC,CAAA;AAErE,EAAA,OAAO,CAAAC,cAAc,KAAdA,IAAAA,IAAAA,cAAc,uBAAdA,cAAc,CAAEE,IAAI,MAAKC,aAAa,CAACN,MAAM,EAAEO,UAAU,CAAC,CAAA;AACnE;;ACZaC,MAAAA,oBAAoB,GAC/BR,MAAsB,IACnB;AACH,EAAA,OAAOM,aAAa,CAACN,MAAM,EAAES,UAAU,CAAC,CAAA;AAC1C,EAAC;AAEYC,MAAAA,kBAAkB,GAAqBV,MAAsB,IAAK;AAC7E,EAAA,OAAOM,aAAa,CAACN,MAAM,EAAEW,UAAU,CAAC,CAAA;AAC1C,EAAC;AAEYC,MAAAA,YAAY,GAAqBZ,MAAsB,IAAK;EACvE,OAAO,CAACU,kBAAkB,CAACV,MAAM,CAAC,EAAEQ,oBAAoB,CAACR,MAAM,CAAC,CAAC,CAAA;AACnE,EAAC;AAEYa,MAAAA,eAAe,GAAqBb,MAAsB,IAAK;AAC1E,EAAA,OAAOM,aAAa,CAACN,MAAM,EAAEO,UAAU,CAAC,CAAA;AAC1C,EAAC;AAEYO,MAAAA,sBAAsB,GACjCd,MAAsB,IACnB;AACH,EAAA,OAAOM,aAAa,CAACN,MAAM,EAAEe,WAAW,CAAC,CAAA;AAC3C;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACaC,MAAAA,mBAAmB,GAAGA,CACjChB,MAAsB,EACtB;EACEiB,YAAY;AACZC,EAAAA,MAAAA;AAIF,CAAC,KACoB;AACrB,EAAA,MAAMC,IAAI,GAAGC,YAAY,CAACpB,MAAM,EAAE;AAChCqB,IAAAA,EAAE,EAAEH,MAAM;AACVI,IAAAA,KAAK,EAAE;MAAEjB,IAAI,EAAEO,YAAY,CAACZ,MAAM,CAAA;AAAE,KAAA;AACtC,GAAC,CAAC,CAAA;EACF,IAAI,CAACmB,IAAI,EAAE,OAAA;AACX,EAAA,MAAM,CAACI,QAAQ,EAAEtB,QAAQ,CAAC,GAAGkB,IAAI,CAAA;AAEjC,EAAA,IAAI,CAACF,YAAY,IAAI,CAACO,IAAI,CAACC,MAAM,CAACxB,QAAQ,EAAEgB,YAAY,CAAC,EAAE;AACzD,IAAA,IAAIM,QAAQ,CAACG,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;AAChC,MAAA,MAAMC,QAAQ,GAAGR,YAAY,CAACpB,MAAM,EAAE;AACpCqB,QAAAA,EAAE,EAAEpB,QAAQ;AACZqB,QAAAA,KAAK,EAAE;AAAEjB,UAAAA,IAAI,EAAEC,aAAa,CAACN,MAAM,EAAEO,UAAU,CAAA;AAAE,SAAA;AACnD,OAAC,CAAC,CAAA;AAEF,MAAA,IAAIqB,QAAQ,EAAE;QACZ,OACEZ,mBAAmB,CAAChB,MAAM,EAAE;AAAEkB,UAAAA,MAAM,EAAEU,QAAQ,CAAC,CAAC,CAAC;AAAEX,UAAAA,YAAAA;SAAc,CAAC,IAClEhB,QAAQ,CAAA;AAEZ,OAAA;AACF,KAAA;AACA,IAAA,OAAOiB,MAAM,CAAA;AACf,GAAA;AACF;;ACrCA;AACA;AACA;AACaW,MAAAA,gBAAgB,GAAGA,CAC9B7B,MAAsB,EACtB;EAAEqB,EAAE,GAAGrB,MAAM,CAAC8B,SAAAA;AAAoC,CAAC,GAAG,EAAE,KACS;AACjE,EAAA,MAAMC,MAAM,GAAGzB,aAAa,CAACN,MAAM,EAAEO,UAAU,CAAC,CAAA;AAEhD,EAAA,IAAIyB,GAAS,CAAA;AAEb,EAAA,IAAIC,KAAK,CAACC,OAAO,CAACb,EAAE,CAAC,IAAI,CAACc,WAAW,CAACd,EAAE,CAAC,EAAE;AACzCW,IAAAA,GAAG,GAAGX,EAAE,CAACe,KAAK,CAACC,IAAI,CAAA;GACpB,MAAM,IAAIJ,KAAK,CAACC,OAAO,CAACb,EAAE,CAAC,EAAE;AAC5BW,IAAAA,GAAG,GAAGX,EAAE,CAACiB,MAAM,CAACD,IAAI,CAAA;AACtB,GAAC,MAAM;AACLL,IAAAA,GAAG,GAAGX,EAAU,CAAA;AAClB,GAAA;AAEA,EAAA,IAAIW,GAAG,EAAE;AACP,IAAA,MAAMO,IAAI,GAAGC,OAAO,CAAWxC,MAAM,EAAEgC,GAAG,CAAC,CAAA;AAC3C,IAAA,IAAIO,IAAI,EAAE;AACR,MAAA,MAAME,QAAQ,GAAGrB,YAAY,CAAWpB,MAAM,EAAE;AAC9CqB,QAAAA,EAAE,EAAEW,GAAG;AACPV,QAAAA,KAAK,EAAE;AAAEjB,UAAAA,IAAI,EAAE0B,MAAAA;AAAO,SAAA;AACxB,OAAC,CAAC,CAAA;AAEF,MAAA,IAAIU,QAAQ,EAAE;QACZ,MAAMtB,IAAI,GAAGf,aAAa,CAAWJ,MAAM,EAAEyC,QAAQ,CAAC,CAAC,CAAC,CAAE,CAAA;QAE1D,OAAO;UAAEtB,IAAI;AAAEsB,UAAAA,QAAAA;SAAU,CAAA;AAC3B,OAAA;AACF,KAAA;AACF,GAAA;AACF;;ACrCA;AACA;AACA;AACO,MAAMC,WAAW,GAAGA,CACzB1C,MAAsB,EACtBqB,EAA+B,GAAGrB,MAAM,CAAC8B,SAAS,KACpB;EAC9B,IAAI,CAACT,EAAE,EAAE,OAAA;AAET,EAAA,MAAMsB,UAAU,GAAGvB,YAAY,CAAWpB,MAAM,EAAE;IAChDqB,EAAE;AACFC,IAAAA,KAAK,EAAE;AACLjB,MAAAA,IAAI,EAAE,CACJC,aAAa,CAACN,MAAM,EAAES,UAAU,CAAC,EACjCH,aAAa,CAACN,MAAM,EAAEW,UAAU,CAAC,CAAA;AAErC,KAAA;AACF,GAAC,CAAC,CAAA;AAEF,EAAA,IAAIgC,UAAU,EAAE;AAAA,IAAA,IAAAC,YAAA,CAAA;AACd,IAAA,MAAM,GAAGC,cAAc,CAAC,GAAGF,UAAU,CAAA;AAErC,IAAA,OAAA,CAAAC,YAAA,GAAOF,WAAW,CAAC1C,MAAM,EAAE6C,cAAc,CAAC,MAAAD,IAAAA,IAAAA,YAAA,KAAAA,KAAAA,CAAAA,GAAAA,YAAA,GAAID,UAAU,CAAA;AAC1D,GAAA;AACF;;ACjBA;AACA;AACA;AACA;AACaG,MAAAA,kBAAkB,GAAGA,CAChC9C,MAAsB,EACtB;AACE+C,EAAAA,iCAAiC,GAAG,KAAK;AACzCC,EAAAA,+BAA+B,GAAG,KAAA;AACpB,CAAC,KACL;AACZ,EAAA,MAAMC,QAAQ,GAAG3C,aAAa,CAACN,MAAM,EAAEkD,eAAe,CAAC,CAAA;AAEvD,EAAA,IAAI,CAAClD,MAAM,CAAC8B,SAAS,EAAE;AACrB,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;AAEA,EAAA,MAAMqB,SAAS,GAAG/B,YAAY,CAACpB,MAAM,EAAE;AAAEsB,IAAAA,KAAK,EAAE;AAAEjB,MAAAA,IAAI,EAAE4C,QAAAA;AAAS,KAAA;AAAE,GAAC,CAAC,CAAA;AACrE,EAAA,IAAI,CAACE,SAAS,EAAE,OAAO,KAAK,CAAA;AAC5B,EAAA,MAAM,CAACC,IAAI,EAAEC,aAAa,CAAC,GAAGF,SAAS,CAAA;EAEvC,IAAIG,OAAO,GAAG,KAAK,CAAA;EAEnBC,kBAAkB,CAACvD,MAAM,EAAE,MAAM;IAC/B,IAAI,CAACiC,KAAK,CAACE,WAAW,CAACnC,MAAM,CAAC8B,SAAU,CAAC,EAAE;MACzC0B,UAAU,CAACxD,MAAM,CAAC,CAAA;AACpB,KAAA;AAEA,IAAA,MAAMyD,OAAO,GAAGC,YAAY,CAC1B1D,MAAM,EACNA,MAAM,CAAC8B,SAAS,CAAEM,KAAK,EACvBiB,aACF,CAAC,CAAA;AACD,IAAA,MAAMM,KAAK,GAAGC,8BAA8B,CAAC5D,MAAM,CAAC,CAAA;AAEpD,IAAA,MAAM6D,iBAAiB,GAAGrC,IAAI,CAACsC,IAAI,CAACT,aAAa,CAAC,CAAA;;AAElD;AACJ;AACA;AACI,IAAA,IAAII,OAAO,EAAE;MACXM,cAAc,CACZ/D,MAAM,EACN;AACEK,QAAAA,IAAI,EAAE4C,QAAQ;AACde,QAAAA,OAAO,EAAEjB,iCAAiC,GAAGK,IAAI,CAACY,OAAO,GAAG,KAAK;AACjEtC,QAAAA,QAAQ,EAAE,CAAC;AAAEuC,UAAAA,IAAI,EAAE,EAAA;SAAI,CAAA;AACzB,OAAC,EACD;AAAE5C,QAAAA,EAAE,EAAEgC,aAAAA;AAAc,OACtB,CAAC,CAAA;AAEDC,MAAAA,OAAO,GAAG,IAAI,CAAA;AAEd,MAAA,OAAA;AACF,KAAA;;AAEA;AACJ;AACA;AACI,IAAA,IAAIK,KAAK,EAAE;AACT;AACN;AACA;MACM,MAAMO,KAAK,GAAGC,QAAQ,CAACnE,MAAM,CAAC,IAAI,EAAE,CAAA;MACpC+D,cAAc,CACZ/D,MAAM,EACN;AACEK,QAAAA,IAAI,EAAE4C,QAAQ;AACde,QAAAA,OAAO,EAAEhB,+BAA+B,GAAGI,IAAI,CAACY,OAAO,GAAG,KAAK;AAC/DtC,QAAAA,QAAQ,EAAE,CAAC;AAAEuC,UAAAA,IAAI,EAAE,EAAE;UAAE,GAAGC,KAAAA;SAAO,CAAA;AACnC,OAAC,EACD;AAAE7C,QAAAA,EAAE,EAAEwC,iBAAAA;AAAkB,OAC1B,CAAC,CAAA;AACDO,MAAAA,MAAM,CAACpE,MAAM,EAAE6D,iBAAiB,CAAC,CAAA;AACnC,KAAC,MAAM;MACLN,kBAAkB,CAACvD,MAAM,EAAE,MAAM;QAC/BqE,UAAU,CAACrE,MAAM,CAAC,CAAA;AACpB,OAAC,CAAC,CAAA;AACJ,KAAA;AAEAsD,IAAAA,OAAO,GAAG,IAAI,CAAA;AAChB,GAAC,CAAC,CAAA;AAEF,EAAA,OAAOA,OAAO,CAAA;AAChB;;MCjGagB,mBAAmB,GAAGA,CACjCtE,MAAsB,EACtBuE,OAAuB,KACpB;AACH,EAAA,IAAI,CAACvE,MAAM,CAAC8B,SAAS,EAAE,OAAA;AAEvB,EAAA,MAAM0C,GAAG,GAAGC,oBAAoB,CAACzE,MAAM,CAAC,CAAA;;AAExC;AACA,EAAA,IAAIwE,GAAG,EAAE;AACP,IAAA,MAAME,QAAQ,GAAG5B,kBAAkB,CAAC9C,MAAM,EAAEuE,OAAO,CAAC,CAAA;IACpD,IAAIG,QAAQ,EAAE,OAAO,IAAI,CAAA;AAC3B,GAAA;AACF;;ACdaC,MAAAA,YAAY,GAAGA,CAI1B3E,MAAS,EACT;AAAEuE,EAAAA,OAAAA;AAA+C,CAAC,KAC/C;EACH,MAAM;AAAEK,IAAAA,WAAAA;AAAY,GAAC,GAAG5E,MAAM,CAAA;EAE9BA,MAAM,CAAC4E,WAAW,GAAG,MAAM;AACzB,IAAA,IAAIN,mBAAmB,CAACtE,MAAM,EAAEuE,OAAO,CAAC,EAAE,OAAA;AAC1CK,IAAAA,WAAW,EAAE,CAAA;GACd,CAAA;AAED,EAAA,OAAO5E,MAAM,CAAA;AACf;;ACZO,MAAMkD,eAAe,GAAG,cAAa;AAE/B2B,MAAAA,oBAAoB,GAAGC,mBAAmB,CAAiB;AACtEC,EAAAA,GAAG,EAAE7B,eAAe;AACpB8B,EAAAA,SAAS,EAAE,IAAI;AACfC,EAAAA,aAAa,EAAEN,YAAY;AAC3BO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAEC,sBAAAA;GACZ;AACDb,EAAAA,OAAO,EAAE;AACPc,IAAAA,MAAM,EAAE,CAAC,WAAW,EAAE,aAAa,CAAA;AACrC,GAAA;AACF,CAAC;;ACLD;AACA;AACA;AACaZ,MAAAA,oBAAoB,GAAGA,CAClCzE,MAAsB,EACtB;EAAEqB,EAAE,GAAGrB,MAAM,CAAC8B,SAAAA;AAAoC,CAAC,GAAG,EAAE,KACS;AACjE,EAAA,MAAMmB,QAAQ,GAAG3C,aAAa,CAACN,MAAM,EAAEkD,eAAe,CAAC,CAAA;AAEvD,EAAA,IAAIlB,GAAS,CAAA;AAEb,EAAA,IAAIC,KAAK,CAACC,OAAO,CAACb,EAAE,CAAC,IAAI,CAACc,WAAW,CAACd,EAAE,CAAC,EAAE;AACzCW,IAAAA,GAAG,GAAGX,EAAE,CAACe,KAAK,CAACC,IAAI,CAAA;GACpB,MAAM,IAAIJ,KAAK,CAACC,OAAO,CAACb,EAAE,CAAC,EAAE;AAC5BW,IAAAA,GAAG,GAAGX,EAAE,CAACiB,MAAM,CAACD,IAAI,CAAA;AACtB,GAAC,MAAM;AACLL,IAAAA,GAAG,GAAGX,EAAU,CAAA;AAClB,GAAA;AAEA,EAAA,IAAIW,GAAG,EAAE;AACP,IAAA,MAAMO,IAAI,GAAGC,OAAO,CAAWxC,MAAM,EAAEgC,GAAG,CAAC,CAAA;AAC3C,IAAA,IAAIO,IAAI,EAAE;AACR,MAAA,MAAME,QAAQ,GAAGrB,YAAY,CAAWpB,MAAM,EAAE;AAC9CqB,QAAAA,EAAE,EAAEW,GAAG;AACPV,QAAAA,KAAK,EAAE;AAAEjB,UAAAA,IAAI,EAAE4C,QAAAA;AAAS,SAAA;AAC1B,OAAC,CAAC,CAAA;AAEF,MAAA,IAAIR,QAAQ,EAAE;QACZ,MAAMtB,IAAI,GAAGf,aAAa,CAAWJ,MAAM,EAAEyC,QAAQ,CAAC,CAAC,CAAC,CAAE,CAAA;QAE1D,OAAO;UAAEtB,IAAI;AAAEsB,UAAAA,QAAAA;SAAU,CAAA;AAC3B,OAAA;AACF,KAAA;AACF,GAAA;AACF;;AC7CA;AACA;AACA;AACO,MAAM6C,YAAY,GAAGA,CAC1BtF,MAAsB,EACtBuC,IAAe,KACZA,IAAI,CAACb,QAAQ,CAAC6D,IAAI,CAAEC,CAAC,IAAKlE,KAAK,CAACkE,CAAC,EAAE,EAAE,EAAE;EAAEnF,IAAI,EAAEO,YAAY,CAACZ,MAAM,CAAA;AAAE,CAAC,CAAC;;ACC3E;AACA;AACA;AACayF,MAAAA,iBAAiB,GAAqBzF,MAAsB,IAAK;EAC5E,MAAM;AAAE8B,IAAAA,SAAAA;AAAU,GAAC,GAAG9B,MAAM,CAAA;AAE5B,EAAA,IAAI,CAAC8B,SAAS,IAAIK,WAAW,CAACL,SAAS,CAAC,EAAE;AACxC,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;AAEA,EAAA,MAAM4D,cAAc,GAAGC,mBAAmB,CAAC3F,MAAM,CAAC,CAAA;AAClD,EAAA,IAAI,CAAC0F,cAAc,EAAE,OAAO,KAAK,CAAA;EAEjC,OAAOE,QAAQ,CAAC5F,MAAM,EAAE;AACtBsB,IAAAA,KAAK,EAAE;AAAEjB,MAAAA,IAAI,EAAEC,aAAa,CAACN,MAAM,EAAEO,UAAU,CAAA;AAAE,KAAA;AACnD,GAAC,CAAC,CAAA;AACJ;;AClBO,MAAMsF,UAAU,GAAGA,CACxB7F,MAAsB,EACtBuC,IAAiB,KACLyC,SAAS,CAACzC,IAAI,CAAC,IAAI3B,YAAY,CAACZ,MAAM,CAAC,CAAC8F,QAAQ,CAACvD,IAAI,CAAClC,IAAI;;MCR3D0F,QAAQ,GAAGA,CACtB/F,MAAsB,EACtBK,IAAY,KACT;EAAA,IAAA2F,iBAAA,EAAAC,qBAAA,CAAA;EACH,OAAO,CAAA,CAAAD,iBAAA,GAAAnE,gBAAgB,CAAC7B,MAAM,CAAC,MAAA,IAAA,IAAAgG,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAAC,qBAAA,GAAxBD,iBAAA,CAA0B7E,IAAI,MAAA8E,IAAAA,IAAAA,qBAAA,KAA9BA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAA,CAAiC,CAAC,CAAC,CAAC5F,IAAI,MAAKA,IAAI,CAAA;AAC1D;;ACWa6F,MAAAA,gBAAgB,GAAGA,CAC9BlG,MAAsB,EACtB;EAAEmB,IAAI;AAAEsB,EAAAA,QAAAA;AAAkC,CAAC,KACxC;EACH,IAAI0D,KAAK,GAAG,KAAK,CAAA;AAEjB,EAAA,MAAM,CAAC5E,QAAQ,CAAC,GAAGJ,IAAI,CAAA;AACvB,EAAA,MAAM,GAAGiF,YAAY,CAAC,GAAG3D,QAAQ,CAAA;AAEjC,EAAA,IAAI4D,oBAA0B,CAAA;EAE9B,IAAI;AACFA,IAAAA,oBAAoB,GAAG7E,IAAI,CAAC8E,QAAQ,CAACF,YAAY,CAAC,CAAA;GACnD,CAAC,OAAOG,KAAK,EAAE;AACd,IAAA,OAAA;AACF,GAAA;;AAEA;AACA,EAAA,MAAMC,mBAAmB,GAAGC,YAAY,CACtCzG,MAAM,EACNqG,oBACF,CAAC,CAAA;AAED,EAAA,IAAIG,mBAAmB,EAAE;AACvB,IAAA,MAAM,CAACE,YAAY,EAAEC,YAAY,CAAC,GAAGH,mBAAmB,CAAA;AAExD,IAAA,MAAMI,OAAO,GAAIF,YAAY,CAAChF,QAAQ,CAAgBmF,IAAI,CAAErB,CAAC,IAC3DlE,KAAK,CAACkE,CAAC,EAAE,EAAE,EAAE;MAAEnF,IAAI,EAAEO,YAAY,CAACZ,MAAM,CAAA;AAAE,KAAC,CAC7C,CAAC,CAAA;IACD,MAAM8G,OAAO,GAAGH,YAAY,CAACI,MAAM,CACjCH,OAAO,GAAG,CAAC,CAAC,EAAEA,OAAO,CAAClF,QAAQ,CAACC,MAAM,CAAC,GAAG,CAAC,CAAC,CAC7C,CAAC,CAAA;IAED4B,kBAAkB,CAACvD,MAAM,EAAE,MAAM;MAC/B,IAAI,CAAC4G,OAAO,EAAE;AACZ;QACAI,SAAS,CACPhH,MAAM,EACN;UAAEK,IAAI,EAAEkB,QAAQ,CAAClB,IAAI;AAAEqB,UAAAA,QAAQ,EAAE,EAAA;AAAG,SAAC,EACrC;AAAEL,UAAAA,EAAE,EAAE+E,YAAAA;AAAa,SACrB,CAAC,CAAA;AACH,OAAA;;AAEA;MACAa,SAAS,CAACjH,MAAM,EAAE;AAChBqB,QAAAA,EAAE,EAAE+E,YAAY;AAChBc,QAAAA,EAAE,EAAEJ,OAAAA;AACN,OAAC,CAAC,CAAA;AAEFX,MAAAA,KAAK,GAAG,IAAI,CAAA;AACd,KAAC,CAAC,CAAA;AACJ,GAAA;AAEA,EAAA,OAAOA,KAAK,CAAA;AACd;;AC3BA;AACA;AACA;AACA;AACagB,MAAAA,mBAAmB,GAAGA,CACjCnH,MAAsB,EACtB;EACEoH,QAAQ;EACRC,YAAY;EACZC,cAAc;AACdJ,EAAAA,EAAE,EAAEK,GAAG;EACPC,MAAM;AACNC,EAAAA,WAAW,GAAG,IAAI;AAClBC,EAAAA,cAAc,GAAG,IAAA;AACc,CAAC,KAC/B;AACH,EAAA,IAAIC,YAA8B,CAAA;AAClC,EAAA,IAAIxB,KAAK,CAAA;EAET5C,kBAAkB,CAACvD,MAAM,EAAE,MAAM;AAC/B,IAAA,IAAIqH,YAAY,EAAE;AAChB,MAAA,MAAMO,mBAAmB,GAAGC,cAAc,CAAC7H,MAAM,EAAE;AACjDqB,QAAAA,EAAE,EAAEgG,YAAY,CAAC,CAAC,CAAC;AACnB/F,QAAAA,KAAK,EAAE;UACLjB,IAAI,EAAEO,YAAY,CAACZ,MAAM,CAAA;AAC3B,SAAA;AACF,OAAC,CAAC,CAAA;MACF,IAAI,CAAC4H,mBAAmB,EAAE,OAAA;MAE1BD,YAAY,GAAGC,mBAAmB,KAAnBA,IAAAA,IAAAA,mBAAmB,uBAAnBA,mBAAmB,CAAG,CAAC,CAAC,CAAA;KACxC,MAAM,IAAIR,QAAQ,EAAE;AACnB;AACAO,MAAAA,YAAY,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAA;AAC5B,KAAC,MAAM;AACL,MAAA,OAAA;AACF,KAAA;IAEA,IAAIF,EAAe,GAAG,IAAI,CAAA;AAE1B,IAAA,IAAIK,GAAG,EAAEL,EAAE,GAAGK,GAAG,CAAA;AACjB,IAAA,IAAIC,MAAM,EAAE;MACV,IAAIC,WAAW,KAAK,IAAI,EAAE;AACxB,QAAA,MAAMK,aAAa,GAAGC,gBAAgB,CAACP,MAAM,CAAC,CAAA;AAC9CN,QAAAA,EAAE,GAAG1F,IAAI,CAACsC,IAAI,CAACgE,aAAa,CAAC,CAAA;AAC/B,OAAC,MAAM;QACLZ,EAAE,GAAGM,MAAM,CAAC,CAAC,CAAC,CAACT,MAAM,CAAC,CAACU,WAAW,CAAC,CAAC,CAAA;AACtC,OAAA;AACF,KAAA;IACA,IAAI,CAACP,EAAE,EAAE,OAAA;AAETf,IAAAA,KAAK,GAAG6B,YAAY,CAAChI,MAAM,EAAE;AAC3BqB,MAAAA,EAAE,EAAEsG,YAAY;MAChBT,EAAE;AACFI,MAAAA,cAAAA;AACF,KAAC,CAAC,CAAA;;AAEF;AACA,IAAA,IAAII,cAAc,EAAE;MAClBlE,UAAU,CAACxD,MAAM,EAAE;AAAEqB,QAAAA,EAAE,EAAEsG,YAAAA;AAAa,OAAC,CAAC,CAAA;AAC1C,KAAA;AACF,GAAC,CAAC,CAAA;AAEF,EAAA,OAAOxB,KAAK,CAAA;AACd;;ACvFa8B,MAAAA,UAAU,GAAGA,CACxBjI,MAAsB,EACtB;AAAEqB,EAAAA,EAAAA;AAAkB,CAAC,GAAG,EAAE,KACvB;EACH,MAAM6G,qBAAqB,GAAGA,MAAM;IAClC,IAAI9G,YAAY,CAACpB,MAAM,EAAE;AAAEsB,MAAAA,KAAK,EAAE;AAAEjB,QAAAA,IAAI,EAAEO,YAAY,CAACZ,MAAM,CAAC;AAAEqB,QAAAA,EAAAA;AAAG,OAAA;AAAE,KAAC,CAAC,EAAE;AACvE,MAAA,OAAO,IAAI,CAAA;AACb,KAAA;;AAEA;AACA,IAAA,IAAI,CAACA,EAAE,IAAIrB,MAAM,CAAC8B,SAAS,EAAE;MAC3B,MAAMqG,UAAU,GAAGC,aAAa,CAC9BpI,MAAM,EACNA,MAAM,CAAC8B,SAAS,CAACQ,MAAM,CAACD,IAAI,EAC5BrC,MAAM,CAAC8B,SAAS,CAACM,KAAK,CAACC,IACzB,CAAC,CAAA;MACD,IACE2C,SAAS,CAACmD,UAAU,CAAC,CAAC,CAAC,CAAC,IACxBvH,YAAY,CAACZ,MAAM,CAAC,CAAC8F,QAAQ,CAACqC,UAAU,CAAC,CAAC,CAAC,CAAC9H,IAAI,CAAC,EACjD;AACA,QAAA,OAAO,IAAI,CAAA;AACb,OAAA;AACF,KAAA;AAEA,IAAA,OAAO,KAAK,CAAA;GACb,CAAA;EAEDkD,kBAAkB,CAACvD,MAAM,EAAE,MAAM;IAC/B,GAAG;AACD,MAAA,MAAMqI,QAAQ,GAAGC,aAAa,CAACtI,MAAM,EAAE;QACrCqB,EAAE;AACFC,QAAAA,KAAK,EAAE;AAAEjB,UAAAA,IAAI,EAAEC,aAAa,CAACN,MAAM,EAAEe,WAAW,CAAA;AAAE,SAAA;AACpD,OAAC,CAAC,CAAA;AACF,MAAA,IAAIsH,QAAQ,EAAE;QACZE,WAAW,CAACvI,MAAM,EAAE;UAClBqB,EAAE;AACFhB,UAAAA,IAAI,EAAEC,aAAa,CAACN,MAAM,EAAEwI,eAAe,CAAA;AAC7C,SAAC,CAAC,CAAA;AACJ,OAAA;MAEAC,WAAW,CAACzI,MAAM,EAAE;QAClBqB,EAAE;AACFC,QAAAA,KAAK,EAAE;AAAEjB,UAAAA,IAAI,EAAEC,aAAa,CAACN,MAAM,EAAEO,UAAU,CAAA;SAAG;AAClDmI,QAAAA,KAAK,EAAE,IAAA;AACT,OAAC,CAAC,CAAA;MAEFD,WAAW,CAACzI,MAAM,EAAE;QAClBqB,EAAE;AACFC,QAAAA,KAAK,EAAE;AACLjB,UAAAA,IAAI,EAAE,CACJC,aAAa,CAACN,MAAM,EAAES,UAAU,CAAC,EACjCH,aAAa,CAACN,MAAM,EAAEW,UAAU,CAAC,CAAA;SAEpC;AACD+H,QAAAA,KAAK,EAAE,IAAA;AACT,OAAC,CAAC,CAAA;KACH,QAAQR,qBAAqB,EAAE,EAAA;AAClC,GAAC,CAAC,CAAA;AACJ;;ACxDA;AACA;AACA;AACaS,MAAAA,cAAc,GAAGA,CAC5B3I,MAAsB,EACtB;EAAEmB,IAAI;AAAEsB,EAAAA,QAAAA;AAAgC,CAAC,KACtC;EACH,MAAMmG,IAAI,GAAGA,MAAM;AACjB,IAAA,MAAM,CAACrH,QAAQ,EAAEtB,QAAQ,CAAC,GAAGkB,IAAI,CAAA;AACjC,IAAA,MAAM,CAAC0H,MAAM,EAAE3H,MAAM,CAAC,GAAGuB,QAAQ,CAAA;AAEjC,IAAA,MAAMb,QAAQ,GAAGR,YAAY,CAAWpB,MAAM,EAAE;AAC9CqB,MAAAA,EAAE,EAAEpB,QAAQ;AACZqB,MAAAA,KAAK,EAAE;AAAEjB,QAAAA,IAAI,EAAEC,aAAa,CAACN,MAAM,EAAEO,UAAU,CAAA;AAAE,OAAA;AACnD,KAAC,CAAC,CAAA;IACF,IAAI,CAACqB,QAAQ,EAAE;AACb,MAAA,IAAIkH,UAAU,CAAA;MACd,IAAI;AACFA,QAAAA,UAAU,GAAGtH,IAAI,CAACsC,IAAI,CAAC7D,QAAQ,CAAC,CAAA;OACjC,CAAC,OAAOsG,KAAK,EAAE;AACd,QAAA,OAAA;AACF,OAAA;AAEA,MAAA,MAAMwC,KAAK,GAAGzD,YAAY,CAACtF,MAAM,EAAE6I,MAAM,CAAC,CAAA;MAC1C,MAAMG,KAAK,GAAG,CAACC,WAAW,CAAC9H,IAAI,EAAED,MAAM,CAAC,CAAA;MAExC,IAAI6H,KAAK,IAAIC,KAAK,EAAE;AAClB;QACAjF,cAAc,CACZ/D,MAAM,EACN;UACEK,IAAI,EAAEkB,QAAQ,CAAClB,IAAI;AACnBqB,UAAAA,QAAQ,EAAE,EAAA;AACZ,SAAC,EACD;AAAEL,UAAAA,EAAE,EAAEyH,UAAAA;AAAW,SACnB,CAAC,CAAA;AACH,OAAA;AAEA,MAAA,IAAIC,KAAK,EAAE;AACT,QAAA,MAAMG,UAAU,GAAG1G,OAAO,CAAWxC,MAAM,EAAE8I,UAAU,CAAC,CAAA;QACxD,IAAI,CAACI,UAAU,EAAE,OAAA;;AAEjB;QACA/B,mBAAmB,CAACnH,MAAM,EAAE;AAC1BqH,UAAAA,YAAY,EAAE5E,QAAQ;AACtB+E,UAAAA,MAAM,EAAE,CAAC0B,UAAU,EAAEJ,UAAU,CAAA;AACjC,SAAC,CAAC,CAAA;AACJ,OAAA;;AAEA;AACA,MAAA,IAAIE,KAAK,EAAE;AACT,QAAA,MAAME,UAAU,GAAG1G,OAAO,CAAWxC,MAAM,EAAE8I,UAAU,CAAC,CAAA;QACxD,IAAI,CAACI,UAAU,EAAE,OAAA;;AAEjB;QACA/B,mBAAmB,CAACnH,MAAM,EAAE;AAC1BoH,UAAAA,QAAQ,EAAEjG,IAAI;UACdmG,cAAc,EAAEpG,MAAM,CAACG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAI,CAAC;AAClCmG,UAAAA,MAAM,EAAE,CAAC0B,UAAU,EAAEJ,UAAU,CAAC;AAChCpB,UAAAA,cAAc,EAAE,KAAA;AAClB,SAAC,CAAC,CAAA;AACJ,OAAA;;AAEA;MACAO,UAAU,CAACjI,MAAM,EAAE;AAAEqB,QAAAA,EAAE,EAAEH,MAAM,CAAC6F,MAAM,CAAC,CAAC,CAAA;AAAE,OAAC,CAAC,CAAA;AAE5C,MAAA,OAAO,IAAI,CAAA;AACb,KAAA;AACA,IAAA,MAAM,GAAGoC,YAAY,CAAC,GAAGvH,QAAQ,CAAA;IAEjC,MAAMkH,UAAU,GAAG5H,MAAM,CAAC6F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;;AAErC;AACA,IAAA,IAAI,CAACkC,WAAW,CAAC9H,IAAI,EAAED,MAAM,CAAC,EAAE;AAC9B;AACA,MAAA,IAAI,CAACoE,YAAY,CAACtF,MAAM,EAAE6I,MAAM,CAAC,EAAE;QACjC9E,cAAc,CACZ/D,MAAM,EACN;UACEK,IAAI,EAAEkB,QAAQ,CAAClB,IAAI;AACnBqB,UAAAA,QAAQ,EAAE,EAAA;AACZ,SAAC,EACD;AAAEL,UAAAA,EAAE,EAAEyH,UAAAA;AAAW,SACnB,CAAC,CAAA;AACH,OAAA;AAEA,MAAA,MAAMI,UAAU,GAAG1G,OAAO,CAAWxC,MAAM,EAAE8I,UAAU,CAAC,CAAA;MACxD,IAAI,CAACI,UAAU,EAAE,OAAA;;AAEjB;MACA/B,mBAAmB,CAACnH,MAAM,EAAE;AAC1BqH,QAAAA,YAAY,EAAEzF,QAAQ;AACtB4F,QAAAA,MAAM,EAAE,CAAC0B,UAAU,EAAEJ,UAAU,CAAC;QAChCxB,cAAc,EAAEpG,MAAM,CAACG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAI,CAAC;AAClCqG,QAAAA,cAAc,EAAE,KAAA;AAClB,OAAC,CAAC,CAAA;AACJ,KAAA;AAEA,IAAA,MAAM0B,aAAa,GAAG5H,IAAI,CAACsC,IAAI,CAACqF,YAAY,CAAC,CAAA;;AAE7C;IACAlC,SAAS,CAACjH,MAAM,EAAE;AAChBqB,MAAAA,EAAE,EAAEH,MAAM;AACVgG,MAAAA,EAAE,EAAEkC,aAAAA;AACN,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,IAAI,CAAA;GACZ,CAAA;EAED,IAAIjD,KAA0B,GAAG,KAAK,CAAA;EAEtC5C,kBAAkB,CAACvD,MAAM,EAAE,MAAM;IAC/BmG,KAAK,GAAGyC,IAAI,EAAE,CAAA;AAChB,GAAC,CAAC,CAAA;AAEF,EAAA,OAAOzC,KAAK,CAAA;AACd;;ACxIA;AACA;AACA;AACakD,MAAAA,mBAAmB,GAAGA,CACjCrJ,MAAsB,EACtB;EACEmB,IAAI;AACJsB,EAAAA,QAAAA;AAIF,CAAC,KACE;AACH,EAAA,MAAM,GAAGxC,QAAQ,CAAC,GAAGkB,IAAI,CAAA;AAEzB,EAAA,IAAI,CAACpB,YAAY,CAACC,MAAM,EAAEC,QAAQ,CAAC,EAAE;IACnC0I,cAAc,CAAC3I,MAAM,EAAE;MAAEmB,IAAI;AAAEsB,MAAAA,QAAAA;AAAS,KAAC,CAAC,CAAA;AAE1C,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;AAEA,EAAA,OAAO,KAAK,CAAA;AACd;;ACHa6G,MAAAA,aAAa,GAAGA,CAC3BtJ,MAAsB,EACtB;AACEuJ,EAAAA,QAAQ,GAAG,IAAI;AACflI,EAAAA,EAAE,GAAAmI,CAAAA,iBAAA,IAAAA,CAAAA,iBAAA,GAAGxJ,MAAM,CAAC8B,SAAS,MAAA0H,IAAAA,IAAAA,iBAAA,KAAAA,KAAAA,CAAAA,GAAAA,iBAAA,GAAIC,SAAS,GAAA;AAClCC,EAAAA,qBAAAA;AACoB,CAAC,GAAG,EAAE,KACzB;AACH,EAAA,MAAMC,MAAM,GAAGC,cAAc,CAAC5J,MAAM,EAAE;IACpCqB,EAAE;AACFC,IAAAA,KAAK,EAAE;AACLjB,MAAAA,IAAI,EAAEC,aAAa,CAACN,MAAM,EAAEe,WAAW,CAAA;AACzC,KAAA;AACF,GAAC,CAAC,CAAA;;AAEF;AACA,EAAA,MAAM8I,IAAI,GAAGC,KAAK,CAACC,IAAI,CAACJ,MAAM,CAAC,CAAA;AAE/B,EAAA,IAAIE,IAAI,CAAClI,MAAM,KAAK,CAAC,EAAE,OAAA;EAEvB,MAAMqI,eAAuB,GAAG,EAAE,CAAA;EAClC,MAAMC,kBAA6B,GAAG,EAAE,CAAA;;AAExC;AACAJ,EAAAA,IAAI,CAACK,OAAO,CAAEC,GAAG,IAAK;AACpB,IAAA,MAAMC,OAAO,GAAGD,GAAG,CAAC,CAAC,CAAC,CAAA;AACtB,IAAA,MAAMjJ,MAAM,GAAGM,IAAI,CAAC6I,MAAM,CAACD,OAAO,CAAC,CAAA;AAEnC,IAAA,MAAME,UAAU,GAAGN,eAAe,CAACzE,IAAI,CAAElD,IAAI,IAAK;AAChD,MAAA,MAAMkI,aAAa,GAAG/I,IAAI,CAAC6I,MAAM,CAAChI,IAAI,CAAC,CAAA;AAEvC,MAAA,OAAOb,IAAI,CAAC8I,UAAU,CAACC,aAAa,EAAErJ,MAAM,CAAC,CAAA;AAC/C,KAAC,CAAC,CAAA;IACF,IAAI,CAACoJ,UAAU,EAAE;AACfN,MAAAA,eAAe,CAACQ,IAAI,CAACJ,OAAO,CAAC,CAAA;MAC7BH,kBAAkB,CAACO,IAAI,CAACC,aAAa,CAACzK,MAAM,EAAEoK,OAAO,CAAC,CAAC,CAAA;AACzD,KAAA;AACF,GAAC,CAAC,CAAA;EAEF,MAAMM,iBAAiB,GAAGnB,QAAQ,GAC9BU,kBAAkB,GAClBA,kBAAkB,CAACU,OAAO,EAAE,CAAA;AAEhC,EAAA,OAAOpH,kBAAkB,CAACvD,MAAM,EAAE,MAAM;IACtC,IAAImG,KAAK,GAAG,KAAK,CAAA;AAEjBuE,IAAAA,iBAAiB,CAACR,OAAO,CAAEU,UAAU,IAAK;AACxC,MAAA,MAAMR,OAAO,GAAGQ,UAAU,CAACC,KAAK,EAAE,CAAA;MAClC,IAAI,CAACT,OAAO,EAAE,OAAA;AAEd,MAAA,MAAM3H,QAAQ,GAAGrC,aAAa,CAACJ,MAAM,EAAEoK,OAAO,CAAC,CAAA;MAC/C,IAAI,CAAC3H,QAAQ,EAAE,OAAA;MAEf,MAAME,UAAU,GAAGvC,aAAa,CAACJ,MAAM,EAAEyC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;MACrD,IAAI,CAACE,UAAU,EAAE,OAAA;AAEjB,MAAA,IAAImI,MAAW,CAAA;AAEf,MAAA,IAAIvB,QAAQ,EAAE;AACZuB,QAAAA,MAAM,GAAG5E,gBAAgB,CAAClG,MAAM,EAAE;AAChCmB,UAAAA,IAAI,EAAEwB,UAAiB;AACvBF,UAAAA,QAAQ,EAAEA,QAAAA;AACZ,SAAC,CAAC,CAAA;OACH,MAAM,IAAI1C,YAAY,CAACC,MAAM,EAAE2C,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE;AAC9C;AACAmI,QAAAA,MAAM,GAAGnC,cAAc,CAAC3I,MAAM,EAAE;AAC9BmB,UAAAA,IAAI,EAAEwB,UAAiB;AACvBF,UAAAA,QAAQ,EAAEA,QAAAA;AACZ,SAAC,CAAC,CAAA;OACH,MAAM,IAAIiH,qBAAqB,EAAE;AAChC;AACAoB,QAAAA,MAAM,GAAGzB,mBAAmB,CAACrJ,MAAM,EAAE;AACnCmB,UAAAA,IAAI,EAAEwB,UAAiB;AACvBF,UAAAA,QAAQ,EAAEA,QAAAA;AACZ,SAAC,CAAC,CAAA;AACJ,OAAA;MAEA0D,KAAK,GAAG2E,MAAM,IAAI3E,KAAK,CAAA;AACzB,KAAC,CAAC,CAAA;AAEF,IAAA,OAAOA,KAAK,CAAA;AACd,GAAC,CAAC,CAAA;AACJ;;ACtGa4E,MAAAA,eAAe,GAAqB/K,MAAsB,IAAK;EAC1EsJ,aAAa,CAACtJ,MAAM,EAAE;AAAEuJ,IAAAA,QAAQ,EAAE,IAAA;AAAK,GAAC,CAAC,CAAA;AAC3C;;ACiBA;AACA;AACA;AACA;AACayB,MAAAA,cAAc,GACzBhL,MAAsB,IACV;AACZ,EAAA,MAAM+B,MAAM,GAAGzB,aAAa,CAACN,MAAM,EAAEO,UAAU,CAAC,CAAA;AAChD,EAAA,MAAM0K,OAAO,GAAG3K,aAAa,CAACN,MAAM,EAAEe,WAAW,CAAC,CAAA;AAElD,EAAA,IAAI,CAACf,MAAM,CAAC8B,SAAS,EAAE;AACrB,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;AAEA,EAAA,MAAMuG,QAAQ,GAAGjH,YAAY,CAACpB,MAAM,EAAE;AAAEsB,IAAAA,KAAK,EAAE;AAAEjB,MAAAA,IAAI,EAAE4K,OAAAA;AAAQ,KAAA;AAAE,GAAC,CAAC,CAAA;AACnE,EAAA,IAAI,CAAC5C,QAAQ,EAAE,OAAO,KAAK,CAAA;AAC3B,EAAA,MAAM,GAAGhF,aAAa,CAAC,GAAGgF,QAAQ,CAAA;AAElC,EAAA,MAAM6C,aAAa,GAAG9K,aAAa,CAACJ,MAAM,EAAEqD,aAAa,CAAC,CAAA;AAC1D,EAAA,IAAI,CAAC6H,aAAa,EAAE,OAAO,KAAK,CAAA;AAChC,EAAA,MAAM,CAACC,YAAY,EAAE/E,YAAY,CAAC,GAAG8E,aAAa,CAAA;AAElD,EAAA,IAAIC,YAAY,CAAC9K,IAAI,KAAK0B,MAAM,EAAE,OAAO,KAAK,CAAA;EAE9C,IAAIuB,OAAO,GAAG,KAAK,CAAA;EAEnBC,kBAAkB,CAACvD,MAAM,EAAE,MAAM;IAC/B,IAAI,CAACiC,KAAK,CAACE,WAAW,CAACnC,MAAM,CAAC8B,SAAU,CAAC,EAAE;MACzC0B,UAAU,CAACxD,MAAM,CAAC,CAAA;AACpB,KAAA;AAEA,IAAA,MAAMyD,OAAO,GAAGC,YAAY,CAC1B1D,MAAM,EACNA,MAAM,CAAC8B,SAAS,CAAEM,KAAK,EACvBiB,aACF,CAAC,CAAA;AACD,IAAA,MAAMM,KAAK,GAAGC,8BAA8B,CAAC5D,MAAM,CAAC,CAAA;AAEpD,IAAA,MAAM6D,iBAAiB,GAAGrC,IAAI,CAACsC,IAAI,CAACT,aAAa,CAAC,CAAA;AAClD,IAAA,MAAM+H,gBAAgB,GAAG5J,IAAI,CAACsC,IAAI,CAACsC,YAAY,CAAC,CAAA;;AAEhD;AACJ;AACA;AACI,IAAA,IAAI3C,OAAO,EAAE;MACXM,cAAc,CACZ/D,MAAM,EACN;AACEK,QAAAA,IAAI,EAAE0B,MAAM;AACZL,QAAAA,QAAQ,EAAE,CAAC;AAAErB,UAAAA,IAAI,EAAE4K,OAAO;AAAEvJ,UAAAA,QAAQ,EAAE,CAAC;AAAEuC,YAAAA,IAAI,EAAE,EAAA;WAAI,CAAA;SAAG,CAAA;AACxD,OAAC,EACD;AAAE5C,QAAAA,EAAE,EAAE+E,YAAAA;AAAa,OACrB,CAAC,CAAA;AAED9C,MAAAA,OAAO,GAAG,IAAI,CAAA;AAEd,MAAA,OAAA;AACF,KAAA;;AAEA;AACJ;AACA;AACI,IAAA,IAAIK,KAAK,EAAE;AACT;AACN;AACA;MACM,MAAMO,KAAK,GAAGC,QAAQ,CAACnE,MAAM,CAAC,IAAI,EAAE,CAAA;MACpC+D,cAAc,CACZ/D,MAAM,EACN;AACEK,QAAAA,IAAI,EAAE0B,MAAM;AACZL,QAAAA,QAAQ,EAAE,CAAC;AAAErB,UAAAA,IAAI,EAAE4K,OAAO;AAAEvJ,UAAAA,QAAQ,EAAE,CAAC;AAAEuC,YAAAA,IAAI,EAAE,EAAE;YAAE,GAAGC,KAAAA;WAAO,CAAA;SAAG,CAAA;AAClE,OAAC,EACD;AAAE7C,QAAAA,EAAE,EAAE+J,gBAAAA;AAAiB,OACzB,CAAC,CAAA;AACDhH,MAAAA,MAAM,CAACpE,MAAM,EAAEoL,gBAAgB,CAAC,CAAA;AAClC,KAAC,MAAM;MACL7H,kBAAkB,CAACvD,MAAM,EAAE,MAAM;QAC/BqE,UAAU,CAACrE,MAAM,CAAC,CAAA;QAClBgH,SAAS,CACPhH,MAAM,EACN;AACEK,UAAAA,IAAI,EAAE0B,MAAM;AACZL,UAAAA,QAAQ,EAAE,EAAA;AACZ,SAAC,EACD;AAAEL,UAAAA,EAAE,EAAEwC,iBAAAA;AAAkB,SAC1B,CAAC,CAAA;QACDoD,SAAS,CAACjH,MAAM,EAAE;AAChBqB,UAAAA,EAAE,EAAEwC,iBAAiB;AACrBqD,UAAAA,EAAE,EAAEkE,gBAAAA;AACN,SAAC,CAAC,CAAA;AACFhH,QAAAA,MAAM,CAACpE,MAAM,EAAEoL,gBAAgB,CAAC,CAAA;QAChCC,iBAAiB,CAACrL,MAAM,EAAE;AACxBsL,UAAAA,IAAI,EAAE,OAAA;AACR,SAAC,CAAC,CAAA;AACJ,OAAC,CAAC,CAAA;AACJ,KAAA;;AAEA;AACJ;AACA;AACI,IAAA,IAAIH,YAAY,CAACzJ,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;MACpCsF,SAAS,CAACjH,MAAM,EAAE;AAChBqB,QAAAA,EAAE,EAAEwC,iBAAiB;AACrBqD,QAAAA,EAAE,EAAEkE,gBAAgB,CAACrE,MAAM,CAAC,CAAC,CAAA;AAC/B,OAAC,CAAC,CAAA;AACJ,KAAA;AAEAzD,IAAAA,OAAO,GAAG,IAAI,CAAA;AAChB,GAAC,CAAC,CAAA;AAEF,EAAA,OAAOA,OAAO,CAAA;AAChB;;ACrGA;AACA;AACA;AACA;AACaiI,MAAAA,yCAAyC,GAAGA,CACvDvL,MAAsB,EACtB;EACEqH,YAAY;EACZmE,UAAU;AACVC,EAAAA,KAAAA;AACgD,CAAC,KAChD;AACH,EAAA,MAAM,GAAGC,gBAAgB,CAAC,GAAGrE,YAAY,CAAA;AACzC,EAAA,MAAM,GAAGsE,cAAc,CAAC,GAAGH,UAAU,CAAA;EACrC,IAAIrF,KAAK,GAAG,CAAC,CAAA;EAEb5C,kBAAkB,CAACvD,MAAM,EAAE,MAAM;AAC/B,IAAA,MAAM4H,mBAAmB,GAAGC,cAAc,CAAW7H,MAAM,EAAE;AAC3DqB,MAAAA,EAAE,EAAEqK,gBAAgB;AACpBpK,MAAAA,KAAK,EAAE;QACLjB,IAAI,EAAEO,YAAY,CAACZ,MAAM,CAAA;AAC3B,OAAA;AACF,KAAC,CAAC,CAAA;IACF,IAAI,CAAC4H,mBAAmB,EAAE,OAAA;AAE1B,IAAA,MAAM,GAAGgE,uBAAuB,CAAC,GAAGhE,mBAAmB,CAAA;AAEvD,IAAA,MAAMiE,iBAAiB,GAAGhE,cAAc,CAAW7H,MAAM,EAAE;AACzDqB,MAAAA,EAAE,EAAEsK,cAAc;AAClBrK,MAAAA,KAAK,EAAE;QACLjB,IAAI,EAAEO,YAAY,CAACZ,MAAM,CAAA;AAC3B,OAAA;AACF,KAAC,CAAC,CAAA;AAEF,IAAA,IAAIkH,EAAQ,CAAA;IAEZ,IAAI,CAAC2E,iBAAiB,EAAE;AACtB,MAAA,MAAMzE,QAAQ,GAAGhH,aAAa,CAACJ,MAAM,EAAE0L,gBAAgB,CAAC,CAAA;MACxD,IAAI,CAACtE,QAAQ,EAAE,OAAA;AACf,MAAA,MAAM,CAAC0E,YAAY,CAAC,GAAG1E,QAAQ,CAAA;AAE/B,MAAA,MAAM2E,YAAY,GAAGD,YAAY,CAACzL,IAAI,CAAA;MAEtC,MAAM2L,qBAAqB,GAAGL,cAAc,CAAC5E,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;MAExDhD,cAAc,CACZ/D,MAAM,EACN;AAAEK,QAAAA,IAAI,EAAE0L,YAAsB;AAAErK,QAAAA,QAAQ,EAAE,EAAA;AAAG,OAAC,EAC9C;AAAEL,QAAAA,EAAE,EAAE2K,qBAAAA;AAAsB,OAC9B,CAAC,CAAA;MAED9E,EAAE,GAAG8E,qBAAqB,CAACjF,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;KACvC,MAAM,IAAI0E,KAAK,EAAE;AAChB,MAAA,MAAM,GAAGO,qBAAqB,CAAC,GAAGH,iBAAiB,CAAA;MACnD3E,EAAE,GAAG8E,qBAAqB,CAACjF,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AACxC,KAAC,MAAM;MACLG,EAAE,GAAG1F,IAAI,CAACsC,IAAI,CAACiE,gBAAgB,CAAC8D,iBAAiB,CAAC,CAAC,CAAA;AACrD,KAAA;AAEA1F,IAAAA,KAAK,GAAG6B,YAAY,CAAChI,MAAM,EAAE;AAC3BqB,MAAAA,EAAE,EAAEuK,uBAAuB;AAC3B1E,MAAAA,EAAAA;AACF,KAAC,CAAC,CAAA;;AAEF;IACA1D,UAAU,CAACxD,MAAM,EAAE;AAAEqB,MAAAA,EAAE,EAAEuK,uBAAAA;AAAwB,KAAC,CAAC,CAAA;AACrD,GAAC,CAAC,CAAA;AAEF,EAAA,OAAOzF,KAAK,CAAA;AACd;;AC1Fa8F,MAAAA,2BAA2B,GAAGA,CACzCjM,MAAsB,EACtB;EACEqB,EAAE;AACF6F,EAAAA,EAAAA;AAIF,CAAC,KACU;EACX,MAAMgF,MAAM,GAAG7K,EAAE,CAACA,EAAE,CAAC,CAAC,CAAC,CAAE,CAAA;AACzBA,EAAAA,EAAE,GAAGG,IAAI,CAAC6I,MAAM,CAAChJ,EAAE,CAAC,CAAA;AACpB,EAAA,MAAME,QAAQ,GAAGiB,OAAO,CAAWxC,MAAM,EAAEqB,EAAE,CAAE,CAAA;AAC/C,EAAA,MAAM8K,SAAwB,GAAG,CAAC5K,QAAQ,EAAEF,EAAE,CAAC,CAAA;AAE/C,EAAA,IACE,CAACC,KAAK,CAACC,QAAQ,EAAE,EAAE,EAAE;IAAElB,IAAI,EAAEO,YAAY,CAACZ,MAAM,CAAA;GAAG,CAAC,IACpDwB,IAAI,CAAC4K,QAAQ,CAAC/K,EAAE,EAAE6F,EAAE,CAAC;IACrB;AACA,IAAA,OAAO,CAAC,CAAA;AACV,GAAA;EAEA,OAAOc,YAAY,CAAChI,MAAM,EAAE;AAC1BqB,IAAAA,EAAE,EAAE8K,SAAgB;IACpBjF,EAAE;IACFI,cAAc,EAAE4E,MAAM,GAAG,CAAA;AAC3B,GAAC,CAAC,CAAA;AACJ;;ACZA;AACA;AACA;AACaG,MAAAA,cAAc,GAAGA,CAC5BrM,MAAsB,EACtB;EAAEmB,IAAI;EAAEsB,QAAQ;AAAEkI,EAAAA,OAAO,GAAG,IAAA;AAA4B,CAAC,KACtD;AACH,EAAA,MAAM,CAAC9B,MAAM,EAAE3H,MAAM,CAAC,GAAGuB,QAAQ,CAAA;;AAEjC;AACA,EAAA,IAAI6J,UAAU,CAACtM,MAAM,CAAC8B,SAAS,CAAC,IAAI,CAACwD,YAAY,CAACtF,MAAM,EAAE6I,MAAM,CAAC,EAAE;AACjE,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;AAEA,EAAA,MAAM0D,cAAc,GAAGC,eAAe,CAACtL,MAAM,CAAC,CAAA;EAE9C,IAAIoC,OAAO,GAAG,KAAK,CAAA;EAEnBC,kBAAkB,CAACvD,MAAM,EAAE,MAAM;AAC/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,IAAA,IAAIuM,cAAc,EAAE;AAClB,MAAA,MAAME,UAAU,GAAGhG,YAAY,CAAWzG,MAAM,EAAEuM,cAAc,CAAC,CAAA;MACjE,IAAI,CAACE,UAAU,EAAE,OAAA;;AAEjB;AACA,MAAA,IAAIC,UAAU,GAAGlL,IAAI,CAACsC,IAAI,CAAC5C,MAAM,CAAC,CAAA;MAClC6C,cAAc,CACZ/D,MAAM,EACN;AACEK,QAAAA,IAAI,EAAEC,aAAa,CAACN,MAAM,EAAEO,UAAU,CAAC;AACvCmB,QAAAA,QAAQ,EAAE,CACR;AACErB,UAAAA,IAAI,EAAEC,aAAa,CAACN,MAAM,EAAEe,WAAW,CAAC;AACxCW,UAAAA,QAAQ,EAAE,CAAC;AAAEuC,YAAAA,IAAI,EAAE,EAAA;WAAI,CAAA;SACxB,CAAA;AAEL,OAAC,EACD;AAAE5C,QAAAA,EAAE,EAAEqL,UAAAA;AAAW,OACnB,CAAC,CAAA;AAED,MAAA,MAAMC,MAAM,GAAGlG,YAAY,CAAWzG,MAAM,EAAE0M,UAAU,CAAC,CAAA;MACzD,IAAI,CAACC,MAAM,EAAE,OAAA;MACb,MAAMC,aAAa,GAAGnC,aAAa,CAACzK,MAAM,EAAE2M,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;;AAEtD;MACApB,yCAAyC,CAACvL,MAAM,EAAE;AAChDqH,QAAAA,YAAY,EAAE5E,QAAQ;AACtB+I,QAAAA,UAAU,EAAEmB,MAAAA;AACd,OAAC,CAAC,CAAA;;AAEF;MACAE,WAAW,CAAC7M,MAAM,EAAE;AAClB2K,QAAAA,OAAAA;AACF,OAAC,CAAC,CAAA;AAEF+B,MAAAA,UAAU,GAAGE,aAAa,CAAC/B,KAAK,EAAG,CAAA;;AAEnC;MACAU,yCAAyC,CAACvL,MAAM,EAAE;QAChDqH,YAAY,EAAE,CAACsF,MAAM,CAAC,CAAC,CAAC,EAAED,UAAU,CAAC;AACrClB,QAAAA,UAAU,EAAEiB,UAAAA;AACd,OAAC,CAAC,CAAA;;AAEF;MACAK,WAAW,CAAC9M,MAAM,EAAE;AAAEqB,QAAAA,EAAE,EAAEqL,UAAAA;AAAW,OAAC,CAAC,CAAA;AAEvCpJ,MAAAA,OAAO,GAAG,IAAI,CAAA;AACd,MAAA,OAAA;AACF,KAAA;;AAEA;IACA6D,mBAAmB,CAACnH,MAAM,EAAE;AAC1BqH,MAAAA,YAAY,EAAE5E,QAAQ;AACtB+E,MAAAA,MAAM,EAAErG,IAAI;AACZsG,MAAAA,WAAW,EAAE,CAAA;AACf,KAAC,CAAC,CAAA;AACJ,GAAC,CAAC,CAAA;AAEF,EAAA,OAAOnE,OAAO,CAAA;AAChB;;AC1FayJ,MAAAA,UAAU,GAAGA,CACxB/M,MAAsB,EACtB;EAAEK,IAAI;AAAE2M,EAAAA,SAAS,GAAG3M,IAAAA;AAA2C,CAAC,KAEhEkD,kBAAkB,CAACvD,MAAM,EAAE,MAAM;AAC/B,EAAA,IAAI,CAACA,MAAM,CAAC8B,SAAS,EAAE;AACrB,IAAA,OAAA;AACF,GAAA;EAEA,MAAM;AAAEmL,IAAAA,oBAAAA;AAAqB,GAAC,GAAGC,gBAAgB,CAC/ClN,MAAM,EACNgN,SACF,CAAC,CAAA;AAED,EAAA,IAAI7K,WAAW,CAACnC,MAAM,CAAC8B,SAAS,CAAC,IAAI,CAAC6D,mBAAmB,CAAC3F,MAAM,CAAC,EAAE;AACjE;AACA,IAAA,MAAMwE,GAAG,GAAG3C,gBAAgB,CAAC7B,MAAM,CAAC,CAAA;AAEpC,IAAA,IAAIwE,GAAG,EAAE;MACP,MAAM;AAAErD,QAAAA,IAAAA;AAAK,OAAC,GAAGqD,GAAG,CAAA;MACpB,IAAIrD,IAAI,CAAC,CAAC,CAAC,CAACd,IAAI,KAAKA,IAAI,EAAE;QACzB4H,UAAU,CAACjI,MAAM,CAAC,CAAA;AACpB,OAAC,MAAM;QACLuI,WAAW,CACTvI,MAAM,EACN;AAAEK,UAAAA,IAAAA;AAAK,SAAC,EACR;UACEgB,EAAE,EAAErB,MAAM,CAAC8B,SAAS;AACpBR,UAAAA,KAAK,EAAGkE,CAAC,IACPR,SAAS,CAACQ,CAAC,CAAC,IAAI5E,YAAY,CAACZ,MAAM,CAAC,CAAC8F,QAAQ,CAACN,CAAC,CAACnF,IAAI,CAAC;AACvD8M,UAAAA,IAAI,EAAE,QAAA;AACR,SACF,CAAC,CAAA;AACH,OAAA;AACF,KAAC,MAAM;AACL,MAAA,MAAMhM,IAAI,GAAG;QAAEd,IAAI;AAAEqB,QAAAA,QAAQ,EAAE,EAAA;OAAI,CAAA;AACnCsF,MAAAA,SAAS,CAAWhH,MAAM,EAAEmB,IAAI,CAAC,CAAA;AAEjC,MAAA,MAAMwI,MAAM,GAAGC,cAAc,CAAC5J,MAAM,EAAE;AACpCsB,QAAAA,KAAK,EAAE;AAAEjB,UAAAA,IAAI,EAAEC,aAAa,CAACN,MAAM,EAAEwI,eAAe,CAAA;AAAE,SAAA;AACxD,OAAC,CAAC,CAAA;AACF,MAAA,MAAM4E,KAAK,GAAGtD,KAAK,CAACC,IAAI,CAACJ,MAAM,CAAC,CAAA;AAEhC,MAAA,MAAM0D,UAAU,GAAG/E,aAAa,CAACtI,MAAM,EAAE;AACvCsB,QAAAA,KAAK,EAAE;AAAEjB,UAAAA,IAAI,EAAE4M,oBAAAA;AAAqB,SAAA;AACtC,OAAC,CAAC,CAAA;MACF,IAAI,CAACI,UAAU,EAAE;QACf9E,WAAW,CAACvI,MAAM,EAAE;AAClBK,UAAAA,IAAI,EAAEC,aAAa,CAACN,MAAM,EAAEe,WAAW,CAAA;AACzC,SAAC,CAAC,CAAA;AACJ,OAAA;AAEA,MAAA,MAAM0B,QAAQ,GAAG;AACfpC,QAAAA,IAAI,EAAEC,aAAa,CAACN,MAAM,EAAEO,UAAU,CAAC;AACvCmB,QAAAA,QAAQ,EAAE,EAAA;OACX,CAAA;AAED,MAAA,KAAK,MAAM,GAAGW,IAAI,CAAC,IAAI+K,KAAK,EAAE;AAC5BpG,QAAAA,SAAS,CAAWhH,MAAM,EAAEyC,QAAQ,EAAE;AACpCpB,UAAAA,EAAE,EAAEgB,IAAAA;AACN,SAAC,CAAC,CAAA;AACJ,OAAA;AACF,KAAA;AACF,GAAC,MAAM;AACL;;AAEA,IAAA,MAAM,CAACiL,UAAU,EAAEC,QAAQ,CAAC,GAAGtL,KAAK,CAACuL,KAAK,CAACxN,MAAM,CAAC8B,SAAU,CAAC,CAAA;AAC7D,IAAA,MAAM2L,WAAW,GAAGrF,aAAa,CAC/BpI,MAAM,EACNsN,UAAU,CAACjL,IAAI,EACfkL,QAAQ,CAAClL,IACX,CAAC,CAAA;AAED,IAAA,IACEzB,YAAY,CAACZ,MAAM,CAAC,CAAC8F,QAAQ,CAAC2H,WAAW,CAAC,CAAC,CAAC,CAACpN,IAAI,CAAC,IACjDoN,WAAW,CAAC,CAAC,CAAC,CAAcpN,IAAI,KAAKC,aAAa,CAACN,MAAM,EAAEO,UAAU,CAAC,EACvE;MACA,IAAKkN,WAAW,CAAC,CAAC,CAAC,CAAcpN,IAAI,KAAKA,IAAI,EAAE;QAC9C4H,UAAU,CAACjI,MAAM,CAAC,CAAA;AACpB,OAAC,MAAM;AACL,QAAA,MAAM0N,SAAS,GAAGC,QAAQ,CAAC3N,MAAM,EAAE;UACjCqB,EAAE,EAAEY,KAAK,CAACwJ,KAAK,CAACzL,MAAM,CAAC8B,SAAS,CAAC;AACjCR,UAAAA,KAAK,EAAE;YAAEjB,IAAI,EAAEO,YAAY,CAACZ,MAAM,CAAA;WAAG;AACrCmN,UAAAA,IAAI,EAAE,QAAA;AACR,SAAC,CAAC,CAAA;AACF,QAAA,MAAMS,OAAO,GAAGD,QAAQ,CAAC3N,MAAM,EAAE;UAC/BqB,EAAE,EAAEY,KAAK,CAAC4L,GAAG,CAAC7N,MAAM,CAAC8B,SAAS,CAAC;AAC/BR,UAAAA,KAAK,EAAE;YAAEjB,IAAI,EAAEO,YAAY,CAACZ,MAAM,CAAA;WAAG;AACrCmN,UAAAA,IAAI,EAAE,QAAA;AACR,SAAC,CAAC,CAAA;AACF,QAAA,MAAMW,WAAW,GAAGC,IAAI,CAACC,GAAG,CAC1BN,SAAS,CAAE,CAAC,CAAC,CAAC/L,MAAM,EACpBiM,OAAO,CAAE,CAAC,CAAC,CAACjM,MACd,CAAC,CAAA;QACD4G,WAAW,CACTvI,MAAM,EACN;AAAEK,UAAAA,IAAAA;AAAK,SAAC,EACR;UACEgB,EAAE,EAAErB,MAAM,CAAC8B,SAAS;UACpBR,KAAK,EAAEA,CAACkE,CAAC,EAAEnD,IAAI,KACb2C,SAAS,CAACQ,CAAC,CAAC,IACZ5E,YAAY,CAACZ,MAAM,CAAC,CAAC8F,QAAQ,CAACN,CAAC,CAACnF,IAAI,CAAC,IACrCgC,IAAI,CAACV,MAAM,IAAImM,WAAW;AAC5BX,UAAAA,IAAI,EAAE,KAAA;AACR,SACF,CAAC,CAAA;AACH,OAAA;AACF,KAAC,MAAM;AACL,MAAA,MAAMc,cAAc,GAAGR,WAAW,CAAC,CAAC,CAAC,CAAC9L,MAAM,CAAA;AAC5C,MAAA,MAAMgI,MAAM,GAAGC,cAAc,CAAW5J,MAAM,EAAE;AAC9CmN,QAAAA,IAAI,EAAE,KAAA;AACR,OAAC,CAAC,CAAA;MACF,MAAMC,KAAK,GAAGtD,KAAK,CAACC,IAAI,CAACJ,MAAM,CAAC,CAACuE,MAAM,CACrC,CAAC,GAAG7L,IAAI,CAAC,KAAKA,IAAI,CAACV,MAAM,KAAKsM,cAAc,GAAG,CACjD,CAAC,CAAA;AAEDb,MAAAA,KAAK,CAAClD,OAAO,CAAE1E,CAAC,IAAK;AACnB,QAAA,IAAI5E,YAAY,CAACZ,MAAM,CAAC,CAAC8F,QAAQ,CAACN,CAAC,CAAC,CAAC,CAAC,CAACnF,IAAI,CAAC,EAAE;UAC5CkI,WAAW,CACTvI,MAAM,EACN;AAAEK,YAAAA,IAAAA;AAAK,WAAC,EACR;AACEgB,YAAAA,EAAE,EAAEmE,CAAC,CAAC,CAAC,CAAC;AACRlE,YAAAA,KAAK,EAAG6M,EAAE,IACRnJ,SAAS,CAACmJ,EAAE,CAAC,IAAIvN,YAAY,CAACZ,MAAM,CAAC,CAAC8F,QAAQ,CAACqI,EAAE,CAAC9N,IAAI,CAAC;AACzD8M,YAAAA,IAAI,EAAE,KAAA;AACR,WACF,CAAC,CAAA;AACH,SAAC,MAAM;AACL,UAAA,IAAI,EAACF,oBAAoB,KAAA,IAAA,IAApBA,oBAAoB,KAAA,KAAA,CAAA,IAApBA,oBAAoB,CAAEnH,QAAQ,CAACN,CAAC,CAAC,CAAC,CAAC,CAACnF,IAAI,CAAC,CAAE,EAAA;YAC9CkI,WAAW,CACTvI,MAAM,EACN;AAAEK,cAAAA,IAAI,EAAEC,aAAa,CAACN,MAAM,EAAEe,WAAW,CAAA;AAAE,aAAC,EAC5C;cAAEM,EAAE,EAAEmE,CAAC,CAAC,CAAC,CAAA;AAAE,aACb,CAAC,CAAA;AACH,WAAA;AAEA,UAAA,MAAM/C,QAAQ,GAAG;AACfpC,YAAAA,IAAI,EAAEC,aAAa,CAACN,MAAM,EAAEO,UAAU,CAAC;AACvCmB,YAAAA,QAAQ,EAAE,EAAA;WACX,CAAA;AACDsF,UAAAA,SAAS,CAAWhH,MAAM,EAAEyC,QAAQ,EAAE;YACpCpB,EAAE,EAAEmE,CAAC,CAAC,CAAC,CAAA;AACT,WAAC,CAAC,CAAA;AAEF,UAAA,MAAMrE,IAAI,GAAG;YAAEd,IAAI;AAAEqB,YAAAA,QAAQ,EAAE,EAAA;WAAI,CAAA;AACnCsF,UAAAA,SAAS,CAAWhH,MAAM,EAAEmB,IAAI,EAAE;YAAEE,EAAE,EAAEmE,CAAC,CAAC,CAAC,CAAA;AAAE,WAAC,CAAC,CAAA;AACjD,SAAA;AACF,OAAC,CAAC,CAAA;AACJ,KAAA;AACF,GAAA;AACF,CAAC;;AC1KU4I,MAAAA,iBAAiB,GAAGA,CAC/BpO,MAAsB,EACtBuE,OAAiC,GAAG,EAAE,KACnC+E,aAAa,CAACtJ,MAAM,EAAE;AAAE,EAAA,GAAGuE,OAAO;AAAEgF,EAAAA,QAAQ,EAAE,KAAA;AAAM,CAAC;;ACW7C8E,MAAAA,aAAa,GACxBA,CACErO,MAAS,EACT;EACEK,IAAI;AACJkE,EAAAA,OAAO,EAAE;IAAEc,MAAM;AAAEqE,IAAAA,qBAAAA;AAAsB,GAAA;AACR,CAAC,KAErC4E,CAAC,IAAK;EACL,IAAIA,CAAC,CAACC,gBAAgB,EAAE,OAAA;EAExB,MAAMC,KAAK,GAAGC,OAAO,CAACD,KAAK,CAACxO,MAAM,EAAEsO,CAAC,CAAC,CAAA;EACtC,MAAMI,OAAO,GAAGD,OAAO,CAACC,OAAO,CAAC1O,MAAM,EAAEsO,CAAC,CAAC,CAAA;AAE1C,EAAA,IAAIK,SAAS,GAAG3O,MAAM,CAAC8B,SAAS,CAAA;EAEhC,IAAI9B,MAAM,CAAC8B,SAAS,KAAK0M,KAAK,IAAIE,OAAO,CAAC,EAAE;IAC1C,MAAM;AAAE5M,MAAAA,SAAAA;AAAU,KAAC,GAAG9B,MAAM,CAAA;;AAE5B;AACA,IAAA,IAAI,CAACmC,WAAW,CAACnC,MAAM,CAAC8B,SAAS,CAAC,EAAE;MAClC,MAAM;QAAEQ,MAAM;AAAEF,QAAAA,KAAAA;AAAM,OAAC,GAAGH,KAAK,CAAC2M,UAAU,CAAC9M,SAAS,CAAC,GACjD;AAAEQ,QAAAA,MAAM,EAAE;AAAE,UAAA,GAAGR,SAAS,CAACM,KAAAA;SAAO;AAAEA,QAAAA,KAAK,EAAE;AAAE,UAAA,GAAGN,SAAS,CAACQ,MAAAA;AAAO,SAAA;AAAE,OAAC,GAClE;AAAEA,QAAAA,MAAM,EAAE;AAAE,UAAA,GAAGR,SAAS,CAACQ,MAAAA;SAAQ;AAAEF,QAAAA,KAAK,EAAE;AAAE,UAAA,GAAGN,SAAS,CAACM,KAAAA;AAAM,SAAA;OAAG,CAAA;;AAEtE;AACA;AACA,MAAA,MAAMyM,WAAW,GAAGC,WAAW,CAAC9O,MAAM,EAAE;QAAEsC,MAAM;AAAEF,QAAAA,KAAAA;AAAM,OAAC,CAAC,CAAA;AAC1D,MAAA,IAAIyM,WAAW,EAAE;AACfF,QAAAA,SAAS,GAAGE,WAAW,CAAA;AACvBzK,QAAAA,MAAM,CAACpE,MAAM,EAAE6O,WAAW,CAAC,CAAA;AAC7B,OAAA;AACF,KAAA;;AAEA;AACA,IAAA,MAAME,YAAY,GAAGnJ,QAAQ,CAAC5F,MAAM,EAAE;AACpCsB,MAAAA,KAAK,EAAE;AAAEjB,QAAAA,IAAI,EAAEC,aAAa,CAACN,MAAM,EAAEO,UAAU,CAAA;AAAE,OAAA;AACnD,KAAC,CAAC,CAAA;IAEF,IAAIoO,SAAS,IAAII,YAAY,EAAE;MAC7BT,CAAC,CAACU,cAAc,EAAE,CAAA;MAClB1F,aAAa,CAACtJ,MAAM,EAAE;AACpBqB,QAAAA,EAAE,EAAEsN,SAAS;AACbpF,QAAAA,QAAQ,EAAEiF,KAAK;AACf9E,QAAAA,qBAAAA;AACF,OAAC,CAAC,CAAA;AACF,MAAA,OAAO,IAAI,CAAA;AACb,KAAA;AACF,GAAA;EAEA,IAAI,CAACrE,MAAM,EAAE,OAAA;AAEb,EAAA,MAAM4J,OAAO,GAAGC,WAAA,CAAU7J,MAAM,CAAC,CAAA;AAEjC,EAAA,KAAK,MAAM8J,OAAO,IAAIF,OAAO,EAAE;AAC7B,IAAA,IAAIG,QAAQ,CAACD,OAAO,CAAC,CAACb,CAAQ,CAAC,EAAE;MAC/BvB,UAAU,CAAC/M,MAAM,EAAE;AAAEK,QAAAA,IAAI,EAAEA,IAAAA;AAAM,OAAC,CAAC,CAAA;AACrC,KAAA;AACF,GAAA;AACF;;MC/CWgP,kBAAkB,GAAGA,CAChCrP,MAAsB,EACtBsP,IAAc,KACX;EACH,MAAM9K,GAAG,GAAG3C,gBAAgB,CAAC7B,MAAM,EAAE,EAAE,CAAC,CAAA;EAExC,IAAImG,KAA0B,GAAG,KAAK,CAAA;AAEtC,EAAA,IAAI3B,GAAG,EAAE;IACP,MAAM;MAAErD,IAAI;AAAEsB,MAAAA,QAAAA;AAAS,KAAC,GAAG+B,GAAG,CAAA;IAE9B,IACE+K,uBAAuB,CAACvP,MAAM,EAAE;MAC9BsB,KAAK,EAAGiB,IAAI,IAAKA,IAAI,CAAClC,IAAI,KAAKC,aAAa,CAACN,MAAM,EAAEO,UAAU,CAAA;AACjE,KAAC,CAAC,EACF;MACAgD,kBAAkB,CAACvD,MAAM,EAAE,MAAM;AAC/BmG,QAAAA,KAAK,GAAGkD,mBAAmB,CAACrJ,MAAM,EAAE;UAAEmB,IAAI;AAAEsB,UAAAA,QAAAA;AAAS,SAAC,CAAC,CAAA;QACvD,IAAI0D,KAAK,EAAE,OAAO,IAAI,CAAA;AAEtBA,QAAAA,KAAK,GAAGkG,cAAc,CAACrM,MAAM,EAAE;UAAEmB,IAAI;AAAEsB,UAAAA,QAAAA;AAAS,SAAC,CAAC,CAAA;QAClD,IAAI0D,KAAK,EAAE,OAAO,IAAI,CAAA;AAEtB,QAAA,IAAIqJ,YAAY,CAAC/M,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC1C,YAAY,CAACC,MAAM,EAAEmB,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;AAC/DsO,UAAAA,kBAAkB,CAChBzP,MAAM,EACN0P,UAAU,CAAkB;AAC1BnL,YAAAA,OAAO,EAAE;AACPoL,cAAAA,KAAK,EAAE,CACL;gBACEC,KAAK,EAAE,CAACtP,aAAa,CAACN,MAAM,EAAEO,UAAU,CAAC,CAAC;AAC1CsP,gBAAAA,WAAW,EAAEvP,aAAa,CAACN,MAAM,EAAEwI,eAAe,CAAC;AACnDnD,gBAAAA,MAAM,EAAE,WAAW;AACnByK,gBAAAA,SAAS,EAAEA,MAAMP,uBAAuB,CAACvP,MAAM,CAAC;AAChD+P,gBAAAA,OAAO,EAAGzB,CAAC,IAAKrG,UAAU,CAACqG,CAAC,CAAA;eAC7B,CAAA;AAEL,aAAA;AACF,WAAC,CACH,CAAC,CAAC0B,kBAAkB,CAAC,CAAA;AACrB7J,UAAAA,KAAK,GAAG,IAAI,CAAA;AACZ,UAAA,OAAA;AACF,SAAA;QAEA,MAAM8J,mBAAmB,GAAGC,cAAc,CACxClQ,MAAM,EACNA,MAAM,CAAC8B,SAAS,CAAEM,KACpB,CAAC,CAAA;AAED,QAAA,IAAI+N,UAA4C,CAAA;QAChD,IAAIC,mBAAmB,GAAG,KAAK,CAAA;;AAE/B;QACA,IACEH,mBAAmB,IACnBxK,iBAAiB,CAAC;AAChB,UAAA,GAAGzF,MAAM;AACT8B,UAAAA,SAAS,EAAE;AACTQ,YAAAA,MAAM,EAAEtC,MAAM,CAAC8B,SAAS,CAAEQ,MAAM;AAChCF,YAAAA,KAAK,EAAE6N,mBAAAA;AACT,WAAA;AACF,SAAC,CAAC,EACF;AACA;AACA,UAAA,MAAMhF,OAAO,GAAG3K,aAAa,CAACN,MAAM,EAAEe,WAAW,CAAC,CAAA;AAClD,UAAA,MAAMsP,SAAS,GAAGzG,cAAc,CAAW5J,MAAM,EAAE;AACjDqB,YAAAA,EAAE,EAAEoB,QAAQ,CAAC,CAAC,CAAC;AACf0K,YAAAA,IAAI,EAAE,QAAQ;AACd7L,YAAAA,KAAK,EAAGiB,IAAI,IAAKA,IAAI,CAAClC,IAAI,KAAK4K,OAAAA;AACjC,WAAC,CAAC,CAAA;AACFkF,UAAAA,UAAU,GAAG,CAAC,GAAGE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAA;UAC9BD,mBAAmB,GAAGD,UAAU,CAAC,CAAC,CAAC,CAACzO,QAAQ,CAACC,MAAM,GAAG,CAAC,CAAA;AACzD,SAAA;QAEAkL,WAAW,CAAC7M,MAAM,EAAE;UAClBsP,IAAI;AACJ3E,UAAAA,OAAO,EAAE,IAAA;AACX,SAAC,CAAC,CAAA;AACFxE,QAAAA,KAAK,GAAG,IAAI,CAAA;AAEZ,QAAA,IAAI,CAACgK,UAAU,IAAI,CAACC,mBAAmB,EAAE,OAAA;AAEzC,QAAA,MAAME,gBAAgB,GAAG7J,YAAY,CACnCzG,MAAM,EACNwB,IAAI,CAAC6I,MAAM,CAAC8F,UAAU,CAAC,CAAC,CAAC,CAC3B,CAAE,CAAA;AAEF,QAAA,IAAIG,gBAAgB,IAAIA,gBAAgB,CAAC,CAAC,CAAC,CAAC5O,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;AACjE;UACAmL,WAAW,CAAC9M,MAAM,EAAE;YAAEqB,EAAE,EAAEiP,gBAAgB,CAAC,CAAC,CAAA;AAAE,WAAC,CAAC,CAAA;AAClD,SAAA;AACF,OAAC,CAAC,CAAA;AACJ,KAAA;AACF,GAAA;AAEA,EAAA,OAAOnK,KAAK,CAAA;AACd;;AC9FA,MAAMoK,4BAA4B,GAChCvQ,MAAsB,IACV;AACZ,EAAA,MAAMwQ,mBAAmB,GAAGC,aAAa,CACvCzQ,MAAM,EACNA,MAAM,CAAC8B,SAAS,CAAEM,KAAK,CAACC,IAC1B,CAAC,CAAA;AAED,EAAA,IAAImO,mBAAmB,EAAE;AACvB;AACA,IAAA,MAAME,kBAAkB,GAAG7O,gBAAgB,CAAC7B,MAAM,EAAE;AAClDqB,MAAAA,EAAE,EAAEmP,mBAAAA;AACN,KAAC,CAAC,CAAA;AAEF,IAAA,IAAIE,kBAAkB,EAAE;AACtB;MACA,MAAM;AAAEjO,QAAAA,QAAAA;AAAS,OAAC,GAAGiO,kBAAkB,CAAA;AACvC,MAAA,MAAMC,iBAAiB,GAAGrI,aAAa,CAACtI,MAAM,EAAE;AAC9CqB,QAAAA,EAAE,EAAErB,MAAM,CAAC8B,SAAS,CAAEQ,MAAAA;AACxB,OAAC,CAAC,CAAA;MAEF,IAAI,CAACsO,eAAe,CAAC5Q,MAAM,EAAE2Q,iBAAiB,CAAE,CAAC,CAAC,CAAC,EAAE;AACnD;QACA7D,WAAW,CAAC9M,MAAM,CAAC,CAAA;AAEnB,QAAA,OAAO,IAAI,CAAA;AACb,OAAA;MAEA,IAAIsF,YAAY,CAACtF,MAAM,EAAEyC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;AACrC;AACA,QAAA,MAAMoO,UAAU,GAAGhP,gBAAgB,CAAC7B,MAAM,EAAE;AAC1CqB,UAAAA,EAAE,EAAE,CAAC,GAAGoB,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAA;AAC9B,SAAC,CAAC,CAAA;AAEFkG,QAAAA,cAAc,CAAC3I,MAAM,EAAE6Q,UAAW,CAAC,CAAA;AACrC,OAAA;AACF,KAAA;AACF,GAAA;AAEA,EAAA,OAAO,KAAK,CAAA;AACd,CAAC,CAAA;AAED,MAAMC,yBAAyB,GAAGA,CAChC9Q,MAAsB,EACtBwE,GAAqD,EACrDuM,aAAuC,EACvCzB,IAA6C,KACjC;EACZ,MAAM;AAAE7M,IAAAA,QAAAA;AAAS,GAAC,GAAG+B,GAAG,CAAA;;AAExB;EACA,IAAI,CAACc,YAAY,CAACtF,MAAM,EAAEyC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;AACtC,IAAA,MAAMV,MAAM,GAAGzB,aAAa,CAACN,MAAM,EAAEO,UAAU,CAAC,CAAA;AAChD,IAAA,MAAMoJ,MAAM,GAAGC,cAAc,CAAC5J,MAAM,EAAE;AACpCqB,MAAAA,EAAE,EAAEoB,QAAQ,CAAC,CAAC,CAAC;AACf0K,MAAAA,IAAI,EAAE,QAAQ;AACd7L,MAAAA,KAAK,EAAEA,CAACiB,IAAI,EAAEF,IAAI,KAAK;AAAA,QAAA,IAAA2O,QAAA,CAAA;AACrB,QAAA,IAAI3O,IAAI,CAACV,MAAM,KAAK,CAAC,EAAE;AACrB,UAAA,OAAO,KAAK,CAAA;AACd,SAAA;AAEA,QAAA,MAAMsP,QAAQ,GAAI1O,IAAI,CAAclC,IAAI,KAAK0B,MAAM,CAAA;QACnD,MAAMmP,iBAAiB,GACrB,CAAAF,CAAAA,QAAA,GAAAxO,OAAO,CAAWxC,MAAM,EAAEwB,IAAI,CAACsC,IAAI,CAACzB,IAAI,CAAC,CAAC,MAAA2O,IAAAA,IAAAA,QAAA,uBAA1CA,QAAA,CAA4C3Q,IAAI,MAAK0B,MAAM,CAAA;QAE7D,OAAOkP,QAAQ,IAAIC,iBAAiB,CAAA;AACtC,OAAA;AACF,KAAC,CAAC,CAAA;AACF,IAAA,MAAMC,cAAc,GAAGrH,KAAK,CAACC,IAAI,CAACJ,MAAM,EAAGyH,KAAK,IAAKA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IAEjE,IAAI,CAACD,cAAc,EAAE;AACnB;MACA,MAAME,kBAAkB,GAAGZ,aAAa,CAACzQ,MAAM,EAAEyC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;AAE7D,MAAA,IAAI4O,kBAAkB,EAAE;AACtB;AACA,QAAA,MAAMX,kBAAkB,GAAG7O,gBAAgB,CAAC7B,MAAM,EAAE;AAClDqB,UAAAA,EAAE,EAAEgQ,kBAAAA;AACN,SAAC,CAAC,CAAA;AAEF,QAAA,IAAIX,kBAAkB,EAAE;AACtB;UACA,MAAMY,QAAQ,GAAG5O,WAAW,CAAC1C,MAAM,EAAEyC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;UAEjD0E,mBAAmB,CAACnH,MAAM,EAAE;YAC1BoH,QAAQ,EAAEsJ,kBAAkB,CAACvP,IAAI;AACjCqG,YAAAA,MAAM,EAAE8J,QAAQ;AAChB5J,YAAAA,cAAc,EAAE,IAAA;AAClB,WAAC,CAAC,CAAA;AAEF,UAAA,OAAO,IAAI,CAAA;AACb,SAAA;AACF,OAAA;AAEA,MAAA,OAAO,KAAK,CAAA;AACd,KAAA;AAEA,IAAA,MAAM6J,eAAe,GAAG9K,YAAY,CAClCzG,MAAM,EACNwB,IAAI,CAACsC,IAAI,CAACqN,cAAc,CAC1B,CAAC,CAAA;AACD,IAAA,IAAI,CAACI,eAAe,EAAE,OAAO,KAAK,CAAA;IAElC,MAAMC,WAAW,GAAGpR,aAAa,CAAWJ,MAAM,EAAEuR,eAAe,CAAC,CAAC,CAAC,CAAC,CAAA;AAEvE,IAAA,IACEC,WAAW,IACXnF,cAAc,CAACrM,MAAM,EAAE;AACrBmB,MAAAA,IAAI,EAAEqQ,WAAW;AACjB/O,MAAAA,QAAQ,EAAE8O,eAAe;AACzB5G,MAAAA,OAAO,EAAE,KAAA;AACX,KAAC,CAAC,EACF;AACA,MAAA,OAAO,IAAI,CAAA;AACb,KAAA;IAEA,MAAM0G,kBAAkB,GAAGZ,aAAa,CAACzQ,MAAM,EAAEA,MAAM,CAAC8B,SAAS,CAAEM,KAAK,CAAC,CAAA;AACzE,IAAA,IACE,CAACiP,kBAAkB,IACnB,CAAC5L,iBAAiB,CAAC;AACjB,MAAA,GAAGzF,MAAM;AACT8B,MAAAA,SAAS,EAAE;AACTQ,QAAAA,MAAM,EAAEtC,MAAM,CAAC8B,SAAS,CAAEQ,MAAM;AAChCF,QAAAA,KAAK,EAAEiP,kBAAAA;AACT,OAAA;AACF,KAAC,CAAC,EACF;AACA,MAAA,OAAO,KAAK,CAAA;AACd,KAAA;;AAEA;AACA,IAAA,MAAMpG,OAAO,GAAG3K,aAAa,CAACN,MAAM,EAAEe,WAAW,CAAC,CAAA;AAClD,IAAA,MAAMsP,SAAS,GAAGzG,cAAc,CAAW5J,MAAM,EAAE;MACjDqB,EAAE,EAAEgQ,kBAAkB,CAAChP,IAAI;AAC3B8K,MAAAA,IAAI,EAAE,QAAQ;AACd7L,MAAAA,KAAK,EAAGiB,IAAI,IAAKA,IAAI,CAAClC,IAAI,KAAK4K,OAAAA;AACjC,KAAC,CAAC,CAAA;IACF,MAAMwG,iBAAiB,GAAG,CAAC,GAAGpB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAA;;AAE3C;AACA,IAAA,IAAIoB,iBAAiB,CAAC,CAAC,CAAC,CAAC/P,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE,OAAO,KAAK,CAAA;;AAE1D;IACAoP,aAAa,CAACzB,IAAI,CAAC,CAAA;AAEnB,IAAA,MAAMgB,gBAAgB,GAAG7J,YAAY,CACnCzG,MAAM,EACNwB,IAAI,CAAC6I,MAAM,CAACoH,iBAAiB,CAAC,CAAC,CAAC,CAClC,CAAE,CAAA;AAEF,IAAA,IAAInB,gBAAgB,IAAIA,gBAAgB,CAAC,CAAC,CAAC,CAAC5O,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;AACjE;MACAmL,WAAW,CAAC9M,MAAM,EAAE;QAAEqB,EAAE,EAAEiP,gBAAgB,CAAC,CAAC,CAAA;AAAE,OAAC,CAAC,CAAA;AAClD,KAAA;AAEA,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;;AAEA;EACA,MAAMoB,UAAU,GAAGjL,YAAY,CAC7BzG,MAAM,EACNwB,IAAI,CAACsC,IAAI,CAAC,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAC/B,CAAC,CAAA;AACD,EAAA,IAAI,CAACiP,UAAU,EAAE,OAAO,KAAK,CAAA;EAE7B,MAAMC,cAAc,GAAGC,WAAW,CAAWF,UAAU,CAAC,CAAC,CAAC,CAAC,CAAA;EAE3D,IACErI,mBAAmB,CAACrJ,MAAM,EAAE;AAC1BmB,IAAAA,IAAI,EAAEuQ,UAAU;AAChBjP,IAAAA,QAAQ,EAAEkP,cAAAA;AACZ,GAAC,CAAC,EACF;AACA,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;EAEA,IACEtF,cAAc,CAACrM,MAAM,EAAE;AACrBmB,IAAAA,IAAI,EAAEuQ,UAAU;AAChBjP,IAAAA,QAAQ,EAAEkP,cAAAA;AACZ,GAAC,CAAC,EACF;AACA,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;AAEA,EAAA,OAAO,KAAK,CAAA;AACd,CAAC,CAAA;AAEM,MAAME,iBAAiB,GAAGA,CAC/B7R,MAAsB,EACtB+Q,aAAuC,EACvCzB,IAAc,KACX;EACH,IAAIwC,iBAAiB,GAAG,KAAK,CAAA;EAE7B,IAAI,EAAC9R,MAAM,KAANA,IAAAA,IAAAA,MAAM,eAANA,MAAM,CAAE8B,SAAS,CAAE,EAAA;AACtB,IAAA,OAAOgQ,iBAAiB,CAAA;AAC1B,GAAA;AAEA,EAAA,IAAI,CAACC,qBAAqB,CAAC/R,MAAM,CAAC,EAAE;AAClC,IAAA,OAAO8R,iBAAiB,CAAA;AAC1B,GAAA;EAEAvO,kBAAkB,CAACvD,MAAM,EAAE,MAAM;IAC/B,MAAMwE,GAAG,GAAG3C,gBAAgB,CAAC7B,MAAM,EAAE,EAAE,CAAC,CAAA;IAExC,IAAI,CAACwE,GAAG,EAAE;AACRsN,MAAAA,iBAAiB,GAAGvB,4BAA4B,CAACvQ,MAAM,CAAC,CAAA;AACxD,MAAA,OAAA;AACF,KAAA;IAEA8R,iBAAiB,GAAGhB,yBAAyB,CAC3C9Q,MAAM,EACNwE,GAAG,EACHuM,aAAa,EACbzB,IACF,CAAC,CAAA;AACH,GAAC,CAAC,CAAA;AAEF,EAAA,OAAOwC,iBAAiB,CAAA;AAC1B;;AC1OA,MAAME,UAAU,GAAqBhS,MAAsB,IAAK;EAC9D,MAAMyL,KAAK,GAAGwG,aAAa,CAACjS,MAAM,EAAEA,MAAM,CAAC8B,SAAkB,CAAC,CAAA;EAC9D,OAAOV,YAAY,CAACpB,MAAM,EAAE;AAC1BqB,IAAAA,EAAE,EAAEoK,KAAK;AACTnK,IAAAA,KAAK,EAAE;AAAEjB,MAAAA,IAAI,EAAEC,aAAa,CAACN,MAAM,EAAEO,UAAU,CAAA;AAAE,KAAA;AACnD,GAAC,CAAC,CAAA;AACJ,CAAC,CAAA;AAEY2R,MAAAA,kBAAkB,GAAqBlS,MAAsB,IAAK;EAC7E,IAAImS,OAAO,GAAG,KAAK,CAAA;EAEnB5O,kBAAkB,CAACvD,MAAM,EAAE,MAAM;AAC/B;AACA,IAAA,IAAI,CAACyF,iBAAiB,CAACzF,MAAM,CAAC,EAAE,OAAA;;AAEhC;AACJ;AACA;AACA;IACI,MAAM6N,GAAG,GAAGuE,WAAW,CAACpS,MAAM,EAAEA,MAAM,CAAC8B,SAAkB,CAAC,CAAA;AAC1D,IAAA,MAAMuQ,KAAK,GAAGjR,YAAY,CAACpB,MAAM,EAAE;AACjCqB,MAAAA,EAAE,EAAEwM,GAAG;AACPvM,MAAAA,KAAK,EAAE;AAAEjB,QAAAA,IAAI,EAAEC,aAAa,CAACN,MAAM,EAAEO,UAAU,CAAA;AAAE,OAAA;AACnD,KAAC,CAAC,CAAA;AACF,IAAA,MAAM+R,iBAAiB,GAAGD,KAAK,IAAI,CAAC/M,YAAY,CAACtF,MAAM,EAAEqS,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;AAClE,IAAA,MAAME,YAAY,GAAGD,iBAAiB,GAClC7H,aAAa,CAACzK,MAAM,EAAEqS,KAAK,CAAE,CAAC,CAAC,CAAC,GAChC5I,SAAS,CAAA;;AAEb;IACA,IAAI,CAACuI,UAAU,CAAChS,MAAM,CAAC,IAAI,CAACqS,KAAK,EAAE;AACjCF,MAAAA,OAAO,GAAG,KAAK,CAAA;AACf,MAAA,OAAA;AACF,KAAA;;AAEA;AACJ;AACA;IACItF,WAAW,CAAC7M,MAAM,CAAC,CAAA;AAEnB,IAAA,MAAMwS,OAAO,GAAGR,UAAU,CAAChS,MAAM,CAAC,CAAA;AAElC,IAAA,IAAIuS,YAAY,EAAE;AAChB,MAAA,MAAME,SAAS,GAAGF,YAAY,CAAC1H,KAAK,EAAG,CAAA;AAEvC,MAAA,MAAM6H,SAAS,GAAGF,OAAO,IAAIpS,aAAa,CAACJ,MAAM,EAAEwS,OAAO,CAAC,CAAC,CAAC,CAAC,CAAA;AAE9D,MAAA,MAAMG,UAAU,GAAG3R,mBAAmB,CAAChB,MAAM,EAAE;AAC7CkB,QAAAA,MAAM,EAAEuR,SAAS;AACjBxR,QAAAA,YAAY,EAAEyR,SAAS,KAAA,IAAA,IAATA,SAAS,KAATA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,SAAS,CAAG,CAAC,CAAA;AAC7B,OAAC,CAAC,CAAA;AAEF,MAAA,IAAIC,UAAU,EAAE;QACd7F,WAAW,CAAC9M,MAAM,EAAE;AAAEqB,UAAAA,EAAE,EAAEsR,UAAAA;AAAW,SAAC,CAAC,CAAA;AACzC,OAAA;AAEAR,MAAAA,OAAO,GAAG,IAAI,CAAA;AAChB,KAAA;AACF,GAAC,CAAC,CAAA;AAEF,EAAA,OAAOA,OAAO,CAAA;AAChB;;AC7DaS,MAAAA,eAAe,GAAqB5S,MAAsB,IAAK;AAC1E,EAAA,IAAI,CAACA,MAAM,CAAC8B,SAAS,EAAE,OAAA;EAEvB,MAAM0C,GAAG,GAAG3C,gBAAgB,CAAC7B,MAAM,EAAE,EAAE,CAAC,CAAA;AACxC,EAAA,IAAImG,KAA0B,CAAA;;AAE9B;AACA,EAAA,IAAI3B,GAAG,EAAE;IACP,MAAM;MAAErD,IAAI;AAAEsB,MAAAA,QAAAA;AAAS,KAAC,GAAG+B,GAAG,CAAA;;AAE9B;AACA,IAAA,IAAIqO,iBAAiB,CAAC7S,MAAM,CAAC,EAAE;AAC7BmG,MAAAA,KAAK,GAAGwC,cAAc,CAAC3I,MAAM,EAAE;QAC7BmB,IAAI;AACJsB,QAAAA,QAAAA;AACF,OAAC,CAAC,CAAA;MAEF,IAAI0D,KAAK,EAAE,OAAO,IAAI,CAAA;AACxB,KAAA;AACF,GAAA;AAEA,EAAA,MAAM2M,QAAQ,GAAGrD,kBAAkB,CACjCzP,MAAM,EACN0P,UAAU,CAAkB;AAC1BnL,IAAAA,OAAO,EAAE;AACPoL,MAAAA,KAAK,EAAE,CACL;QACEC,KAAK,EAAE,CAACtP,aAAa,CAACN,MAAM,EAAEO,UAAU,CAAC,CAAC;AAC1CsP,QAAAA,WAAW,EAAEvP,aAAa,CAACN,MAAM,EAAEwI,eAAe,CAAC;QACnDsH,SAAS,EAAEA,MAAM,CAAC3J,KAAK,IAAI0M,iBAAiB,CAAC7S,MAAM,CAAC;AACpD+P,QAAAA,OAAO,EAAGgD,OAAO,IAAK9K,UAAU,CAAC8K,OAAO,CAAA;OACzC,CAAA;AAEL,KAAA;AACF,GAAC,CACH,CAAC,CAAC/C,kBAAyB,CAAC,CAAA;EAC5B,IAAI8C,QAAQ,EAAE,OAAO,IAAI,CAAA;;AAEzB;AACF;AACA;EACE,IAAI,CAAC3M,KAAK,EAAE;AACV,IAAA,MAAMzB,QAAQ,GAAGsG,cAAc,CAAChL,MAAM,CAAC,CAAA;IACvC,IAAI0E,QAAQ,EAAE,OAAO,IAAI,CAAA;AAC3B,GAAA;AACF;;AClCasO,MAAAA,kBAAkB,GAAqBhT,MAAsB,IAAK;EAC7E,MAAM;AAAEiT,IAAAA,cAAAA;AAAe,GAAC,GAAGjT,MAAM,CAAA;AAEjC,EAAA,MAAMkT,cAAc,GAAGC,SAAS,CAAQnT,MAAM,EAAEO,UAAU,CAAC,CAAA;AAC3D,EAAA,MAAM6S,YAAY,GAAGvS,eAAe,CAACb,MAAM,CAAC,CAAA;AAC5C,EAAA,MAAMqT,mBAAmB,GAAGvS,sBAAsB,CAACd,MAAM,CAAC,CAAA;AAE1D,EAAA,MAAMsT,sBAAsB,GAAGA,CAC7BC,IAAiB,EACjBnC,KAAuB,EACvB;AAAE/Q,IAAAA,IAAAA;AAAsB,GAAC,KACN;IACnB,IAAImT,QAAc,GAAGhS,IAAI,CAAC6I,MAAM,CAAC+G,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;IAC1C,OAAO5O,OAAO,CAAW+Q,IAAI,EAAEC,QAAQ,CAAC,CAAEnT,IAAI,KAAKA,IAAI,EAAE;AACvDmT,MAAAA,QAAQ,GAAGhS,IAAI,CAAC6I,MAAM,CAACmJ,QAAQ,CAAC,CAAA;AAClC,KAAA;IAEA,OAAO,CAAChR,OAAO,CAAY+Q,IAAI,EAAEC,QAAQ,CAAC,EAAGA,QAAQ,CAAC,CAAA;GACvD,CAAA;EAED,MAAMC,wBAAwB,GAAIC,KAAkB,IAAoB;IACtE,IAAIC,IAAI,GAAG,IAAI,CAAA;IACf,IAAIpR,IAAI,GAAGmR,KAAK,CAAA;IAChB,OACE7N,UAAU,CAAC7F,MAAM,EAAEuC,IAAI,CAAC,IACvBA,IAAI,CAAClC,IAAI,KAAK+S,YAAY,IACxB7Q,IAAI,CAACb,QAAQ,CAAgB,CAAC,CAAC,CAACrB,IAAI,KAAKgT,mBAAoB,EAChE;AACAM,MAAAA,IAAI,GAAGpR,IAAI,CAAA;AACX,MAAA,CAACA,IAAI,CAAC,GAAGA,IAAI,CAACb,QAAyB,CAAA;AACzC,KAAA;IAEA,OAAOiS,IAAI,GAAIA,IAAI,CAACjS,QAAQ,GAAqB,CAACa,IAAI,CAAC,CAAA;GACxD,CAAA;;AAED;AACF;AACA;AACA;AACA;EACE,MAAMqR,QAAQ,GAAItC,QAAqB,IAAiB;AACtD,IAAA,IAAI,CAACzL,UAAU,CAAC7F,MAAM,EAAEsR,QAAQ,CAAC,EAAE;MACjC,OAAO,CAACA,QAAQ,CAAa,CAAA;AAC/B,KAAA;AAEA,IAAA,MAAMuC,MAAM,GAAGC,YAAY,CAACxC,QAAQ,CAAC,CAAA;AACrC,IAAA,MAAMyC,WAAW,GAAGjK,KAAK,CAACC,IAAI,CAAC8J,MAAM,CAAC,CAAA;AAEtC,IAAA,MAAMG,mBAAmB,GAAGD,WAAW,CAACE,MAAM,CAC5C,CAACC,cAAc,EAAEC,SAAS,KACxB3S,IAAI,CAAC8I,UAAU,CAAC4J,cAAc,CAAC,CAAC,CAAC,EAAEC,SAAS,CAAC,CAAC,CAAC,CAAC,GAC5CD,cAAc,GACb9L,aAAa,CAACkJ,QAAQ,EAAE6C,SAAS,CAAC,CAAC,CAAC,EAAED,cAAc,CAAC,CAAC,CAAC,CAAS;AACvE;IACAZ,sBAAsB,CAAChC,QAAQ,EAAEyC,WAAW,CAAC,CAAC,CAAC,EAAEb,cAAqB,CACxE,CAAC,CAAA;AAED,IAAA,MAAM,CAACQ,KAAK,EAAE,GAAGU,IAAI,CAAC,GAAGvO,UAAU,CACjC7F,MAAM,EACNgU,mBAAmB,CAAC,CAAC,CACvB,CAAC,GACIA,mBAAmB,CAAC,CAAC,CAAC,CAAStS,QAAQ,GACxC,CAACsS,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAA;IAC5B,OAAO,CAAC,GAAGP,wBAAwB,CAACC,KAAK,CAAC,EAAE,GAAGU,IAAI,CAAC,CAAA;GACrD,CAAA;EAED,MAAMC,oBAAoB,GAAI9R,IAAiB,IAAe;AAC5D,IAAA,OAAOA,IAAI,CAAClC,IAAI,KAAK+S,YAAY,GAC5B7Q,IAAI,GACJ;AACClC,MAAAA,IAAI,EAAE+S,YAAY;MAClB1R,QAAQ,EAAE,CAACa,IAAI,CAAA;KACH,CAAA;GACnB,CAAA;;AAED;AACF;AACA;EACE,MAAM+R,WAAW,GAAIC,QAAuB,IAAK;AAC/C,IAAA,MAAMC,sBAAsB,GAC1BD,QAAQ,CAAC5S,MAAM,KAAK,CAAC,IAAIkE,UAAU,CAAC7F,MAAM,EAAEuU,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;AAE1D,IAAA,OACEC,sBAAsB,IACtB,CAAC,GAAGC,QAAQ,CAAC;AAAE/S,MAAAA,QAAQ,EAAE6S,QAAAA;AAAS,KAAQ,CAAC,CAAC,CACzCrG,MAAM,CAAEkD,KAAK,IAA6BpM,SAAS,CAACoM,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAC9DlD,MAAM,CAAC,CAAC,CAAC3L,IAAI,CAAC,KAAKA,IAAI,CAAClC,IAAI,KAAKgT,mBAAmB,CAAC,CAAC1R,MAAM,KAAK,CAAC,CAAA;GAExE,CAAA;EAED,MAAM+S,uBAAuB,GAAGA,CAC9BH,QAAuB,EACvBI,OAAsB,EACtBtM,QAAuB,KACpB;AACH,IAAA,MAAM,GAAGnH,MAAM,CAAC,GAAGyT,OAAO,CAAA;AAC1B,IAAA,MAAM,CAACC,OAAO,EAAExK,OAAO,CAAC,GAAG/B,QAAQ,CAAA;AACnC,IAAA,MAAMwM,WAAW,GAAG,CAACC,aAAa,CAACF,OAAO,CAAC,CAAA;AAC3C,IAAA,MAAM,CAAClB,KAAK,EAAE,GAAGU,IAAI,CAAC,GAAGG,QAAQ,CAC9BQ,OAAO,CAACnB,QAAQ,CAAC,CACjBoB,GAAG,CAACX,oBAAoB,CAAC,CAAA;AAC5B,IAAA,IAAIY,QAAe,CAAA;AACnB,IAAA,IAAIC,aAAyB,CAAA;IAC7B,IAAIrP,UAAU,CAAC7F,MAAM,EAAEuU,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;AACnC,MAAA,IAAID,WAAW,CAACC,QAAQ,CAAC,EAAE;AACzBU,QAAAA,QAAQ,GAAGvB,KAAY,CAAA;AACvBwB,QAAAA,aAAa,GAAGd,IAAkB,CAAA;OACnC,MAAM,IAAIS,WAAW,EAAE;AACtB;AACA,QAAA,MAAMM,EAAE,GAAG3S,OAAO,CAACxC,MAAM,EAAEkB,MAAM,CAAC,CAAA;AAClC,QAAA,MAAM,GAAG,GAAGkU,eAAe,CAAC,GAAGD,EAAE,CAAEzT,QAAsB,CAAA;QACzD,MAAM,CAAC2T,MAAM,EAAE,GAAGC,WAAW,CAAC,GAAG5B,KAAK,CAAChS,QAAsB,CAAA;AAC7DqC,QAAAA,cAAc,CAAC/D,MAAM,EAAEqV,MAAM,EAAE;AAC7BhU,UAAAA,EAAE,EAAEG,IAAI,CAACsC,IAAI,CAACsG,OAAO,CAAC;AACtBhG,UAAAA,MAAM,EAAE,IAAA;AACV,SAAC,CAAC,CAAA;QACF0I,WAAW,CAAC9M,MAAM,EAAE;AAClBqB,UAAAA,EAAE,EAAE+I,OAAAA;AACN,SAAC,CAAC,CAAA;AACF,QAAA,IAAIkL,WAAW,KAAXA,IAAAA,IAAAA,WAAW,eAAXA,WAAW,CAAE3T,MAAM,EAAE;AACvB,UAAA,IAAIyT,eAAe,KAAfA,IAAAA,IAAAA,eAAe,eAAfA,eAAe,CAAEzT,MAAM,EAAE;AAC3B;YACA,MAAMU,IAAI,GAAG,CAAC,GAAGnB,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;YAC9B6C,cAAc,CAAC/D,MAAM,EAAEsV,WAAW,CAAC,CAAC,CAAC,CAAC5T,QAAQ,EAAgB;AAC5DL,cAAAA,EAAE,EAAEgB,IAAI;AACR+B,cAAAA,MAAM,EAAE,IAAA;AACV,aAAC,CAAC,CAAA;AACJ,WAAC,MAAM;AACLL,YAAAA,cAAc,CAAC/D,MAAM,EAAEsV,WAAW,EAAE;AAClCjU,cAAAA,EAAE,EAAEG,IAAI,CAACsC,IAAI,CAACsG,OAAO,CAAC;AACtBhG,cAAAA,MAAM,EAAE,IAAA;AACV,aAAC,CAAC,CAAA;AACJ,WAAA;AACF,SAAA;AAEA6Q,QAAAA,QAAQ,GAAG;AAAEhR,UAAAA,IAAI,EAAE,EAAA;SAAI,CAAA;AACvBiR,QAAAA,aAAa,GAAGd,IAAkB,CAAA;AACpC,OAAC,MAAM;AACLa,QAAAA,QAAQ,GAAG;AAAEhR,UAAAA,IAAI,EAAE,EAAA;SAAI,CAAA;AACvBiR,QAAAA,aAAa,GAAG,CAACxB,KAAK,EAAc,GAAIU,IAAmB,CAAC,CAAA;AAC9D,OAAA;AACF,KAAC,MAAM;AACLa,MAAAA,QAAQ,GAAGvB,KAAY,CAAA;AACvBwB,MAAAA,aAAa,GAAGd,IAAkB,CAAA;AACpC,KAAA;IAEA,OAAO;MAAEa,QAAQ;AAAEC,MAAAA,aAAAA;KAAe,CAAA;GACnC,CAAA;AAED,EAAA,OAAQX,QAAuB,IAAK;AAClC,IAAA,IAAII,OAAO,GAAGhH,QAAQ,CAAW3N,MAAM,EAAE;AACvCsB,MAAAA,KAAK,EAAE;AAAEjB,QAAAA,IAAI,EAAE+S,YAAAA;OAAc;AAC7BjG,MAAAA,IAAI,EAAE,QAAA;AACR,KAAC,CAAC,CAAA;AACF;IACA,IAAI,CAACwH,OAAO,EAAE;AACZ,MAAA,OAAO1B,cAAc,CACnBpN,UAAU,CAAC7F,MAAM,EAAEuU,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;AAAEtQ,QAAAA,IAAI,EAAE,EAAA;AAAG,OAAC,EAAE,GAAGsQ,QAAQ,CAAC,GAAGA,QAClE,CAAC,CAAA;AACH,KAAA;;AAEA;AACAtB,IAAAA,cAAc,CAAC,CAAC;AAAEhP,MAAAA,IAAI,EAAE,EAAA;AAAG,KAAC,CAAQ,CAAC,CAAA;;AAErC;AACA0Q,IAAAA,OAAO,GAAGhH,QAAQ,CAAW3N,MAAM,EAAE;AACnCsB,MAAAA,KAAK,EAAE;AAAEjB,QAAAA,IAAI,EAAE+S,YAAAA;OAAc;AAC7BjG,MAAAA,IAAI,EAAE,QAAA;AACR,KAAC,CAAC,CAAA;AAEF,IAAA,MAAM9E,QAAQ,GAAGsF,QAAQ,CAAW3N,MAAM,EAAE;AAC1CsB,MAAAA,KAAK,EAAE;AAAEjB,QAAAA,IAAI,EAAEgT,mBAAAA;OAAqB;AACpClG,MAAAA,IAAI,EAAE,QAAA;AACR,KAAC,CAAC,CAAA;IACF,IAAI,CAAC9E,QAAQ,EAAE;AACb,MAAA,OAAO4K,cAAc,CACnBpN,UAAU,CAAC7F,MAAM,EAAEuU,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;AAAEtQ,QAAAA,IAAI,EAAE,EAAA;AAAG,OAAC,EAAE,GAAGsQ,QAAQ,CAAC,GAAGA,QAClE,CAAC,CAAA;AACH,KAAA;IAEA,MAAM;MAAEU,QAAQ;AAAEC,MAAAA,aAAAA;KAAe,GAAGR,uBAAuB,CACzDH,QAAQ,EACRI,OAAO,EACPtM,QACF,CAAC,CAAA;AAED4K,IAAAA,cAAc,CAAQ,CAACgC,QAAQ,CAAC,CAAC,CAAC;;AAElC,IAAA,MAAM,GAAG/T,MAAM,CAAC,GAAGyT,OAAQ,CAAA;AAE3B,IAAA,OAAO5Q,cAAc,CAAC/D,MAAM,EAAEkV,aAAa,EAAE;AAC3C7T,MAAAA,EAAE,EAAEG,IAAI,CAACsC,IAAI,CAAC5C,MAAM,CAAC;AACrBkD,MAAAA,MAAM,EAAE,IAAA;AACV,KAAC,CAAC,CAAA;GACH,CAAA;AACH;;ACzMA;AACA;AACA;AACA;AACA;AACamR,MAAAA,qBAAqB,GAAGA,CACnCvV,MAAsB,EACtB;AACE0B,EAAAA,QAAAA;AAGF,CAAC,KACE;EACH,MAAM8T,cAAyC,GAAG,EAAE,CAAA;AAEpD,EAAA,KAAK,MAAMC,KAAK,IAAI/T,QAAQ,EAAE;IAC5B,IAAIgU,OAAO,CAAC1V,MAAM,EAAEyV,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;AAC7BD,MAAAA,cAAc,CAAChL,IAAI,CACjB,GAAG+K,qBAAqB,CAACvV,MAAM,EAAE;QAC/B0B,QAAQ,EAAEkQ,WAAW,CAAC6D,KAAK,CAAA;AAC7B,OAAC,CACH,CAAC,CAAA;AACH,KAAC,MAAM;AACLD,MAAAA,cAAc,CAAChL,IAAI,CAACiL,KAAK,CAAC,CAAA;AAC5B,KAAA;AACF,GAAA;AAEA,EAAA,OAAOD,cAAc,CAAA;AACvB,EAAC;;AAED;AACA;AACA;AACA;AACaG,MAAAA,iBAAiB,GAAGA,CAC/B3V,MAAsB,EACtB;EACEyC,QAAQ;AACRwK,EAAAA,oBAAoB,GAAG,EAAA;AACiB,CAAC,KACxC;EACH,IAAI2I,OAAO,GAAG,KAAK,CAAA;AAEnB,EAAA,MAAMC,uBAAuB,GAAG,IAAIC,GAAG,CAAC,CACtCxV,aAAa,CAACN,MAAM,EAAES,UAAU,CAAC,EACjCH,aAAa,CAACN,MAAM,EAAEW,UAAU,CAAC,EACjCL,aAAa,CAACN,MAAM,EAAEe,WAAW,CAAC,EAClC,GAAGkM,oBAAoB,CACxB,CAAC,CAAA;AAEF,EAAA,MAAM,GAAG/L,MAAM,CAAC,GAAGuB,QAAQ,CAAA;AAC3B,EAAA,MAAMsT,UAAU,GAAGnE,WAAW,CAAWnP,QAAQ,CAAC,CAAA;;AAElD;AACA,EAAA,MAAMuT,yBAAyB,GAAGD,UAAU,CACzC7H,MAAM,CAAC,CAAC,CAACuH,KAAK,CAAC,KAAK,CAACI,uBAAuB,CAACI,GAAG,CAACR,KAAK,CAACpV,IAAI,CAAC,CAAC,CAC7D2U,GAAG,CAAC,CAAC,GAAGkB,SAAS,CAAC,KAAKzL,aAAa,CAACzK,MAAM,EAAEkW,SAAS,CAAC,CAAC,CAAA;AAE3D,EAAA,MAAMC,YAAuC,GAAGJ,UAAU,CAAC,CAAC,CAAC,CAAA;AAC7D,EAAA,MAAM,CAACK,gBAAgB,EAAEC,gBAAgB,CAAC,GAAGF,YAAY,KAAA,IAAA,IAAZA,YAAY,KAAA,KAAA,CAAA,GAAZA,YAAY,GAAI,EAAE,CAAA;;AAE/D;EACA,IAAI,CAACA,YAAY,IAAI,CAACT,OAAO,CAAC1V,MAAM,EAAEoW,gBAAgB,CAAC,EAAE;IACvDE,kBAAkB,CAACtW,MAAM,EAAEM,aAAa,CAACN,MAAM,EAAEe,WAAW,CAAC,EAAE;AAC7DM,MAAAA,EAAE,EAAEH,MAAM,CAAC6F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;AACvB,KAAC,CAAC,CAAA;AACF,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;;AAEA;AACA,EAAA,IACE2O,OAAO,CAAC1V,MAAM,EAAEoW,gBAAgB,CAAC,IACjC,CAAC9U,KAAK,CAAC8U,gBAAgB,EAAE,EAAE,EAAE;AAC3B/V,IAAAA,IAAI,EAAEC,aAAa,CAACN,MAAM,EAAEe,WAAW,CAAA;AACzC,GAAC,CAAC,EACF;AACA,IAAA,IACEO,KAAK,CAAC8U,gBAAgB,EAAE,EAAE,EAAE;MAC1B/V,IAAI,EAAEO,YAAY,CAACZ,MAAM,CAAA;AAC3B,KAAC,CAAC,EACF;AACA;MACA,MAAMqK,MAAM,GAAGjK,aAAa,CAACJ,MAAM,EAAEyC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;MACjD,MAAMmE,OAAO,GAAGuP,YAAY,CAAA;MAC5B,MAAMzU,QAAQ,GAAGkQ,WAAW,CAAWuE,YAAY,CAAC,CAACxL,OAAO,EAAE,CAAA;AAC9DjJ,MAAAA,QAAQ,CAACwI,OAAO,CAAEqM,CAAC,IAAK;QACtB5N,cAAc,CAAC3I,MAAM,EAAE;AACrBmB,UAAAA,IAAI,EAAEyF,OAAO;AACbnE,UAAAA,QAAQ,EAAE8T,CAAAA;AACZ,SAAC,CAAC,CAAA;AACJ,OAAC,CAAC,CAAA;MAEFzJ,WAAW,CAAC9M,MAAM,EAAE;QAAEqB,EAAE,EAAE,CAAC,GAAGgJ,MAAM,CAAE,CAAC,CAAC,EAAE,CAAC,CAAA;AAAE,OAAC,CAAC,CAAA;AAE/C,MAAA,OAAO,IAAI,CAAA;AACb,KAAA;;AAEA;IACA,IAAI4C,oBAAoB,CAACnH,QAAQ,CAACsQ,gBAAgB,CAAC/V,IAAI,CAAC,EAAE;AACxD,MAAA,OAAO,IAAI,CAAA;AACb,KAAA;IAEAkI,WAAW,CACTvI,MAAM,EACN;AACEK,MAAAA,IAAI,EAAEC,aAAa,CAACN,MAAM,EAAEe,WAAW,CAAA;AACzC,KAAC,EACD;AACEM,MAAAA,EAAE,EAAEgV,gBAAAA;AACN,KACF,CAAC,CAAA;AAEDT,IAAAA,OAAO,GAAG,IAAI,CAAA;AAChB,GAAA;AAEA,EAAA,MAAMY,WAAW,GAAG5E,WAAW,CAACuE,YAAY,CAAC,CAAA;AAE7C,EAAA,IAAIK,WAAW,CAAC7U,MAAM,GAAG,CAAC,EAAE;IAC1B,MAAM8U,aAAwB,GAAG,EAAE,CAAA;IACnC,MAAMjB,cAA4B,GAAG,EAAE,CAAA;;AAEvC;AACA,IAAA,KAAK,MAAMkB,QAAQ,IAAIF,WAAW,EAAE;MAClC,IAAI,CAACd,OAAO,CAAC1V,MAAM,EAAE0W,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;AACjC,QAAA,MAAA;AACF,OAAA;AAEAD,MAAAA,aAAa,CAACjM,IAAI,CAACC,aAAa,CAACzK,MAAM,EAAE0W,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAEtDlB,MAAAA,cAAc,CAAChL,IAAI,CACjB,GAAG+K,qBAAqB,CAACvV,MAAM,EAAE;QAC/B0B,QAAQ,EAAEkQ,WAAW,CAAC8E,QAAQ,CAAA;AAChC,OAAC,CACH,CAAC,CAAA;AACH,KAAA;AAEA,IAAA,MAAMxP,EAAE,GAAG1F,IAAI,CAACsC,IAAI,CAAC0S,WAAW,CAACnV,EAAE,CAAC,CAAC,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAAA;;AAE5C;IACAmU,cAAc,CAAC7K,OAAO,EAAE,CAACT,OAAO,CAAC,CAAC,GAAG7H,IAAI,CAAC,KAAK;MAC7C4E,SAAS,CAACjH,MAAM,EAAE;AAChBqB,QAAAA,EAAE,EAAEgB,IAAI;AACR6E,QAAAA,EAAAA;AACF,OAAC,CAAC,CAAA;AACJ,KAAC,CAAC,CAAA;;AAEF;AACAuP,IAAAA,aAAa,CAACvM,OAAO,CAAEyM,OAAO,IAAK;AACjC,MAAA,MAAMtU,IAAI,GAAGsU,OAAO,CAAC9L,KAAK,EAAE,CAAA;AAE5BxI,MAAAA,IAAI,IACFyK,WAAW,CAAC9M,MAAM,EAAE;AAClBqB,QAAAA,EAAE,EAAEgB,IAAAA;AACN,OAAC,CAAC,CAAA;AACN,KAAC,CAAC,CAAA;AAEF,IAAA,IAAIoU,aAAa,CAAC9U,MAAM,GAAG,CAAC,EAAE;AAC5BiU,MAAAA,OAAO,GAAG,IAAI,CAAA;AAChB,KAAA;AACF,GAAA;EAEA,IAAIA,OAAO,EAAE,OAAO,IAAI,CAAA;;AAExB;EACAI,yBAAyB,CAACrL,OAAO,EAAE,CAACT,OAAO,CAAE0M,GAAG,IAAK;AACnD,IAAA,MAAMvU,IAAI,GAAGuU,GAAG,CAAC/L,KAAK,EAAE,CAAA;AAExBxI,IAAAA,IAAI,IACF4E,SAAS,CAACjH,MAAM,EAAE;AAChBqB,MAAAA,EAAE,EAAEgB,IAAI;AACR6E,MAAAA,EAAE,EAAEmP,gBAAgB,CAACtP,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;AACjC,KAAC,CAAC,CAAA;AACN,GAAC,CAAC,CAAA;AAEF,EAAA,OAAOiP,yBAAyB,CAACrU,MAAM,GAAG,CAAC,CAAA;AAC7C;;AC1LA;AACA;AACA;AACakV,MAAAA,mBAAmB,GAAGA,CACjC7W,MAAsB,EACtB;AAAE2R,EAAAA,cAAAA;AAAkD,CAAC,KAClD;AACH,EAAA,MAAM,GAAGtP,IAAI,CAAC,GAAGsP,cAAc,CAAA;AAE/B,EAAA,MAAMmF,UAAU,GAAG1W,aAAa,CAACJ,MAAM,EAAEqC,IAAI,CAAC,CAAA;AAC9C,EAAA,MAAM0U,aAAa,GACjBD,UAAU,IAAIxV,KAAK,CAACwV,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE;IAAEzW,IAAI,EAAEO,YAAY,CAACZ,MAAM,CAAA;AAAE,GAAC,CAAC,CAAA;EACxE,IAAI,CAAC+W,aAAa,EAAE;AAClB,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;AAEA,EAAA,IAAI1Q,oBAA0B,CAAA;EAC9B,IAAI;AACFA,IAAAA,oBAAoB,GAAG7E,IAAI,CAAC8E,QAAQ,CAACjE,IAAI,CAAC,CAAA;GAC3C,CAAC,OAAOkE,KAAK,EAAE;AACd,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;;AAEA;AACA,EAAA,MAAMC,mBAAmB,GAAGC,YAAY,CACtCzG,MAAM,EACNqG,oBACF,CAAC,CAAA;AAED,EAAA,IAAIG,mBAAmB,EAAE;AACvB,IAAA,MAAM,GAAGG,YAAY,CAAC,GAAGH,mBAAmB,CAAA;IAC5C,MAAMM,OAAO,GAAGH,YAAY,CAACI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;;AAExC;IACAE,SAAS,CAACjH,MAAM,EAAE;AAChBqB,MAAAA,EAAE,EAAEgB,IAAI;AACR6E,MAAAA,EAAE,EAAEJ,OAAAA;AACN,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;AACF;;AC7BA;AACA;AACA;AACakQ,MAAAA,aAAa,GAAGA,CAC3BhX,MAAsB,EACtB;AAAEiN,EAAAA,oBAAAA;AAAiC,CAAC,KACjC;EACH,MAAM;AAAEgK,IAAAA,aAAAA;AAAc,GAAC,GAAGjX,MAAM,CAAA;AAChC,EAAA,MAAM+B,MAAM,GAAGzB,aAAa,CAACN,MAAM,EAAEO,UAAU,CAAC,CAAA;AAChD,EAAA,MAAM0K,OAAO,GAAG3K,aAAa,CAACN,MAAM,EAAEe,WAAW,CAAC,CAAA;AAClD,EAAA,MAAM8O,WAAW,GAAGvP,aAAa,CAACN,MAAM,EAAEwI,eAAe,CAAC,CAAA;AAE1D,EAAA,OAAO,CAAC,CAACjG,IAAI,EAAEF,IAAI,CAAa,KAAK;AAAA,IAAA,IAAAnC,cAAA,CAAA;AACnC,IAAA,IAAI,CAAC8E,SAAS,CAACzC,IAAI,CAAC,EAAE;AACpB,MAAA,OAAO0U,aAAa,CAAC,CAAC1U,IAAI,EAAEF,IAAI,CAAC,CAAC,CAAA;AACpC,KAAA;AAEA,IAAA,IAAIwD,UAAU,CAAC7F,MAAM,EAAEuC,IAAI,CAAC,EAAE;MAC5B,MAAM2U,UAAU,GAAGtF,WAAW,CAAC,CAACrP,IAAI,EAAEF,IAAI,CAAC,CAAC,CAACwE,IAAI,CAC/C,CAAC,CAAC4O,KAAK,CAAC,KAAKA,KAAK,CAACpV,IAAI,KAAK0B,MAC9B,CAAC,CAAA;AAED,MAAA,IAAImV,UAAU,EAAE;QACd,OAAOlQ,SAAS,CACdhH,MAAM,EACN;AAAEK,UAAAA,IAAI,EAAE0B,MAAM;AAAEL,UAAAA,QAAQ,EAAE,EAAA;AAAG,SAAC,EAC9B;UAAEL,EAAE,EAAE6V,UAAU,CAAC,CAAC,CAAA;AAAE,SACtB,CAAC,CAAA;AACH,OAAA;AACF,KAAA;;AAEA;AACA,IAAA,IAAI5V,KAAK,CAACiB,IAAI,EAAE,EAAE,EAAE;MAAElC,IAAI,EAAEO,YAAY,CAACZ,MAAM,CAAA;AAAE,KAAC,CAAC,EAAE;MACnD,IACEuC,IAAI,CAACb,QAAQ,CAACC,MAAM,KAAK,CAAC,IAC1B,CAACY,IAAI,CAACb,QAAQ,CAAC6D,IAAI,CAAE4R,IAAI,IAAKA,IAAI,CAAC9W,IAAI,KAAK0B,MAAM,CAAC,EACnD;QACA,OAAO+K,WAAW,CAAC9M,MAAM,EAAE;AAAEqB,UAAAA,EAAE,EAAEgB,IAAAA;AAAK,SAAC,CAAC,CAAA;AAC1C,OAAA;AAEA,MAAA,MAAM+U,QAAQ,GAAG5V,IAAI,CAACsC,IAAI,CAACzB,IAAI,CAAC,CAAA;AAChC,MAAA,MAAMgV,QAAQ,GAAG7U,OAAO,CAAWxC,MAAM,EAAEoX,QAAQ,CAAC,CAAA;;AAEpD;AACA,MAAA,IAAI,CAAAC,QAAQ,KAARA,IAAAA,IAAAA,QAAQ,KAARA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAQ,CAAEhX,IAAI,MAAKkC,IAAI,CAAClC,IAAI,EAAE;QAChC8G,mBAAmB,CAACnH,MAAM,EAAE;AAC1BoH,UAAAA,QAAQ,EAAE,CAACiQ,QAAQ,EAAED,QAAQ,CAAC;AAC9B5P,UAAAA,MAAM,EAAE,CAACjF,IAAI,EAAEF,IAAI,CAAC;AACpBqF,UAAAA,cAAc,EAAE,IAAA;AAClB,SAAC,CAAC,CAAA;AACJ,OAAA;AAEA,MAAA,MAAM4P,QAAQ,GAAG9K,eAAe,CAACnK,IAAI,CAAS,CAAA;AAC9C,MAAA,MAAMkV,QAAQ,GAAG/U,OAAO,CAAWxC,MAAM,EAAEsX,QAAQ,CAAC,CAAA;;AAEpD;AACA,MAAA,IAAI,CAAAC,QAAQ,KAARA,IAAAA,IAAAA,QAAQ,KAARA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAQ,CAAElX,IAAI,MAAKkC,IAAI,CAAClC,IAAI,EAAE;QAChCL,MAAM,CAACiX,aAAa,CAAC,CAACM,QAAQ,EAAED,QAAQ,CAAC,CAAC,CAAA;;AAE1C;AACA,QAAA,OAAA;AACF,OAAA;MAEA,IAAIT,mBAAmB,CAAC7W,MAAM,EAAE;AAAE2R,QAAAA,cAAc,EAAE,CAACpP,IAAI,EAAEF,IAAI,CAAA;AAAE,OAAC,CAAC,EAAE;AACjE,QAAA,OAAA;AACF,OAAA;AACF,KAAA;AAEA,IAAA,IACEE,IAAI,CAAClC,IAAI,KAAKC,aAAa,CAACN,MAAM,EAAEO,UAAU,CAAC,IAC/CoV,iBAAiB,CAAC3V,MAAM,EAAE;AACxByC,MAAAA,QAAQ,EAAE,CAACF,IAAI,EAAEF,IAAI,CAAC;AACtB4K,MAAAA,oBAAAA;AACF,KAAC,CAAC,EACF;AACA,MAAA,OAAA;AACF,KAAA;;AAEA;AACA,IAAA,IACE1K,IAAI,CAAClC,IAAI,KAAK4K,OAAO,IACrBA,OAAO,KAAK4E,WAAW,IACvB,CAAA3P,CAAAA,cAAA,GAAAE,aAAa,CAACJ,MAAM,EAAEqC,IAAI,CAAC,MAAAnC,IAAAA,IAAAA,cAAA,KAA3BA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,cAAA,CAA8B,CAAC,CAAC,CAACG,IAAI,MAAK0B,MAAM,EAChD;MACAwG,WAAW,CAACvI,MAAM,EAAE;AAAEK,QAAAA,IAAI,EAAEwP,WAAAA;AAAY,OAAC,EAAE;AAAExO,QAAAA,EAAE,EAAEgB,IAAAA;AAAK,OAAC,CAAC,CAAA;AACxD,MAAA,OAAA;AACF,KAAA;AAEA4U,IAAAA,aAAa,CAAC,CAAC1U,IAAI,EAAEF,IAAI,CAAC,CAAC,CAAA;GAC5B,CAAA;AACH;;AC1GamV,MAAAA,QAAQ,GAAGA,CAItBxX,MAAS,EACT;AAAEuE,EAAAA,OAAO,EAAE;AAAE0I,IAAAA,oBAAAA;AAAqB,GAAA;AAAqC,CAAC,KACrE;EACH,MAAM;IAAErI,WAAW;IAAE6S,cAAc;IAAEC,aAAa;AAAEC,IAAAA,cAAAA;AAAe,GAAC,GAAG3X,MAAM,CAAA;EAE7EA,MAAM,CAAC4E,WAAW,GAAG,MAAM;AACzB,IAAA,IAAIgO,eAAe,CAAC5S,MAAM,CAAC,EAAE,OAAA;AAE7B4E,IAAAA,WAAW,EAAE,CAAA;GACd,CAAA;AAED5E,EAAAA,MAAM,CAACyX,cAAc,GAAInI,IAAI,IAAK;AAChC,IAAA,IAAID,kBAAkB,CAACrP,MAAM,EAAEsP,IAAI,CAAC,EAAE,OAAA;IAEtCmI,cAAc,CAACnI,IAAI,CAAC,CAAA;GACrB,CAAA;AAEDtP,EAAAA,MAAM,CAAC0X,aAAa,GAAIpI,IAAI,IAAK;IAC/B,IAAIuC,iBAAiB,CAAC7R,MAAM,EAAE0X,aAAa,EAAEpI,IAAI,CAAC,EAAE,OAAA;IAEpDoI,aAAa,CAACpI,IAAI,CAAC,CAAA;GACpB,CAAA;AAEDtP,EAAAA,MAAM,CAAC2X,cAAc,GAAIC,SAAS,IAAK;AACrC,IAAA,IAAI1F,kBAAkB,CAAClS,MAAM,CAAC,EAAE,OAAA;IAEhC2X,cAAc,CAACC,SAAS,CAAC,CAAA;GAC1B,CAAA;AAED5X,EAAAA,MAAM,CAACiT,cAAc,GAAGD,kBAAkB,CAAChT,MAAM,CAAC,CAAA;AAElDA,EAAAA,MAAM,CAACiX,aAAa,GAAGD,aAAa,CAAChX,MAAM,EAAE;AAAEiN,IAAAA,oBAAAA;AAAqB,GAAC,CAAC,CAAA;AAEtE,EAAA,OAAOjN,MAAM,CAAA;AACf;;ACrCO,MAAMS,UAAU,GAAG,KAAI;AACvB,MAAME,UAAU,GAAG,KAAI;AACvB,MAAMJ,UAAU,GAAG,KAAI;AACvB,MAAMQ,WAAW,GAAG,MAAK;;AAEhC;AACA;AACA;AACa8W,MAAAA,gBAAgB,GAAG/S,mBAAmB,CAAC;AAClDC,EAAAA,GAAG,EAAE,MAAM;AACX+S,EAAAA,OAAO,EAAE,CACP;AACE/S,IAAAA,GAAG,EAAEtE,UAAU;AACfuE,IAAAA,SAAS,EAAE,IAAI;AACfE,IAAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAEkJ,aAAAA;KACZ;AACDpJ,IAAAA,aAAa,EAAEuS,QAAQ;AACvBO,IAAAA,eAAe,EAAE;AACfpI,MAAAA,KAAK,EAAE,CACL;AACEqI,QAAAA,aAAa,EAAE,IAAA;OAChB,CAAA;AAEL,KAAA;AACF,GAAC,EACD;AACEjT,IAAAA,GAAG,EAAEpE,UAAU;AACfqE,IAAAA,SAAS,EAAE,IAAI;AACfE,IAAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAEkJ,aAAAA;KACZ;AACD0J,IAAAA,eAAe,EAAE;AAAEpI,MAAAA,KAAK,EAAE,CAAC;AAAEqI,QAAAA,aAAa,EAAE,IAAA;OAAM,CAAA;AAAE,KAAA;AACtD,GAAC,EACD;AACEjT,IAAAA,GAAG,EAAExE,UAAU;AACfyE,IAAAA,SAAS,EAAE,IAAI;AACf+S,IAAAA,eAAe,EAAE;AAAEpI,MAAAA,KAAK,EAAE,CAAC;AAAEqI,QAAAA,aAAa,EAAE,IAAA;OAAM,CAAA;KAAG;IACrDC,IAAI,EAAEA,CAACjY,MAAM,EAAE;AAAEK,MAAAA,IAAAA;AAAK,KAAC,MAAM;AAC3B6X,MAAAA,MAAM,EAAE;AACNC,QAAAA,YAAY,EAAE;AACZ,UAAA,CAACC,oBAAoB,GAAG;AACtBpY,YAAAA,MAAM,EAAE;AACNqY,cAAAA,UAAU,EAAE;gBACVC,SAAS,EAAEA,MAAM;kBACf,OAAO1S,QAAQ,CAAC5F,MAAM,EAAE;AAAEsB,oBAAAA,KAAK,EAAE;AAAEjB,sBAAAA,IAAAA;AAAK,qBAAA;AAAE,mBAAC,CAAC,CAAA;AAC9C,iBAAA;AACF,eAAA;AACF,aAAA;AACF,WAAA;AACF,SAAA;AACF,OAAA;KACD,CAAA;AACH,GAAC,EACD;AACE0E,IAAAA,GAAG,EAAEhE,WAAW;AAChBiE,IAAAA,SAAS,EAAE,IAAA;GACZ,CAAA;AAEL,CAAC;;AC5DM,MAAMuT,yBAAyB,GAAGA,CAAC;AAAEC,EAAAA,QAAQ,GAAG/X,UAAAA;AAAW,CAAC,GAAG,EAAE,KAAK;AAC3E,EAAA,MAAMT,MAAM,GAAGyY,mBAAmB,EAAE,CAAA;AACpC,EAAA,MAAMC,OAAO,GACX,CAAC,EAAC1Y,MAAM,KAANA,IAAAA,IAAAA,MAAM,KAANA,KAAAA,CAAAA,IAAAA,MAAM,CAAE8B,SAAS,CAAA,IACnB8D,QAAQ,CAAC5F,MAAM,EAAE;AAAEsB,IAAAA,KAAK,EAAE;AAAEjB,MAAAA,IAAI,EAAEC,aAAa,CAACN,MAAM,EAAEwY,QAAQ,CAAA;AAAE,KAAA;AAAE,GAAC,CAAC,CAAA;EAExE,OAAO;IACLE,OAAO;AACPF,IAAAA,QAAAA;GACD,CAAA;AACH,EAAC;AAEYG,MAAAA,oBAAoB,GAC/BC,KAAmD,IAChD;AACH,EAAA,MAAM5Y,MAAM,GAAG6Y,iBAAiB,EAAE,CAAA;EAElC,OAAO;AACLC,IAAAA,KAAK,EAAE;MACLJ,OAAO,EAAEE,KAAK,CAACF,OAAO;MACtBK,OAAO,EAAGzK,CAAsC,IAAK;QACnDA,CAAC,CAACU,cAAc,EAAE,CAAA;QAClBV,CAAC,CAAC0K,eAAe,EAAE,CAAA;QAEnBjM,UAAU,CAAC/M,MAAM,EAAE;UAAEK,IAAI,EAAEuY,KAAK,CAACJ,QAAAA;AAAS,SAAC,CAAC,CAAA;QAC5CS,WAAW,CAACjZ,MAAM,CAAC,CAAA;AACrB,OAAA;AACF,KAAA;GACD,CAAA;AACH;;AC9BO,MAAMkZ,uBAAuB,GAAGA,CAAC;AACtCC,EAAAA,OAAAA;AAGF,CAAC,KAAK;AACJ,EAAA,MAAMnZ,MAAM,GAAG6Y,iBAAiB,EAAE,CAAA;EAClC,MAAM;AAAE7U,IAAAA,OAAAA;AAAQ,GAAC,GAAGmV,OAAO,CAAA;AAC3B,EAAA,MAAMC,QAAQ,GAAGC,WAAW,EAAE,CAAA;EAE9B,OAAO;IACLrV,OAAO;IACPoV,QAAQ;IACRD,OAAO;AACPnZ,IAAAA,MAAAA;GACD,CAAA;AACH,EAAC;AAEYsZ,MAAAA,kBAAkB,GAC7BV,KAAiD,IAC9C;EACH,MAAM;IAAE5U,OAAO;IAAEoV,QAAQ;AAAED,IAAAA,OAAAA;AAAQ,GAAC,GAAGP,KAAK,CAAA;AAC5C,EAAA,MAAM5Y,MAAM,GAAG6Y,iBAAiB,EAAE,CAAA;EAElC,OAAO;AACLU,IAAAA,aAAa,EAAE;MACbvV,OAAO,EAAE,CAAC,CAACA,OAAO;MAClBwV,eAAe,EAAGC,KAAc,IAAK;AACnC,QAAA,IAAIL,QAAQ,EAAE,OAAA;AACd,QAAA,MAAM/W,IAAI,GAAGqX,YAAY,CAAC1Z,MAAM,EAAEmZ,OAAO,CAAC,CAAA;QAC1C,IAAI,CAAC9W,IAAI,EAAE,OAAA;QAEXsX,QAAQ,CACN3Z,MAAM,EACN;AAAEgE,UAAAA,OAAO,EAAEyV,KAAAA;AAAM,SAAC,EAClB;AACEpY,UAAAA,EAAE,EAAEgB,IAAAA;AACN,SACF,CAAC,CAAA;AACH,OAAA;AACF,KAAA;GACD,CAAA;AACH;;;;","x_google_ignoreList":[0,1,2]}