{"version":3,"file":"index.es.js","sources":["../src/deserializer/utils/deserializeCsv.ts","../src/deserializer/createDeserializeCsvPlugin.ts"],"sourcesContent":["import {\n  ELEMENT_DEFAULT,\n  getPlugin,\n  getPluginType,\n  PlateEditor,\n  TDescendant,\n  TElement,\n  TNode,\n  Value,\n} from '@udecode/plate-common';\nimport {\n  ELEMENT_TABLE,\n  ELEMENT_TD,\n  ELEMENT_TH,\n  ELEMENT_TR,\n} from '@udecode/plate-table';\nimport { parse } from 'papaparse';\n\nimport { KEY_DESERIALIZE_CSV } from '../createDeserializeCsvPlugin';\nimport { DeserializeCsvParseOptions, DeserializeCsvPlugin } from '../types';\n\nconst isValidCsv = (\n  data: Record<string, string>[][],\n  errors: Record<string, string>[][],\n  errorTolerance: number\n) => {\n  if (errorTolerance < 0) errorTolerance = 0;\n  return !(\n    !data ||\n    data.length < 2 ||\n    data[0].length < 2 ||\n    data[1].length < 2 ||\n    (errors.length > 0 && errors.length > errorTolerance * data.length)\n  );\n};\n\nexport const deserializeCsv = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    data,\n    ...parseOptions\n  }: DeserializeCsvParseOptions & {\n    data: string;\n  }\n): TDescendant[] | undefined => {\n  const {\n    options: { errorTolerance, parseOptions: pluginParseOptions },\n  } = getPlugin<DeserializeCsvPlugin, V, PlateEditor<V>>(\n    editor,\n    KEY_DESERIALIZE_CSV\n  );\n\n  // Verify it's a csv string\n  const testCsv = parse(data, { preview: 2 });\n\n  if (testCsv.errors.length === 0) {\n    const csv = parse(data, {\n      ...pluginParseOptions,\n      ...parseOptions,\n    });\n\n    if (\n      !isValidCsv(\n        csv.data as Record<string, string>[][],\n        csv.errors as unknown as Record<string, string>[][],\n        errorTolerance!\n      )\n    )\n      return;\n\n    const paragraph = getPluginType(editor, ELEMENT_DEFAULT);\n    const table = getPluginType(editor, ELEMENT_TABLE);\n    const th = getPluginType(editor, ELEMENT_TH);\n    const tr = getPluginType(editor, ELEMENT_TR);\n    const td = getPluginType(editor, ELEMENT_TD);\n\n    const ast: TNode = {\n      type: table,\n      children: [],\n    };\n\n    if (csv.meta.fields) {\n      // csv file has headers, data structure is an array of objects keyed on the heading title\n      ast.children.push({\n        type: tr,\n        children: csv.meta.fields.map((field: string) => ({\n          type: th,\n          children: [{ type: paragraph, children: [{ text: field }] }],\n        })),\n      });\n      for (const row of csv.data as Record<string, string>[]) {\n        ast.children.push({\n          type: tr,\n          children: csv.meta.fields.map((field: string) => ({\n            type: td,\n            children: [\n              { type: paragraph, children: [{ text: row[field] || '' }] },\n            ],\n          })),\n        });\n      }\n    } else {\n      // csv is an array of arrays\n      for (const row of csv.data as [string[]]) {\n        ast.children.push({\n          type: tr,\n          children: [],\n        });\n        for (const cell of row) {\n          (ast.children.at(-1) as TElement).children.push({\n            type: td,\n            children: [{ type: paragraph, children: [{ text: cell }] }],\n          });\n        }\n      }\n    }\n    return [\n      {\n        type: paragraph,\n        children: [{ text: '' }],\n      },\n      ast,\n      {\n        type: paragraph,\n        children: [{ text: '' }],\n      },\n    ];\n  }\n};\n","import { createPluginFactory } from '@udecode/plate-common';\n\nimport { DeserializeCsvPlugin } from './types';\nimport { deserializeCsv } from './utils/index';\n\nexport const KEY_DESERIALIZE_CSV = 'deserializeCsv';\n\n/**\n * Enables support for deserializing content\n * from CSV format to Slate format.\n */\nexport const createDeserializeCsvPlugin =\n  createPluginFactory<DeserializeCsvPlugin>({\n    key: KEY_DESERIALIZE_CSV,\n    options: {\n      errorTolerance: 0.25,\n      parseOptions: {\n        header: true,\n      },\n    },\n    then: (editor) => ({\n      editor: {\n        insertData: {\n          format: 'text/plain',\n          getFragment: ({ data }) => deserializeCsv(editor, { data }),\n        },\n      },\n    }),\n  });\n"],"names":["isValidCsv","data","errors","errorTolerance","length","deserializeCsv","editor","parseOptions","options","pluginParseOptions","getPlugin","KEY_DESERIALIZE_CSV","testCsv","parse","preview","csv","paragraph","getPluginType","ELEMENT_DEFAULT","table","ELEMENT_TABLE","th","ELEMENT_TH","tr","ELEMENT_TR","td","ELEMENT_TD","ast","type","children","meta","fields","push","map","field","text","row","cell","at","createDeserializeCsvPlugin","createPluginFactory","key","header","then","insertData","format","getFragment"],"mappings":"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"}