import React from 'react';
import { TElement } from '@udecode/slate';
import { Scope } from 'jotai/core/atom';
import { JotaiProviderProps } from '../libs';
export declare const SCOPE_ELEMENT = "element";
export declare const elementStore: {
    atom: {
        element: import("jotai/core/atom").Atom<TElement>;
    };
    scope?: Scope | undefined;
    extend: <ET, EN>(extendedState: ET, options?: Omit<import("./createAtomStore").CreateAtomStoreOptions<{}, EN extends string ? EN : "element">, "initialStore"> | undefined) => import("./createAtomStore").AtomStoreApi<{
        element: TElement;
    } & ET, EN extends string ? EN : "element">;
}, useElementStore: (scope?: Scope | undefined) => {
    get: import("./createAtomStore").GetRecord<{
        element: TElement;
    }>;
    set: import("./createAtomStore").SetRecord<{
        element: TElement;
    }>;
    use: import("./createAtomStore").UseRecord<{
        element: TElement;
    }>;
};
export declare const ElementProviderChild: ({ element, scope, children, }: {
    element: TElement;
    scope: Scope;
    children: any;
}) => any;
/**
 * Global and scoped provider above element.
 */
export declare function ElementProvider({ element, scope, children, ...props }: JotaiProviderProps & {
    element: TElement;
}): React.JSX.Element;
//# sourceMappingURL=elementAtom.d.ts.map