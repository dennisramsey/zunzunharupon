{"version":3,"file":"index.js","sources":["../src/constants.ts","../src/queries/findSuggestionNode.ts","../src/queries/findSuggestionId.ts","../src/store/SuggestionProvider.tsx","../src/store/useSetActiveSuggestionId.ts","../src/utils/getSuggestionId.ts","../src/useHooksSuggestion.ts","../src/utils/getSuggestionKeys.ts","../src/utils/getSuggestionNodeEntries.ts","../src/utils/getActiveSuggestionDescriptions.ts","../src/transforms/getSuggestionProps.ts","../src/transforms/setSuggestionNodes.ts","../src/transforms/deleteSuggestion.ts","../src/transforms/deleteFragmentSuggestion.ts","../src/transforms/insertFragmentSuggestion.ts","../src/transforms/insertTextSuggestion.ts","../src/withSuggestion.ts","../src/createSuggestionPlugin.ts","../src/store/useSetIsSuggesting.ts","../src/transforms/acceptSuggestion.ts","../src/transforms/addSuggestionMark.ts","../src/transforms/rejectSuggestion.ts"],"sourcesContent":["export const MARK_SUGGESTION = 'suggestion';\nexport const KEY_SUGGESTION_ID = 'suggestionId';\n","import {\n  findNode,\n  FindNodeOptions,\n  PlateEditor,\n  Value,\n} from '@udecode/plate-common';\n\nimport { MARK_SUGGESTION } from '../constants';\nimport { TSuggestionText } from '../types';\n\nexport const findSuggestionNode = <V extends Value>(\n  editor: PlateEditor<V>,\n  { match, ...options }: FindNodeOptions<V> = {}\n) =>\n  findNode<TSuggestionText>(editor, {\n    match: (n, p) => n[MARK_SUGGESTION] && (!match || (match as any)(n, p)),\n    ...options,\n  });\n","import {\n  getEdgePoints,\n  getPointAfter,\n  getPointBefore,\n  PlateEditor,\n  Value,\n} from '@udecode/plate-common';\nimport { Location, Point } from 'slate';\n\nimport { KEY_SUGGESTION_ID } from '../constants';\nimport { findSuggestionNode } from './findSuggestionNode';\n\n/**\n * Find the suggestion id at the cursor point, the point before and after (if offset = 0).\n */\nexport const findSuggestionId = <V extends Value>(\n  editor: PlateEditor<V>,\n  at: Location\n) => {\n  let entry = findSuggestionNode(editor, {\n    at,\n  });\n  if (!entry) {\n    let start: Point;\n    let end: Point;\n    try {\n      [start, end] = getEdgePoints(editor, at);\n    } catch {\n      return;\n    }\n\n    const nextPoint = getPointAfter(editor, end);\n    if (nextPoint) {\n      entry = findSuggestionNode(editor, {\n        at: nextPoint,\n      });\n      if (!entry) {\n        const prevPoint = getPointBefore(editor, start);\n        if (prevPoint) {\n          entry = findSuggestionNode(editor, {\n            at: prevPoint,\n          });\n        }\n      }\n    }\n  }\n\n  if (entry) {\n    return entry[0][KEY_SUGGESTION_ID];\n  }\n};\n","import React, { ReactNode } from 'react';\nimport {\n  createAtomStore,\n  getJotaiProviderInitialValues,\n  JotaiProvider,\n  nanoid,\n  WithPartial,\n} from '@udecode/plate-common';\n\nimport { SuggestionUser, TSuggestion } from '../types';\n\nexport const SCOPE_SUGGESTION = Symbol('suggestion');\n\nexport interface SuggestionStoreState {\n  /**\n   * Users data.\n   */\n  users: Record<string, SuggestionUser>;\n\n  currentUserId: string | null;\n\n  /**\n   * Suggestions data.\n   */\n  suggestions: Record<string, TSuggestion>;\n\n  isSuggesting: boolean;\n\n  /**\n   * Id of the active suggestion. If null, no suggestion is active.\n   */\n  activeSuggestionId: string | null;\n\n  onSuggestionAdd: ((value: Partial<TSuggestion>) => void) | null;\n  onSuggestionUpdate:\n    | ((\n        value: Pick<TSuggestion, 'id'> & Partial<Omit<TSuggestion, 'id'>>\n      ) => void)\n    | null;\n  onSuggestionDelete: ((id: string) => void) | null;\n}\n\nexport const { suggestionStore, useSuggestionStore } = createAtomStore(\n  {\n    /**\n     * Id of the current user.\n     */\n    currentUserId: null,\n\n    /**\n     * Users data.\n     */\n    users: {},\n\n    /**\n     * Suggestion data.\n     */\n    suggestions: {},\n\n    isSuggesting: false,\n\n    /**\n     * Id of the active suggestion. If null, no suggestion is active.\n     */\n    activeSuggestionId: null,\n\n    onSuggestionAdd: null,\n    onSuggestionUpdate: null,\n    onSuggestionDelete: null,\n  } as SuggestionStoreState,\n  {\n    name: 'suggestion',\n    scope: SCOPE_SUGGESTION,\n  }\n);\n\nexport function SuggestionProvider({\n  children,\n  ...props\n}: Partial<SuggestionStoreState> & { children: ReactNode }) {\n  return (\n    <JotaiProvider\n      initialValues={getJotaiProviderInitialValues(suggestionStore, props)}\n      scope={SCOPE_SUGGESTION}\n    >\n      {children}\n    </JotaiProvider>\n  );\n}\n\nexport const useSuggestionStates = () => useSuggestionStore().use;\nexport const useSuggestionSelectors = () => useSuggestionStore().get;\nexport const useSuggestionActions = () => useSuggestionStore().set;\n\nexport const useSuggestionById = (id?: string | null): TSuggestion | null => {\n  const suggestion = useSuggestionSelectors().suggestions();\n  if (!id) return null;\n\n  return suggestion[id];\n};\n\nexport const useSuggestionUserById = (\n  id: string | null\n): SuggestionUser | null => {\n  const users = useSuggestionSelectors().users();\n  if (!id) return null;\n\n  return users[id];\n};\n\nexport const useCurrentSuggestionUser = (): SuggestionUser | null => {\n  const users = useSuggestionSelectors().users();\n  const currentUserId = useSuggestionSelectors().currentUserId();\n  if (!currentUserId) return null;\n\n  return users[currentUserId];\n};\n\nexport const useUpdateSuggestion = (id?: string | null) => {\n  const suggestion = useSuggestionById(id);\n\n  const [suggestions, setSuggestions] = useSuggestionStates().suggestions();\n\n  return (value: Partial<TSuggestion>) => {\n    if (!id) return;\n\n    setSuggestions({\n      ...suggestions,\n      [id]: { ...suggestion, ...value } as any,\n    });\n  };\n};\n\nexport const useAddSuggestion = () => {\n  const [suggestions, setSuggestions] = useSuggestionStates().suggestions();\n  const currentUserId = useSuggestionSelectors().currentUserId();\n\n  return (value: WithPartial<TSuggestion, 'id' | 'userId' | 'createdAt'>) => {\n    if (!currentUserId) return;\n\n    const id = value.id ?? nanoid();\n\n    setSuggestions({\n      ...suggestions,\n      [id]: {\n        id,\n        userId: currentUserId,\n        createdAt: Date.now(),\n        ...value,\n      },\n    });\n  };\n};\n\nexport const useRemoveSuggestion = () => {\n  const [suggestions, setSuggestions] = useSuggestionStates().suggestions();\n\n  return (id: string | null) => {\n    if (!id) return;\n\n    delete suggestions[id];\n\n    setSuggestions({\n      ...suggestions,\n    });\n  };\n};\n","import { PlateEditor, usePlateEditorRef, Value } from '@udecode/plate-common';\n\nimport { SuggestionEditorProps } from '../types';\nimport { useSuggestionActions } from './SuggestionProvider';\n\nexport const useSetActiveSuggestionId = () => {\n  const editor = usePlateEditorRef<\n    Value,\n    PlateEditor & SuggestionEditorProps\n  >();\n  const setActiveSuggestionId = useSuggestionActions().activeSuggestionId();\n\n  return (value: string | null) => {\n    setActiveSuggestionId(value);\n    editor.activeSuggestionId = value;\n  };\n};\n","import { TNode } from '@udecode/plate-common';\n\nimport { KEY_SUGGESTION_ID } from '../constants';\n\nexport const getSuggestionId = (node: TNode) => {\n  return node[KEY_SUGGESTION_ID] as string | undefined;\n};\n","import { useEffect } from 'react';\nimport {\n  PlateEditor,\n  usePlateSelectors,\n  Value,\n  WithPlatePlugin,\n} from '@udecode/plate-common';\n\nimport { findSuggestionNode } from './queries/index';\nimport { useSetActiveSuggestionId } from './store/useSetActiveSuggestionId';\nimport { SuggestionPlugin } from './types';\nimport { getSuggestionId } from './utils/getSuggestionId';\n\nexport const useHooksSuggestion = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  // eslint-disable-next-line unused-imports/no-unused-vars\n  plugin: WithPlatePlugin<SuggestionPlugin>\n) => {\n  const key = usePlateSelectors().keyEditor();\n  const setActiveSuggestionId = useSetActiveSuggestionId();\n\n  /**\n   * Set the active suggestion to the selected suggestion (or the first such\n   * suggestion if there are multiple). If there is no selected suggestion,\n   * set the active suggestion to null.\n   */\n  useEffect(() => {\n    if (!editor.selection) return;\n\n    const resetActiveSuggestion = () => {\n      setActiveSuggestionId(null);\n    };\n\n    const suggestionEntry = findSuggestionNode(editor);\n    if (!suggestionEntry) return resetActiveSuggestion();\n\n    const [suggestionNode] = suggestionEntry;\n\n    const id = getSuggestionId(suggestionNode);\n    if (!id) return resetActiveSuggestion();\n\n    setActiveSuggestionId(id);\n  }, [editor, key, setActiveSuggestionId]);\n};\n","import { isDefined, TNode } from '@udecode/plate-common';\n\nimport { MARK_SUGGESTION } from '../constants';\n\nexport const getSuggestionKey = (id = '0') => `${MARK_SUGGESTION}_${id}`;\n\nexport const isSuggestionKey = (key: string) =>\n  key.startsWith(`${MARK_SUGGESTION}_`);\n\nexport const getSuggestionKeys = (node: TNode) => {\n  const keys: string[] = [];\n\n  Object.keys(node).forEach((key) => {\n    if (isSuggestionKey(key)) keys.push(key);\n  });\n\n  return keys;\n};\n\nexport const getSuggestionUserIdByKey = (key?: string | null) =>\n  isDefined(key) ? key.split(`${MARK_SUGGESTION}_`)[1] : null;\n\nexport const getSuggestionUserIds = (node: TNode) => {\n  return getSuggestionKeys(node).map(\n    (key) => getSuggestionUserIdByKey(key) as string\n  );\n};\n\nexport const getSuggestionUserId = (node: TNode) => {\n  return getSuggestionUserIds(node)[0];\n};\n","import {\n  getNodeEntries,\n  GetNodeEntriesOptions,\n  PlateEditor,\n  Value,\n} from '@udecode/plate-common';\n\nimport { TSuggestionText } from '../types';\n\nexport const getSuggestionNodeEntries = <V extends Value = Value>(\n  editor: PlateEditor<V>,\n  suggestionId: string,\n  {\n    at = [],\n    match = () => true,\n    ...options\n  }: GetNodeEntriesOptions<V> & {\n    match?: (suggestion: TSuggestionText) => boolean;\n  } = {}\n) =>\n  getNodeEntries<TSuggestionText>(editor, {\n    at,\n    match: (n) =>\n      n.suggestionId === suggestionId && match(n as TSuggestionText),\n    ...options,\n  });\n","import { PlateEditor, Value } from '@udecode/plate-common';\n\nimport { findSuggestionNode } from '../queries/index';\nimport { getSuggestionKey, getSuggestionUserIds } from './getSuggestionKeys';\nimport { getSuggestionNodeEntries } from './getSuggestionNodeEntries';\n\nexport type TSuggestionCommonDescription = {\n  userId: string;\n  suggestionId: string;\n};\n\n// TODO: Move to ../types\nexport type TSuggestionInsertionDescription = TSuggestionCommonDescription & {\n  type: 'insertion';\n  insertedText: string;\n};\n\nexport type TSuggestionDeletionDescription = TSuggestionCommonDescription & {\n  type: 'deletion';\n  deletedText: string;\n};\n\nexport type TSuggestionReplacementDescription = TSuggestionCommonDescription & {\n  type: 'replacement';\n  insertedText: string;\n  deletedText: string;\n};\n\nexport type TSuggestionDescription =\n  | TSuggestionInsertionDescription\n  | TSuggestionDeletionDescription\n  | TSuggestionReplacementDescription;\n\n/**\n * Get the suggestion descriptions of the selected node.\n * A node can have multiple suggestions (multiple users).\n * Each description maps to a user suggestion.\n */\nexport const getActiveSuggestionDescriptions = <V extends Value = Value>(\n  editor: PlateEditor<V>\n): TSuggestionDescription[] => {\n  const aboveEntry = findSuggestionNode(editor);\n  if (!aboveEntry) return [];\n\n  const aboveNode = aboveEntry[0];\n  const suggestionId = aboveNode.suggestionId!;\n\n  const userIds = getSuggestionUserIds(aboveNode);\n\n  return userIds.map((userId) => {\n    const nodes = Array.from(\n      getSuggestionNodeEntries(editor, suggestionId, {\n        match: (n: any) => n[getSuggestionKey(userId)],\n      })\n    ).map(([node]) => node);\n    const insertions = nodes.filter((node) => !node.suggestionDeletion);\n    const deletions = nodes.filter((node) => node.suggestionDeletion);\n    const insertedText = insertions.map((node) => node.text).join('');\n    const deletedText = deletions.map((node) => node.text).join('');\n\n    if (insertions.length > 0 && deletions.length > 0) {\n      return {\n        type: 'replacement',\n        userId,\n        suggestionId,\n        insertedText,\n        deletedText,\n      };\n    }\n\n    if (deletions.length > 0) {\n      return {\n        type: 'deletion',\n        userId,\n        suggestionId,\n        deletedText,\n      };\n    }\n\n    return {\n      type: 'insertion',\n      userId,\n      suggestionId,\n      insertedText,\n    };\n  });\n};\n","import { getPluginOptions, PlateEditor, Value } from '@udecode/plate-common';\n\nimport { KEY_SUGGESTION_ID, MARK_SUGGESTION } from '../constants';\nimport { SuggestionPlugin } from '../types';\nimport { getSuggestionKey } from '../utils/index';\n\nexport const getSuggestionCurrentUserKey = <V extends Value>(\n  editor: PlateEditor<V>\n) => {\n  const { currentUserId } = getPluginOptions<SuggestionPlugin, V>(\n    editor,\n    MARK_SUGGESTION\n  );\n\n  return getSuggestionKey(currentUserId);\n};\n\nexport const getSuggestionProps = <V extends Value>(\n  editor: PlateEditor<V>,\n  id: string,\n  { suggestionDeletion }: { suggestionDeletion?: boolean } = {}\n) => {\n  const res = {\n    [MARK_SUGGESTION]: true,\n    [KEY_SUGGESTION_ID]: id,\n    [getSuggestionCurrentUserKey(editor)]: true,\n  };\n\n  if (suggestionDeletion) {\n    res.suggestionDeletion = true;\n  }\n\n  return res;\n};\n","import {\n  addRangeMarks,\n  getNodeEntries,\n  isInline,\n  nanoid,\n  PlateEditor,\n  setNodes,\n  SetNodesOptions,\n  TNodeProps,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\n\nimport { SuggestionEditorProps, TSuggestionText } from '../types';\nimport { getSuggestionProps } from './getSuggestionProps';\n\nexport const setSuggestionNodes = <V extends Value = Value>(\n  editor: PlateEditor<V> & SuggestionEditorProps,\n  options?: SetNodesOptions & {\n    suggestionDeletion?: boolean;\n    suggestionId?: string;\n  }\n) => {\n  const { at = editor.selection, suggestionId = nanoid() } = options ?? {};\n\n  // TODO: get all inline nodes to be set\n  const _nodeEntries = getNodeEntries(editor, {\n    match: (n) => isInline(editor, n),\n    ...options,\n  });\n  const nodeEntries = [..._nodeEntries];\n\n  withoutNormalizing(editor, () => {\n    const props: TNodeProps<TSuggestionText> = getSuggestionProps(\n      editor,\n      suggestionId,\n      options\n    );\n\n    addRangeMarks(editor, props, {\n      at,\n    });\n\n    nodeEntries.forEach(([, path]) => {\n      setNodes<TSuggestionText>(editor, props, {\n        at: path,\n        match: (n) => {\n          if (!isInline(editor, n)) return false;\n\n          return true;\n        },\n        ...options,\n      });\n    });\n  });\n};\n","import {\n  createPointRef,\n  deleteText,\n  findNode,\n  getEditorString,\n  getPointAfter,\n  getPointBefore,\n  isBlock,\n  isElementEmpty,\n  isRangeAcrossBlocks,\n  isStartPoint,\n  moveSelection,\n  nanoid,\n  PlateEditor,\n  removeNodes,\n  TElement,\n  unhangCharacterRange,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\nimport { Point, Range } from 'slate';\n\nimport { MARK_SUGGESTION } from '../constants';\nimport { findSuggestionId } from '../queries/findSuggestionId';\nimport { findSuggestionNode } from '../queries/index';\nimport { getSuggestionCurrentUserKey } from './getSuggestionProps';\nimport { setSuggestionNodes } from './setSuggestionNodes';\n\n/**\n * Suggest deletion one character at a time until target point is reached.\n * Suggest additions are safely deleted.\n */\nexport const deleteSuggestion = <V extends Value>(\n  editor: PlateEditor<V>,\n  at: Range,\n  {\n    reverse,\n  }: {\n    reverse?: boolean;\n  } = {}\n) => {\n  withoutNormalizing(editor, () => {\n    const { anchor: from, focus: to } = at;\n\n    const suggestionId = findSuggestionId(editor, from) ?? nanoid();\n\n    const toRef = createPointRef(editor, to);\n\n    let pointCurrent: Point | undefined;\n    while (true) {\n      pointCurrent = editor.selection?.anchor;\n      if (!pointCurrent) break;\n\n      const pointTarget = toRef.current;\n      if (!pointTarget) break;\n\n      // don't delete across blocks\n      if (\n        !isRangeAcrossBlocks(editor, {\n          at: { anchor: pointCurrent, focus: pointTarget },\n        })\n      ) {\n        // always 0 when across blocks\n        const str = getEditorString(\n          editor,\n          reverse\n            ? {\n                anchor: pointTarget,\n                focus: pointCurrent,\n              }\n            : {\n                anchor: pointCurrent,\n                focus: pointTarget,\n              }\n        );\n        if (str.length === 0) break;\n      }\n\n      const getPoint = reverse ? getPointBefore : getPointAfter;\n\n      const pointNext = getPoint(editor, pointCurrent, {\n        unit: 'character',\n      });\n      if (!pointNext) break;\n\n      let range = reverse\n        ? {\n            anchor: pointNext,\n            focus: pointCurrent,\n          }\n        : {\n            anchor: pointCurrent,\n            focus: pointNext,\n          };\n      range = unhangCharacterRange(editor, range);\n\n      // if the current point is in block addition suggestion, delete block\n      const entryBlock = findNode<TElement>(editor, {\n        at: pointCurrent,\n        match: (n) =>\n          isBlock(editor, n) &&\n          n[MARK_SUGGESTION] &&\n          !n.suggestionDeletion &&\n          n[getSuggestionCurrentUserKey(editor)],\n      });\n\n      if (\n        entryBlock &&\n        isStartPoint(editor, pointCurrent, entryBlock[1]) &&\n        isElementEmpty(editor, entryBlock[0] as any)\n      ) {\n        removeNodes(editor, {\n          at: entryBlock[1],\n        });\n        continue;\n      }\n\n      // move selection if still the same\n      if (Point.equals(pointCurrent, editor.selection!.anchor)) {\n        moveSelection(editor, {\n          reverse,\n          unit: 'character',\n        });\n      }\n\n      // skip if the range is across blocks\n      if (\n        isRangeAcrossBlocks(editor, {\n          at: range,\n        })\n      ) {\n        continue;\n      }\n\n      // if the current point is in addition suggestion, delete\n      const entryText = findSuggestionNode(editor, {\n        at: range,\n        match: (n) =>\n          !n.suggestionDeletion && n[getSuggestionCurrentUserKey(editor)],\n      });\n      if (entryText) {\n        deleteText(editor, { at: range, unit: 'character' });\n        continue;\n      }\n\n      setSuggestionNodes(editor, {\n        at: range,\n        suggestionDeletion: true,\n        suggestionId,\n      });\n    }\n  });\n};\n","import {\n  collapseSelection,\n  getEdgePoints,\n  PlateEditor,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\n\nimport { deleteSuggestion } from './deleteSuggestion';\n\nexport const deleteFragmentSuggestion = <V extends Value>(\n  editor: PlateEditor<V>,\n  { reverse }: { reverse?: boolean } = {}\n) => {\n  withoutNormalizing(editor, () => {\n    const selection = editor.selection!;\n\n    const [start, end] = getEdgePoints(editor, selection);\n\n    if (reverse) {\n      collapseSelection(editor, { edge: 'end' });\n      deleteSuggestion(\n        editor,\n        { anchor: end, focus: start },\n        { reverse: true }\n      );\n    } else {\n      collapseSelection(editor, { edge: 'start' });\n      deleteSuggestion(editor, { anchor: start, focus: end });\n    }\n  });\n};\n","import {\n  applyDeepToNodes,\n  nanoid,\n  PlateEditor,\n  TDescendant,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\n\nimport { KEY_SUGGESTION_ID, MARK_SUGGESTION } from '../constants';\nimport { findSuggestionId } from '../queries/findSuggestionId';\nimport { getSuggestionKeys } from '../utils/index';\nimport { deleteFragmentSuggestion } from './deleteFragmentSuggestion';\nimport { getSuggestionCurrentUserKey } from './getSuggestionProps';\n\nexport const insertFragmentSuggestion = <V extends Value>(\n  editor: PlateEditor<V>,\n  fragment: TDescendant[],\n  {\n    insertFragment = editor.insertFragment,\n  }: {\n    insertFragment?: (fragment: TDescendant[]) => void;\n  } = {}\n) => {\n  withoutNormalizing(editor, () => {\n    deleteFragmentSuggestion(editor);\n\n    const id = findSuggestionId(editor, editor.selection!) ?? nanoid();\n\n    fragment.forEach((node) => {\n      applyDeepToNodes({\n        node,\n        source: {},\n        apply: (n) => {\n          if (!n[MARK_SUGGESTION]) {\n            // Add suggestion mark\n            n[MARK_SUGGESTION] = true;\n          }\n          if (n.suggestionDeletion) {\n            // Remove suggestion deletion mark\n            delete n.suggestionDeletion;\n          }\n\n          n[KEY_SUGGESTION_ID] = id;\n\n          // remove the other user keys\n          const otherUserKeys = getSuggestionKeys(n);\n          otherUserKeys.forEach((key) => {\n            delete n[key];\n          });\n\n          // set current user key\n          n[getSuggestionCurrentUserKey(editor)] = true;\n        },\n      });\n    });\n\n    insertFragment(fragment);\n  });\n};\n","import {\n  insertNodes,\n  isSelectionExpanded,\n  nanoid,\n  PlateEditor,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\n\nimport { findSuggestionId } from '../queries/findSuggestionId';\nimport { TSuggestionText } from '../types';\nimport { deleteFragmentSuggestion } from './deleteFragmentSuggestion';\nimport { getSuggestionProps } from './getSuggestionProps';\n\nexport const insertTextSuggestion = <V extends Value>(\n  editor: PlateEditor<V>,\n  text: string\n) => {\n  withoutNormalizing(editor, () => {\n    const id = findSuggestionId(editor, editor.selection!) ?? nanoid();\n\n    if (isSelectionExpanded(editor)) {\n      deleteFragmentSuggestion(editor);\n    }\n\n    insertNodes<TSuggestionText>(\n      editor,\n      {\n        text,\n        ...getSuggestionProps(editor, id),\n      },\n      {\n        at: editor.selection!,\n        select: true,\n      }\n    );\n  });\n};\n","import {\n  getNode,\n  getPointAfter,\n  getPointBefore,\n  PlateEditor,\n  removeNodes,\n  setNodes,\n  unsetNodes,\n  Value,\n  WithPlatePlugin,\n} from '@udecode/plate-common';\n\nimport { KEY_SUGGESTION_ID, MARK_SUGGESTION } from './constants';\nimport { deleteFragmentSuggestion } from './transforms/deleteFragmentSuggestion';\nimport { deleteSuggestion } from './transforms/deleteSuggestion';\nimport { insertFragmentSuggestion } from './transforms/insertFragmentSuggestion';\nimport { insertTextSuggestion } from './transforms/insertTextSuggestion';\nimport {\n  SuggestionEditorProps,\n  SuggestionPlugin,\n  TSuggestionText,\n} from './types';\nimport { getSuggestionId, getSuggestionKeys } from './utils/index';\n\nexport const withSuggestion = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n  EE extends E & SuggestionEditorProps = E & SuggestionEditorProps,\n>(\n  e: E,\n  // eslint-disable-next-line unused-imports/no-unused-vars\n  plugin: WithPlatePlugin<SuggestionPlugin, V, E>\n) => {\n  const editor = e as unknown as EE;\n\n  const {\n    normalizeNode,\n    insertText,\n    insertFragment,\n    insertBreak,\n    deleteBackward,\n    deleteForward,\n    deleteFragment,\n  } = editor;\n\n  editor.isSuggesting = false;\n\n  editor.insertBreak = () => {\n    if (editor.isSuggesting) {\n      // TODO: split node\n      insertTextSuggestion(editor, '\\n');\n      return;\n    }\n\n    insertBreak();\n  };\n\n  editor.insertText = (text) => {\n    if (editor.isSuggesting) {\n      insertTextSuggestion(editor, text);\n      return;\n    }\n\n    insertText(text);\n  };\n\n  editor.insertFragment = (fragment) => {\n    if (editor.isSuggesting) {\n      insertFragmentSuggestion(editor, fragment, { insertFragment });\n      return;\n    }\n\n    insertFragment(fragment);\n  };\n\n  editor.deleteFragment = (direction) => {\n    if (editor.isSuggesting) {\n      deleteFragmentSuggestion(editor, { reverse: true });\n      return;\n    }\n\n    deleteFragment(direction);\n  };\n\n  editor.deleteBackward = (unit) => {\n    if (editor.isSuggesting) {\n      const selection = editor.selection!;\n      const pointTarget = getPointBefore(editor, selection, {\n        unit,\n      });\n      if (!pointTarget) return;\n\n      deleteSuggestion(\n        editor,\n        { anchor: selection.anchor, focus: pointTarget },\n        {\n          reverse: true,\n        }\n      );\n\n      return;\n    }\n\n    deleteBackward(unit);\n  };\n\n  editor.deleteForward = (unit) => {\n    if (editor.isSuggesting) {\n      const selection = editor.selection!;\n\n      const pointTarget = getPointAfter(editor, selection, { unit });\n      if (!pointTarget) return;\n\n      deleteSuggestion(editor, {\n        anchor: selection.anchor,\n        focus: pointTarget,\n      });\n\n      return;\n    }\n\n    deleteForward(unit);\n  };\n\n  editor.normalizeNode = (entry) => {\n    const [node, path] = entry;\n\n    if (node[MARK_SUGGESTION]) {\n      const pointBefore = getPointBefore(editor, path);\n      // Merge with previous suggestion\n      if (pointBefore) {\n        const nodeBefore = getNode(editor, pointBefore.path);\n        if (\n          (nodeBefore as any)?.[MARK_SUGGESTION] &&\n          (nodeBefore as any)[KEY_SUGGESTION_ID] !== node[KEY_SUGGESTION_ID]\n        ) {\n          setNodes<TSuggestionText>(\n            editor,\n            { [KEY_SUGGESTION_ID]: (nodeBefore as any)[KEY_SUGGESTION_ID] },\n            { at: path }\n          );\n          return;\n        }\n      }\n\n      // Unset suggestion when there is no suggestion id\n      if (!getSuggestionId(node)) {\n        const keys = getSuggestionKeys(node);\n        unsetNodes(editor, [MARK_SUGGESTION, 'suggestionDeletion', ...keys], {\n          at: path,\n        });\n        return;\n      }\n\n      // Unset suggestion when there is no suggestion user id\n      if (getSuggestionKeys(node).length === 0) {\n        if (node.suggestionDeletion) {\n          // Unset deletions\n          unsetNodes(editor, [MARK_SUGGESTION, KEY_SUGGESTION_ID], {\n            at: path,\n          });\n        } else {\n          // Remove additions\n          removeNodes(editor, { at: path });\n        }\n        return;\n      }\n    }\n\n    normalizeNode(entry);\n  };\n\n  return editor;\n};\n\n// editor.apply = (op) => {\n//   if (editor.isSuggesting) {\n//     if (op.type === 'insert_text') {\n//       const { text, path, offset } = op;\n//\n//       const id = findSuggestionId(editor, { path, offset }) ?? nanoid();\n//\n//       // const node = getNode(editor, path) as TSuggestionText;\n//       // if (node && node.suggestionId !== id) {\n//       insertNodes<TSuggestionText>(\n//         editor,\n//         { text, [MARK_SUGGESTION]: true, [KEY_SUGGESTION_ID]: id },\n//         {\n//           at: {\n//             path,\n//             offset,\n//           },\n//           select: true,\n//         }\n//       );\n//       return;\n//       // }\n//     }\n//     if (op.type === 'insert_node') {\n//       const { node, path } = op;\n//\n//       const suggestionNode = node as TSuggestionText;\n//\n//       if (\n//         suggestionNode[MARK_SUGGESTION] &&\n//         suggestionNode[KEY_SUGGESTION_ID] &&\n//         !suggestionNode.suggestionDeletion\n//       ) {\n//         apply(op);\n//         return;\n//       }\n//\n//       if (!suggestionNode[MARK_SUGGESTION]) {\n//         // Add suggestion mark\n//         suggestionNode[MARK_SUGGESTION] = true;\n//       }\n//       if (suggestionNode.suggestionDeletion) {\n//         // Remove suggestion deletion mark\n//         delete suggestionNode.suggestionDeletion;\n//       }\n//\n//       const id = findSuggestionId(editor, path) ?? nanoid();\n//       suggestionNode[KEY_SUGGESTION_ID] = id;\n//\n//       insertNodes(editor, cloneDeep(node) as any, { at: path });\n//       return;\n//     }\n//     if (op.type === 'remove_node') {\n//       const { node } = op;\n//\n//       // additions are safe to remove\n//       if (node[MARK_SUGGESTION]) {\n//         if (!node.suggestionDeletion) {\n//           apply(op);\n//         }\n//         return;\n//       }\n//\n//       const path = findNodePath(editor, node);\n//       if (!path) return;\n//\n//       const id = findSuggestionId(editor, path) ?? nanoid();\n//\n//       setSuggestionNodes(editor, {\n//         at: path,\n//         suggestionDeletion: true,\n//         suggestionId: id,\n//       });\n//       // 💡 set instead of remove -> selection gets wrong\n//       return;\n//     }\n//     if (op.type === 'remove_text') {\n//       const { path, offset, text } = op;\n//\n//       const from = { path, offset };\n//\n//       const node = getNode<TText>(editor, path);\n//       if (!node) return;\n//\n//       // additions are safe to remove\n//       if (node[MARK_SUGGESTION] && !node.suggestionDeletion) {\n//         apply(op);\n//         return;\n//       }\n//\n//       const to = {\n//         path,\n//         offset: offset + text.length,\n//       };\n//       const id =\n//         findSuggestionId(editor, {\n//           anchor: from,\n//           focus: to,\n//         }) ?? nanoid();\n//\n//       setSuggestionNodes(editor, {\n//         at: {\n//           anchor: from,\n//           focus: to,\n//         },\n//         suggestionDeletion: true,\n//         suggestionId: id,\n//       });\n//       // 💡 set instead of remove -> selection gets wrong\n//       return;\n//     }\n//     if (op.type === 'move_node') {\n//       const node = getNode(editor, op.path);\n//       if (node && isBlock(editor, node) && !node[MARK_SUGGESTION]) {\n//         // TODO: ?\n//         return;\n//       }\n//     }\n//     if (op.type === 'merge_node') {\n//       const node = getNode(editor, op.path);\n//       if (node && isBlock(editor, node)) {\n//         // if (node && isBlock(editor, node) && !node[MARK_SUGGESTION]) {\n//         // TODO: delete block suggestion\n//         return;\n//       }\n//     }\n//     if (op.type === 'split_node') {\n//       const node = getNode(editor, op.path);\n//       // allow splitting suggestion blocks\n//       if (node && isBlock(editor, node) && !node[MARK_SUGGESTION]) {\n//         // TODO: insert block suggestion\n//         return;\n//       }\n//     }\n//     if (op.type === 'set_selection') {\n//       if (editor.preventSelection) {\n//         return;\n//       }\n//     }\n//   }\n//\n//   apply(op);\n// };\n","import { createPluginFactory } from '@udecode/plate-common';\n\nimport { MARK_SUGGESTION } from './constants';\nimport { SuggestionPlugin } from './types';\nimport { useHooksSuggestion } from './useHooksSuggestion';\nimport { withSuggestion } from './withSuggestion';\n\nexport const createSuggestionPlugin = createPluginFactory<SuggestionPlugin>({\n  key: MARK_SUGGESTION,\n  isLeaf: true,\n  useHooks: useHooksSuggestion,\n  withOverrides: withSuggestion,\n});\n","import { PlateEditor, usePlateEditorRef, Value } from '@udecode/plate-common';\n\nimport { SuggestionEditorProps } from '../types';\nimport { useSuggestionActions } from './SuggestionProvider';\n\nexport const useSetIsSuggesting = () => {\n  const editor = usePlateEditorRef<\n    Value,\n    PlateEditor & SuggestionEditorProps\n  >();\n  const setIsSuggesting = useSuggestionActions().isSuggesting();\n\n  return (value: boolean) => {\n    setIsSuggesting(value);\n    editor.isSuggesting = value;\n  };\n};\n","import {\n  PlateEditor,\n  removeNodes,\n  unsetNodes,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\n\nimport { KEY_SUGGESTION_ID, MARK_SUGGESTION } from '../constants';\nimport { TSuggestionText } from '../types';\nimport { getSuggestionKey, TSuggestionDescription } from '../utils/index';\n\nexport const acceptSuggestion = <V extends Value = Value>(\n  editor: PlateEditor<V>,\n  description: TSuggestionDescription\n) => {\n  withoutNormalizing(editor as any, () => {\n    const suggestionKey = getSuggestionKey(description.userId);\n\n    unsetNodes(editor as any, [MARK_SUGGESTION, suggestionKey], {\n      at: [],\n      match: (n) => {\n        const node = n as TSuggestionText;\n\n        // unset additions\n        return (\n          node[KEY_SUGGESTION_ID] === description.suggestionId &&\n          !node.suggestionDeletion &&\n          !!node[suggestionKey]\n        );\n      },\n    });\n    removeNodes(editor as any, {\n      at: [],\n      match: (n) => {\n        const node = n as TSuggestionText;\n\n        // remove deletions\n        return (\n          node[KEY_SUGGESTION_ID] === description.suggestionId &&\n          !!node.suggestionDeletion &&\n          !!node[suggestionKey]\n        );\n      },\n    });\n  });\n};\n","import { nanoid, PlateEditor, Value } from '@udecode/plate-common';\n\nimport { KEY_SUGGESTION_ID, MARK_SUGGESTION } from '../constants';\nimport { findSuggestionId } from '../queries/findSuggestionId';\nimport { SuggestionEditorProps } from '../types';\n\nexport const addSuggestionMark = <V extends Value = Value>(\n  editor: PlateEditor<V> & SuggestionEditorProps\n) => {\n  if (!editor.selection) return;\n\n  const id = findSuggestionId(editor, editor.selection) ?? nanoid();\n\n  if (!editor.marks?.[MARK_SUGGESTION]) {\n    editor.addMark(MARK_SUGGESTION, true);\n  }\n\n  if (!editor.marks?.[KEY_SUGGESTION_ID]) {\n    editor.addMark(KEY_SUGGESTION_ID, id);\n  }\n};\n","import {\n  PlateEditor,\n  removeNodes,\n  unsetNodes,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\n\nimport { KEY_SUGGESTION_ID } from '../constants';\nimport { TSuggestionText } from '../types';\nimport { getSuggestionKey, TSuggestionDescription } from '../utils/index';\n\nexport const rejectSuggestion = <V extends Value = Value>(\n  editor: PlateEditor<V>,\n  description: TSuggestionDescription\n) => {\n  const suggestionKey = getSuggestionKey(description.userId);\n\n  withoutNormalizing(editor as any, () => {\n    unsetNodes(editor as any, [suggestionKey], {\n      at: [],\n      match: (n) => {\n        const node = n as TSuggestionText;\n\n        // unset deletions\n        return (\n          node[KEY_SUGGESTION_ID] === description.suggestionId &&\n          !!node.suggestionDeletion &&\n          !!node[suggestionKey]\n        );\n      },\n    });\n    removeNodes(editor as any, {\n      at: [],\n      match: (n) => {\n        const node = n as TSuggestionText;\n\n        // remove additions\n        return (\n          node[KEY_SUGGESTION_ID] === description.suggestionId &&\n          !node.suggestionDeletion &&\n          !!node[suggestionKey]\n        );\n      },\n    });\n  });\n};\n"],"names":["MARK_SUGGESTION","KEY_SUGGESTION_ID","findSuggestionNode","editor","match","options","findNode","n","p","findSuggestionId","at","entry","start","end","getEdgePoints","nextPoint","getPointAfter","prevPoint","getPointBefore","SCOPE_SUGGESTION","Symbol","suggestionStore","useSuggestionStore","createAtomStore","currentUserId","users","suggestions","isSuggesting","activeSuggestionId","onSuggestionAdd","onSuggestionUpdate","onSuggestionDelete","name","scope","SuggestionProvider","children","props","React","createElement","JotaiProvider","initialValues","getJotaiProviderInitialValues","useSuggestionStates","use","useSuggestionSelectors","get","useSuggestionActions","set","useSuggestionById","id","suggestion","useSuggestionUserById","useCurrentSuggestionUser","useUpdateSuggestion","setSuggestions","value","useAddSuggestion","_value$id","nanoid","userId","createdAt","Date","now","useRemoveSuggestion","useSetActiveSuggestionId","usePlateEditorRef","setActiveSuggestionId","getSuggestionId","node","useHooksSuggestion","plugin","key","usePlateSelectors","keyEditor","useEffect","selection","resetActiveSuggestion","suggestionEntry","suggestionNode","getSuggestionKey","isSuggestionKey","startsWith","getSuggestionKeys","keys","Object","forEach","push","getSuggestionUserIdByKey","isDefined","split","getSuggestionUserIds","map","getSuggestionUserId","getSuggestionNodeEntries","suggestionId","getNodeEntries","getActiveSuggestionDescriptions","aboveEntry","aboveNode","userIds","nodes","Array","from","insertions","filter","suggestionDeletion","deletions","insertedText","text","join","deletedText","length","type","getSuggestionCurrentUserKey","getPluginOptions","getSuggestionProps","res","setSuggestionNodes","_nodeEntries","isInline","nodeEntries","withoutNormalizing","addRangeMarks","path","setNodes","deleteSuggestion","reverse","_findSuggestionId","anchor","focus","to","toRef","createPointRef","pointCurrent","_editor$selection","pointTarget","current","isRangeAcrossBlocks","str","getEditorString","getPoint","pointNext","unit","range","unhangCharacterRange","entryBlock","isBlock","isStartPoint","isElementEmpty","removeNodes","Point","equals","moveSelection","entryText","deleteText","deleteFragmentSuggestion","collapseSelection","edge","insertFragmentSuggestion","fragment","insertFragment","applyDeepToNodes","source","apply","otherUserKeys","insertTextSuggestion","isSelectionExpanded","insertNodes","select","withSuggestion","e","normalizeNode","insertText","insertBreak","deleteBackward","deleteForward","deleteFragment","direction","pointBefore","nodeBefore","getNode","unsetNodes","createSuggestionPlugin","createPluginFactory","isLeaf","useHooks","withOverrides","useSetIsSuggesting","setIsSuggesting","acceptSuggestion","description","suggestionKey","addSuggestionMark","_editor$marks","_editor$marks2","marks","addMark","rejectSuggestion"],"mappings":"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"}