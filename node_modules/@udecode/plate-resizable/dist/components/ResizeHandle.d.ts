import React, { MouseEventHandler, TouchEventHandler } from 'react';
import { ResizeDirection, ResizeEvent } from '../types';
export declare const resizeHandleAtoms: {
    onResize: import("jotai").Atom<{
        fn: any;
    } | null> & {
        write: (get: {
            <Value>(atom: import("jotai").Atom<Value | Promise<Value>>): Value;
            <Value_1>(atom: import("jotai").Atom<Promise<Value_1>>): Value_1;
            <Value_2>(atom: import("jotai").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;
        } & {
            <Value_3>(atom: import("jotai").Atom<Value_3 | Promise<Value_3>>, options: {
                unstable_promise: true;
            }): Value_3 | Promise<Value_3>;
            <Value_4>(atom: import("jotai").Atom<Promise<Value_4>>, options: {
                unstable_promise: true;
            }): Value_4 | Promise<Value_4>;
            <Value_5>(atom: import("jotai").Atom<Value_5>, options: {
                unstable_promise: true;
            }): (Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5) | Promise<Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5>;
        }, set: {
            <Value_6, Result extends void | Promise<void>>(atom: import("jotai").WritableAtom<Value_6, undefined, Result>): Result;
            <Value_7, Update, Result_1 extends void | Promise<void>>(atom: import("jotai").WritableAtom<Value_7, Update, Result_1>, update: Update): Result_1;
        }, update: {
            fn: any;
        } | ((prev: {
            fn: any;
        } | null) => {
            fn: any;
        } | null) | null) => void;
        onMount?: (<S extends (update: {
            fn: any;
        } | ((prev: {
            fn: any;
        } | null) => {
            fn: any;
        } | null) | null) => void>(setAtom: S) => void | (() => void)) | undefined;
    } & {
        init: {
            fn: any;
        } | null;
    };
};
export declare const ResizeHandleEffects: ({ onResize, }: {
    onResize?: ResizeHandleOptions['onResize'];
}) => null;
export declare const ResizeHandleProvider: ({ children, onResize, }: {
    children: React.ReactNode;
    onResize?: ResizeHandleOptions['onResize'];
}) => React.JSX.Element;
export type ResizeHandleOptions = {
    direction?: ResizeDirection;
    onResize?: (event: ResizeEvent) => void;
    onMouseDown?: MouseEventHandler;
    onTouchStart?: TouchEventHandler;
    onHover?: () => void;
    onHoverEnd?: () => void;
};
export declare const useResizeHandleState: ({ direction, onResize, onMouseDown, onTouchStart, onHover, onHoverEnd, }: ResizeHandleOptions) => {
    isResizing: boolean;
    setIsResizing: React.Dispatch<React.SetStateAction<boolean>>;
    initialPosition: number;
    setInitialPosition: React.Dispatch<React.SetStateAction<number>>;
    initialSize: number;
    setInitialSize: React.Dispatch<React.SetStateAction<number>>;
    isHorizontal: boolean;
    direction: ResizeDirection;
    onResize: ((event: ResizeEvent) => void) | undefined;
    onMouseDown: React.MouseEventHandler | undefined;
    onTouchStart: React.TouchEventHandler | undefined;
    onHover: (() => void) | undefined;
    onHoverEnd: (() => void) | undefined;
};
export declare const useResizeHandle: ({ setInitialPosition, setInitialSize, setIsResizing, onMouseDown, onTouchStart, isHorizontal, isResizing, onHover, onHoverEnd, }: ReturnType<typeof useResizeHandleState>) => {
    props: {
        onMouseDown: React.MouseEventHandler;
        onTouchStart: React.TouchEventHandler;
        onMouseOver: () => void;
        onMouseOut: () => void;
        onTouchMove: () => void;
        onTouchEnd: () => void;
    };
};
export declare const ResizeHandle: React.ForwardRefExoticComponent<{
    as?: React.ElementType<any> | undefined;
    asChild?: boolean | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    options?: ResizeHandleOptions | undefined;
    state?: {
        isResizing: boolean;
        setIsResizing: React.Dispatch<React.SetStateAction<boolean>>;
        initialPosition: number;
        setInitialPosition: React.Dispatch<React.SetStateAction<number>>;
        initialSize: number;
        setInitialSize: React.Dispatch<React.SetStateAction<number>>;
        isHorizontal: boolean;
        direction: ResizeDirection;
        onResize: ((event: ResizeEvent) => void) | undefined;
        onMouseDown: React.MouseEventHandler | undefined;
        onTouchStart: React.TouchEventHandler | undefined;
        onHover: (() => void) | undefined;
        onHoverEnd: (() => void) | undefined;
    } | undefined;
    setProps?: ((hookProps: {
        onMouseDown: React.MouseEventHandler;
        onTouchStart: React.TouchEventHandler;
        onMouseOver: () => void;
        onMouseOut: () => void;
        onTouchMove: () => void;
        onTouchEnd: () => void;
    }) => Omit<React.HTMLAttributes<HTMLDivElement>, "onResize">) | undefined;
} & Omit<React.HTMLAttributes<HTMLDivElement>, "onResize"> & React.RefAttributes<any>>;
export type ResizeHandleProps = React.ComponentPropsWithRef<typeof ResizeHandle>;
//# sourceMappingURL=ResizeHandle.d.ts.map