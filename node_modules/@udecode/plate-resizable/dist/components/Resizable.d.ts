import React from 'react';
import { ResizeEvent, ResizeLength } from '../types';
export interface ResizableOptions {
    /**
     * Node alignment.
     */
    align?: 'left' | 'center' | 'right';
    readOnly?: boolean;
    minWidth?: ResizeLength;
    maxWidth?: ResizeLength;
}
export declare const useResizableState: ({ align, minWidth, maxWidth, }?: ResizableOptions) => {
    align: "right" | "left" | "center";
    minWidth: ResizeLength;
    maxWidth: ResizeLength;
    setNodeWidth: (w: number) => void;
    setWidth: (update?: import("csstype").Property.Width<string | number> | undefined) => void;
    width: import("csstype").Property.Width<string | number> | undefined;
};
export declare const useResizable: ({ align, minWidth, maxWidth, setNodeWidth, setWidth, width, }: ReturnType<typeof useResizableState>) => {
    wrapperRef: React.RefObject<HTMLDivElement>;
    wrapperProps: {
        style: React.CSSProperties;
    };
    props: {
        style: React.CSSProperties;
    };
    context: {
        onResize: ({ initialSize, delta, finished, direction }: ResizeEvent) => void;
    };
};
declare const Resizable: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & {
    options: ResizableOptions;
} & React.RefAttributes<HTMLDivElement>>;
export { Resizable };
//# sourceMappingURL=Resizable.d.ts.map