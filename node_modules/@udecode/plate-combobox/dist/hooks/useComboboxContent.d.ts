import { ComboboxControls, Data, NoData } from '..';
import { ComboboxProps } from '../types/ComboboxProps';
export type ComboboxContentProps<TData extends Data = NoData> = Omit<ComboboxProps<TData>, 'id' | 'trigger' | 'searchPattern' | 'onSelectItem' | 'controlled' | 'maxSuggestions' | 'filter' | 'sort'> & {
    combobox: ComboboxControls;
};
export type ComboboxContentRootProps<TData extends Data = NoData> = ComboboxContentProps<TData> & {
    combobox: ComboboxControls;
};
export declare const useComboboxContentState: <TData extends unknown = undefined>({ items, combobox, }: ComboboxContentRootProps<TData>) => {
    combobox: {
        closeMenu: () => void;
        getMenuProps: (options?: import("downshift").UseComboboxGetMenuPropsOptions | undefined, otherOptions?: import("downshift").GetPropsCommonOptions | undefined) => any;
        getItemProps: (options: import("downshift").UseComboboxGetItemPropsOptions<import("..").TComboboxItemBase>) => any;
    };
    targetRange: import("slate").BaseRange | null;
};
export declare const useComboboxContent: (state: ReturnType<typeof useComboboxContentState>) => {
    menuProps: any;
    targetRange: import("slate").BaseRange | null;
};
//# sourceMappingURL=useComboboxContent.d.ts.map