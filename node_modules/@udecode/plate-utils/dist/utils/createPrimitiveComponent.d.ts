import React from 'react';
/**
 * Primitive component factory. It uses hooks for managing
 * state and props, and forwards references to child components.
 * Component props:
 * - `asChild`: If true, the component will be rendered as a `Slot` {@link https://www.radix-ui.com/docs/primitives/utilities/slot}.
 * - `options`: Options passed to the state hook.
 * - `state`: Provide your state instead of using the state hook.
 * - `className`: Class name to be merged to the component.
 * - `style`: Style object to be merged to the component.
 * - `setProps`: Function to set props from the props hook.
 * - `...props`: Props to be passed to the component.
 * Props hook return value:
 * - `ref`: Reference to be forwarded to the component.
 * - `props`: Props to be passed to the component.
 * - `hidden`: If true, the component will not be rendered.
 *
 * @param {React.ElementType} element The base component or native HTML element.
 * @returns {function} A primitive component.
 *
 * @example
 *
 * const MyButton = createPrimitiveComponent(Button)({
 *   stateHook: useButtonState,
 *   propsHook: useButton
 * });
 */
export declare const createPrimitiveComponent: <T extends React.ElementType<any>, P extends React.PropsWithoutRef<React.ComponentProps<T>>>(element: T) => <SH extends (options: any) => any, PH extends (state: any) => any>({ propsHook, stateHook, }?: {
    stateHook?: SH | undefined;
    propsHook?: PH | undefined;
}) => React.ForwardRefExoticComponent<React.PropsWithoutRef<{
    as?: React.ElementType<any> | undefined;
    asChild?: boolean | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    options?: Parameters<SH>[0] | undefined;
    state?: Parameters<PH>[0] | undefined;
    setProps?: ((hookProps: NonNullable<ReturnType<PH>["props"]>) => P) | undefined;
} & P> & React.RefAttributes<any>>;
//# sourceMappingURL=createPrimitiveComponent.d.ts.map