import React, { ReactElement, RefAttributes } from 'react';
import { PlateRenderElementProps } from '@udecode/plate-core';
import { EElement, TElement, Value } from '@udecode/slate';
import { BoxProps } from '..';
export type PlateElementProps<V extends Value = Value, N extends TElement = EElement<V>> = PlateRenderElementProps<V, N> & BoxProps & {
    /**
     * Get HTML attributes from Slate element. Alternative to `PlatePlugin.props`.
     */
    elementToAttributes?: (element: N) => any;
};
export declare const usePlateElement: <T extends TElement = TElement>(props: PlateElementProps<Value, T>) => {
    ref: (node: any) => void;
    props: any;
};
/**
 * Headless element component.
 */
declare const PlateElement: (<V extends Value = Value, N extends TElement = EElement<V>>(props: import("@udecode/plate-core").PlateRenderNodeProps<V, import("@udecode/plate-core").PlateEditor<V>> & Omit<import("slate-react").RenderElementProps, "element"> & {
    element: N;
} & Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
    as?: React.ElementType<any> | undefined;
    asChild?: boolean | undefined;
} & React.RefAttributes<any> & {
    /**
     * Get HTML attributes from Slate element. Alternative to `PlatePlugin.props`.
     */
    elementToAttributes?: ((element: N) => any) | undefined;
} & React.RefAttributes<HTMLDivElement>) => ReactElement) & {
    displayName?: string | undefined;
};
export { PlateElement };
//# sourceMappingURL=PlateElement.d.ts.map