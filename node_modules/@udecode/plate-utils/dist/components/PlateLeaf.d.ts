import React, { ReactElement, RefAttributes } from 'react';
import { PlateRenderLeafProps } from '@udecode/plate-core';
import { EText, TText, Value } from '@udecode/slate';
import { TextProps } from '..';
export type PlateLeafProps<V extends Value = Value, N extends TText = EText<V>> = PlateRenderLeafProps<V, N> & TextProps & {
    /**
     * Get HTML attributes from Slate leaf. Alternative to `PlatePlugin.props`.
     */
    leafToAttributes?: (leaf: N) => any;
};
export declare const usePlateLeaf: <T extends TText = TText>(props: PlateLeafProps<Value, T>) => {
    ref: (node: any) => void;
    props: any;
};
/**
 * Headless leaf component.
 */
declare const PlateLeaf: (<V extends Value = Value, N extends TText = EText<V>>({ className, ...props }: import("@udecode/plate-core").PlateRenderNodeProps<V, import("@udecode/plate-core").PlateEditor<V>> & Omit<import("slate-react").RenderLeafProps, "text" | "leaf"> & {
    leaf: N;
    text: N;
} & Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & {
    as?: React.ElementType<any> | undefined;
    asChild?: boolean | undefined;
} & React.RefAttributes<any> & {
    /**
     * Get HTML attributes from Slate leaf. Alternative to `PlatePlugin.props`.
     */
    leafToAttributes?: ((leaf: N) => any) | undefined;
} & React.RefAttributes<HTMLSpanElement>) => ReactElement) & {
    displayName?: string | undefined;
};
export { PlateLeaf };
//# sourceMappingURL=PlateLeaf.d.ts.map