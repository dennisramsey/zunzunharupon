import type { Backend } from '@staticcms/core/backend';
import type { BaseField, Collection, CollectionFile, Collections, Config, Entry, Field, FilesCollection, InferredField, SortableField } from '@staticcms/core/interface';
export declare function fileForEntry<EF extends BaseField>(collection: Collection<EF> | undefined | null, slug?: string): CollectionFile<EF> | undefined;
export declare function selectFields<EF extends BaseField>(collection: Collection<EF>, slug?: string): Field<EF>[];
export declare function selectFolderEntryExtension<EF extends BaseField>(collection: Collection<EF>): string;
export declare function selectFileEntryLabel<EF extends BaseField>(collection: Collection<EF>, slug: string): string | undefined;
export declare function selectEntryPath<EF extends BaseField>(collection: Collection<EF>, slug: string): string | undefined;
export declare function selectEntrySlug<EF extends BaseField>(collection: Collection<EF>, path: string): string | undefined;
export declare function selectAllowNewEntries<EF extends BaseField>(collection: Collection<EF>): boolean;
export declare function selectAllowDeletion<EF extends BaseField>(collection: Collection<EF>): boolean;
export declare function selectTemplateName<EF extends BaseField>(collection: Collection<EF>, slug: string): string;
export declare function selectEntryCollectionTitle<EF extends BaseField>(collection: Collection<EF>, entry: Entry): string;
export declare function selectDefaultSortableFields<EF extends BaseField>(collection: Collection<EF>, backend: Backend<EF>): string[];
export declare function selectSortableFields(collection: Collection | undefined, t: (key: string) => string): SortableField[];
export declare function selectViewFilters<EF extends BaseField>(collection?: Collection<EF>): import("@staticcms/core/interface").ViewFilter[] | undefined;
export declare function selectViewGroups<EF extends BaseField>(collection?: Collection<EF>): import("@staticcms/core/interface").ViewGroup[] | undefined;
export declare function selectFieldsComments<EF extends BaseField>(collection: Collection<EF>, entryMap: Entry): Record<string, string>;
export declare function getFileFromSlug<EF extends BaseField>(collection: FilesCollection<EF>, slug: string): CollectionFile<EF> | undefined;
export declare function selectFieldsWithMediaFolders<EF extends BaseField>(collection: Collection<EF>, slug: string): Field[];
export declare function selectMediaFolders<EF extends BaseField>(config: Config<EF>, collection: Collection<EF>, entry: Entry): string[];
export declare function getFieldsNames<EF extends BaseField>(fields: Field<EF>[] | undefined, prefix?: string): string[];
export declare function traverseFields(fields: Field[], updater: (field: Field) => Field, done?: () => boolean): Field[];
export declare function updateFieldByKey(collection: Collection, key: string, updater: (field: Field) => Field): Collection;
export declare function selectIdentifier<EF extends BaseField>(collection: Collection<EF>): string | undefined;
export declare function selectInferredField<EF extends BaseField>(collection: Collection<EF>, fieldName: string): string | null | undefined;
export declare function useInferredFields(collection: Collection): Record<string, InferredField>;
export declare function getDefaultPath(collections: Collections): string;
